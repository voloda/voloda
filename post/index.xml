<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on My personal notes on various topics</title>
    <link>http://voloda.bazilisek.net/post/</link>
    <description>Recent content in Posts on My personal notes on various topics</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 30 Apr 2018 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="http://voloda.bazilisek.net/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Angular5 Materialized Design And Karma Unit Tests Cheat Sheet</title>
      <link>http://voloda.bazilisek.net/2018/04/angular5-materialized-design-and-karma-unit-tests-cheat-sheet/</link>
      <pubDate>Mon, 30 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>http://voloda.bazilisek.net/2018/04/angular5-materialized-design-and-karma-unit-tests-cheat-sheet/</guid>
      <description>

&lt;h1 id=&#34;running-tests&#34;&gt;Running tests&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Run command from Angular5 project folder: &lt;code&gt;ng test&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;create-an-injectable-service-with-an-interface&#34;&gt;Create an injectable service with an interface&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;This allows to define a typescript interface implemented by a class&lt;/li&gt;
&lt;li&gt;For injection is actually used the &lt;code&gt;AUTHENTICATION_SERVICE&lt;/code&gt; token&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-typescript&#34; data-lang=&#34;typescript&#34;&gt;&lt;span style=&#34;color:#00f&#34;&gt;import&lt;/span&gt; { Injectable, InjectionToken } from &lt;span style=&#34;color:#a31515&#34;&gt;&amp;#39;@angular/core&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#00f&#34;&gt;import&lt;/span&gt; { HttpClient, HttpHeaders } from &lt;span style=&#34;color:#a31515&#34;&gt;&amp;#39;@angular/common/http&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#00f&#34;&gt;import&lt;/span&gt; { Observable } from &lt;span style=&#34;color:#a31515&#34;&gt;&amp;#39;rxjs/Observable&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#00f&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#a31515&#34;&gt;&amp;#39;rxjs/add/operator/map&amp;#39;&lt;/span&gt;;

&lt;span style=&#34;color:#00f&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;interface&lt;/span&gt; IAuthenticationService {
    login(username: &lt;span style=&#34;color:#2b91af&#34;&gt;string&lt;/span&gt;, password: &lt;span style=&#34;color:#2b91af&#34;&gt;string&lt;/span&gt;): Observable&amp;lt;any&amp;gt;;
    extendToken(): Observable&amp;lt;any&amp;gt;;
    logout();
    isLoggedIn(): &lt;span style=&#34;color:#00f&#34;&gt;boolean&lt;/span&gt;;
    hasRole(role: &lt;span style=&#34;color:#2b91af&#34;&gt;string&lt;/span&gt;): &lt;span style=&#34;color:#00f&#34;&gt;boolean&lt;/span&gt;;
}

&lt;span style=&#34;color:#00f&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; AUTHENTICATION_SERVICE = &lt;span style=&#34;color:#00f&#34;&gt;new&lt;/span&gt; InjectionToken&amp;lt;IAuthenticationService&amp;gt;(&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#39;AUTHENTICATION_SERVICE&amp;#39;&lt;/span&gt;);

&lt;span style=&#34;color:#00f&#34;&gt;@Injectable&lt;/span&gt;()
&lt;span style=&#34;color:#00f&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;class&lt;/span&gt; AuthenticationService &lt;span style=&#34;color:#00f&#34;&gt;implements&lt;/span&gt; IAuthenticationService {
    &lt;span style=&#34;color:#00f&#34;&gt;constructor&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;private&lt;/span&gt; http: &lt;span style=&#34;color:#2b91af&#34;&gt;HttpClient&lt;/span&gt;) { }

    &lt;span style=&#34;color:#008000&#34;&gt;// returns actually the token
&lt;/span&gt;&lt;span style=&#34;color:#008000&#34;&gt;&lt;/span&gt;    login(username: &lt;span style=&#34;color:#2b91af&#34;&gt;string&lt;/span&gt;, password: &lt;span style=&#34;color:#2b91af&#34;&gt;string&lt;/span&gt;): Observable&amp;lt;any&amp;gt; {
        &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;this&lt;/span&gt;.http.post&amp;lt;any&amp;gt;(&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#39;api/sign-in&amp;#39;&lt;/span&gt;, { username: &lt;span style=&#34;color:#2b91af&#34;&gt;username&lt;/span&gt;, password: &lt;span style=&#34;color:#2b91af&#34;&gt;password&lt;/span&gt; })
            .map(token =&amp;gt; {
                &lt;span style=&#34;color:#00f&#34;&gt;this&lt;/span&gt;.updateToken(token);
                &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; token;
            });
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Injecting the dependency utilizing interface &lt;code&gt;IAuthenticationService&lt;/code&gt; and injection token &lt;code&gt;AUTHENTICATION_SERVICE&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-typescript&#34; data-lang=&#34;typescript&#34;&gt;&lt;span style=&#34;color:#00f&#34;&gt;constructor&lt;/span&gt;(
    &lt;span style=&#34;color:#00f&#34;&gt;@Inject&lt;/span&gt;(AUTHENTICATION_SERVICE) &lt;span style=&#34;color:#00f&#34;&gt;private&lt;/span&gt; authenticationService: &lt;span style=&#34;color:#2b91af&#34;&gt;IAuthenticationService&lt;/span&gt;) { }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&#34;creating-a-spy-object-mock&#34;&gt;Creating a spy object/mock&lt;/h1&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-typescript&#34; data-lang=&#34;typescript&#34;&gt;...

describe(&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#39;AppComponent&amp;#39;&lt;/span&gt;, () =&amp;gt; {
  &lt;span style=&#34;color:#00f&#34;&gt;let&lt;/span&gt; serviceSpy: &lt;span style=&#34;color:#2b91af&#34;&gt;jasmine.SpyObj&lt;/span&gt;&amp;lt;IMyService&amp;gt;;

  beforeEach(async(() =&amp;gt; {
    TestBed.configureTestingModule({
      declarations: [
        AppComponent
      ],
      providers: [
        {
          provide: &lt;span style=&#34;color:#2b91af&#34;&gt;MY_SERVICE&lt;/span&gt;,
          useValue: &lt;span style=&#34;color:#2b91af&#34;&gt;jasmine.createSpyObj&lt;/span&gt;(&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#39;IMyService&amp;#39;&lt;/span&gt;, [&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#39;isLoggedIn&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#a31515&#34;&gt;&amp;#39;hasRole&amp;#39;&lt;/span&gt;])
        }
      ],
      imports: [HttpClientTestingModule]
    }).compileComponents();
  }));

  beforeEach(() =&amp;gt; {
    serviceSpy = TestBed.get(MY_SERVICE);
    &lt;span style=&#34;color:#008000&#34;&gt;// preconfigure expected return value
&lt;/span&gt;&lt;span style=&#34;color:#008000&#34;&gt;&lt;/span&gt;    serviceSpy.hasRole = jasmine.createSpy().and.returnValue(&lt;span style=&#34;color:#00f&#34;&gt;false&lt;/span&gt;);
  });

...&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&#34;validating-passed-parameters-on-spy-mock&#34;&gt;Validating passed parameters on spy/mock&lt;/h1&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-typescript&#34; data-lang=&#34;typescript&#34;&gt;expect(serviceSpy.hasRole).toHaveBeenCalledWith(&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#39;admin&amp;#39;&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&#34;setting-returned-value-from-a-spy-mock-method&#34;&gt;Setting returned value from a spy/mock method&lt;/h1&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-typescript&#34; data-lang=&#34;typescript&#34;&gt;serviceSpy.hasRole = jasmine.createSpy().and.returnValue(&lt;span style=&#34;color:#00f&#34;&gt;false&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&#34;mocking-router-related-stuff&#34;&gt;Mocking router related stuff&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Needs to include module &lt;code&gt;RouterTestingModule&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;mocking-activatedroute-and-router&#34;&gt;Mocking ActivatedRoute and Router&lt;/h1&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-typescript&#34; data-lang=&#34;typescript&#34;&gt;&lt;span style=&#34;color:#00f&#34;&gt;import&lt;/span&gt; { ActivatedRoute, Router, convertToParamMap } from &lt;span style=&#34;color:#a31515&#34;&gt;&amp;#39;@angular/router&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#00f&#34;&gt;import&lt;/span&gt; { RouterTestingModule } from &lt;span style=&#34;color:#a31515&#34;&gt;&amp;#39;@angular/router/testing&amp;#39;&lt;/span&gt;;

...

  beforeEach(async(() =&amp;gt; {
    TestBed.configureTestingModule({
      declarations: [ LicenseEventLogComponent ],
      providers: [
        {
          provide: &lt;span style=&#34;color:#2b91af&#34;&gt;ActivatedRoute&lt;/span&gt;,
          useValue: {
            snapshot: {
              paramMap: &lt;span style=&#34;color:#2b91af&#34;&gt;convertToParamMap&lt;/span&gt;({ id: &lt;span style=&#34;color:#a31515&#34;&gt;&amp;#39;123&amp;#39;&lt;/span&gt; })
            }
          }
        },
        {
          provide: &lt;span style=&#34;color:#2b91af&#34;&gt;Router&lt;/span&gt;,
          useValue: &lt;span style=&#34;color:#2b91af&#34;&gt;jasmine.createSpyObj&lt;/span&gt;(&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#39;Router&amp;#39;&lt;/span&gt;, [&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#39;navigate&amp;#39;&lt;/span&gt;])
        },

...&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Jenkinsfile Sample Utilizing Docker Slave Agent</title>
      <link>http://voloda.bazilisek.net/2018/04/jenkinsfile-sample-utilizing-docker-slave-agent/</link>
      <pubDate>Tue, 03 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>http://voloda.bazilisek.net/2018/04/jenkinsfile-sample-utilizing-docker-slave-agent/</guid>
      <description>&lt;pre&gt;&lt;code&gt;pipeline {
  agent none

  environment {
    RELEASE_NUMBER = &#39;17.1.1&#39;
    VERSION_NUMBER = VersionNumber(versionNumberString: &#39;17.1.1.${BUILDS_ALL_TIME}&#39;)
  }


  stages {
    stage(&#39;Checkout from GIT&#39;){
      agent any
      steps {
        script {
          currentBuild.displayName = &amp;quot;#${VERSION_NUMBER}&amp;quot;
        }
        checkout scm
      }
    }
    stage(&#39;NUGET package restore&#39;) {
      agent { label &#39;nuget&#39; }
      steps {
            echo &#39;Restoring nuget packages&#39;
            bat &#39;&amp;quot;%NUGET_PATH%&amp;quot; restore TestSolution.sln&#39;
            dir (&#39;.&#39;) {
              stash &#39;sources&#39;
            }
      }
    }
    stage(&#39;Build&#39;) {
      agent { label &#39;dotNET_4.7&#39;}
      steps {
        dir (&#39;.&#39;) {
          unstash &#39;sources&#39;
        }

        bat &amp;quot;\&amp;quot;${tool name: &#39;Default&#39;, type: &#39;msbuild&#39;}\\msbuild.exe\&amp;quot; TestSolution.sln /p:Configuration=Release /p:Platform=\&amp;quot;Any CPU\&amp;quot;&amp;quot;

        dir (&#39;TestSolution/bin&#39;) {
          stash &#39;bins&#39;
        }
        withCredentials([usernamePassword(credentialsId: &#39;cdd06d32-f11d-446c-8687-3debc9dba901&#39;, passwordVariable: &#39;GIT_PASSWORD&#39;, usernameVariable: &#39;GIT_USERNAME&#39;)]) {
          bat &amp;quot;git tag &#39;j-${VERSION_NUMBER}&#39;&amp;quot;

          bat &amp;quot;git push http://${GIT_USERNAME}:${GIT_PASSWORD}@git.server.net/TestSolution2.git --tags&amp;quot;
        }
      }
    }
    stage(&#39;Archive&#39;) {
      agent any
      steps {
        dir (&#39;TestSolution/bin&#39;) {
          unstash &#39;bins&#39;
        }
        archive &#39;**/bin/Release/**.dll&#39;
      }
    }
  }

}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Angular5 and ASP.NET Core 2.0 cheat sheet</title>
      <link>http://voloda.bazilisek.net/2018/03/angular5-and-aspnet-core-20-cheat-sheet/</link>
      <pubDate>Mon, 26 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>http://voloda.bazilisek.net/2018/03/angular5-and-aspnet-core-20-cheat-sheet/</guid>
      <description>

&lt;p&gt;Couple of notes on setting up a project on Angular5 utilizing .NET Core 2.0
WebAPI.&lt;/p&gt;

&lt;h1 id=&#34;code-organization&#34;&gt;Code organization&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;ProjectRootFolder
|
+.git
|
+-AngularProjectFolder
|
+-dotNetCoreProjectFolder
  |
  +-wwwroot
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;project-setup&#34;&gt;Project setup&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Create project root folder with git repository:

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mkdir ProjectRootFolder&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cd ProjectRootFolder&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git init&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Create dotNet Core API application

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dotnet new webapi -n ProjectWebApi&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Create Angular 5 application

&lt;ul&gt;
&lt;li&gt;Assumes Angular5 CLI is available already (see &lt;a href=&#34;https://angular.io/guide/quickstart&#34;&gt;https://angular.io/guide/quickstart&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ng new project-web-ui&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Customize build output path in &lt;code&gt;.angular-cli.json&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Set &lt;code&gt;outDir&lt;/code&gt; to &lt;code&gt;../ProjectWebApi/WWWRoot/&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;angular-5-cli-commands&#34;&gt;Angular 5 CLI commands&lt;/h1&gt;

&lt;h2 id=&#34;running-angular5-and-net-core-2-0-backend-service-localy-during-development&#34;&gt;Running Angular5 and .NET Core 2.0 backend service localy during development&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;First create &lt;code&gt;proxy.config.json&lt;/code&gt; file in the root of web site source code.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;{
  &lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;/api&amp;#34;&lt;/span&gt;: {
      &lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;target&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;http://localhost:56785&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;secure&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#00f&#34;&gt;false&lt;/span&gt;
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Update &lt;code&gt;/api&lt;/code&gt; to a virtual folder which should be proxified&lt;/li&gt;
&lt;li&gt;Update &lt;code&gt;target&lt;/code&gt; to point to API&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Run &lt;code&gt;ng serve --proxy-config proxy.config.json&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;running-karma-tests&#34;&gt;Running KARMA tests&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ng test&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;When testing components it may require &lt;code&gt;ng test --sourcemaps=false&lt;/code&gt; to avoid issues&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;building-angular5-website-which-will-be-deployed-to-a-virtual-folder&#34;&gt;Building Angular5 website which will be deployed to a virtual folder&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ng build --base-href &amp;quot;/alx/&amp;quot;&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;alx&lt;/code&gt; is the virtual folder on the server (updates &lt;code&gt;&amp;lt;base href/&amp;gt;&lt;/code&gt; tag
inside the &lt;code&gt;index.html&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;deployment&#34;&gt;Deployment&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;IIS requires dotNet core support installed

&lt;ul&gt;
&lt;li&gt;See &lt;a href=&#34;https://docs.microsoft.com/en-us/aspnet/core/host-and-deploy/iis/?tabs=aspnetcore2x&#34;&gt;https://docs.microsoft.com/en-us/aspnet/core/host-and-deploy/iis/?tabs=aspnetcore2x&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Pay special attention to &lt;strong&gt;.NET Core Windows Server Hosting bundle&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Other than that create appropriate Application Pool as described and deploy
the application.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Biggest challenge so far is that the WebAPI process is running all the time
and cannot be easily upgraded.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>How to create Docker build agent image with SDK installed from MSI</title>
      <link>http://voloda.bazilisek.net/2017/12/how-to-create-docker-build-agent-image-with-sdk-installed-from-msi/</link>
      <pubDate>Wed, 20 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>http://voloda.bazilisek.net/2017/12/how-to-create-docker-build-agent-image-with-sdk-installed-from-msi/</guid>
      <description>

&lt;p&gt;When creating build agent docker image usually you need to install SDKs
from MSI (like Infragistic, DevExpress, Active Reports etc.).&lt;/p&gt;

&lt;p&gt;There are couple of challenges here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Windows Docker doesn&amp;rsquo;t support UI.&lt;/li&gt;
&lt;li&gt;Also very often you have to populate UI with values.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For this purpose MSI supports so called unattended installs.&lt;/p&gt;

&lt;p&gt;For input values you can pass those as parameters to MSI on command line.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s assume that we want to install SDK like Infragistic.&lt;/p&gt;

&lt;h1 id=&#34;how-to-find-out-msi-command-line&#34;&gt;How to find out MSI command line&lt;/h1&gt;

&lt;h2 id=&#34;use-msi-logging&#34;&gt;Use MSI logging&lt;/h2&gt;

&lt;p&gt;First run the SDK MSI from command line on a sandbox PC so it produced
installation log:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;msiexec /i NetAdvantage_WinForms_20112.msi /L*V infragistic.log
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now follow the installation&lt;/p&gt;

&lt;p&gt;Now looks into generated &lt;code&gt;infragistic.log&lt;/code&gt; file and look for values you entered.&lt;/p&gt;

&lt;p&gt;Piece of log file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;...
Action 20:16:29: ExecuteAction.
Action start 20:16:29: ExecuteAction.
MSI (c) (A4:F0) [20:16:29:526]: PROPERTY CHANGE: Adding SECONDSEQUENCE property. Its value is &#39;1&#39;.
MSI (c) (A4:F0) [20:16:29:535]: Grabbed execution mutex.
MSI (c) (A4:F0) [20:16:29:535]: Incrementing counter to disable shutdown. Counter after increment: 0
MSI (c) (A4:F0) [20:16:29:535]: Switching to server: COMMON_DOCUMENTS_LOC=&amp;quot;C:\Users\Public\Documents&amp;quot; USER_DOCUMENTS_LOC=&amp;quot;C:\Users\voloda\Documents&amp;quot; INSTALLDIR=&amp;quot;C:\Program Files (x86)\Infragistics\&amp;quot; AGREE_AND_INSTALL_OFFICE_2007_UI=&amp;quot;No&amp;quot; INSTALL_SERIALNUM=&amp;quot;1234&amp;quot; COMMONDOCUMENTS=&amp;quot;C:\CommonDocuments\&amp;quot; TARGETDIR=&amp;quot;C:\Program Files (x86)\Infragistics\&amp;quot; ALLUSERS=&amp;quot;1&amp;quot; DOTNETV4=&amp;quot;1&amp;quot; IGSHORTCUTDIR=&amp;quot;C:\Users\voloda\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Infragistics\&amp;quot; INSTALLDIR.B2768727_084D_4283_A045_7A86BAF639DC=&amp;quot;C:\Windows\SysWOW64\GAC\&amp;quot; INSTALLDIR.4ED14E0A_AECA_4FCD_BEF6_35F299C4270E=&amp;quot;C:\Windows\SysWOW64\UltimateKeys\&amp;quot; _INSTALL_PROD_CODE=&amp;quot;48&amp;quot; INSTALLDIR.D348289C_580E_44C6_A617_A90FC315DB7D=&amp;quot;C:\Windows\SysWOW64\UltimateKeys\&amp;quot; INSTALLDIR.52DB8F59_5C03_491A_99D2_1A0565A67FD2=&amp;quot;C:\Windows\SysWOW64\UltimateKeys\&amp;quot; INSTALLDIR.96F9412E_4A28_4BF2_B6B7_66F921C4BE3C=&amp;quot;C:\Windows\SysWOW64\UltimateKeys\&amp;quot; INSTALLDIR.7295D7F7_BBA6_41D4_8E45_780AD1F07B46=&amp;quot;C:\Windows\SysWOW64\UltimateKeys\&amp;quot; CURRENTDIRECTORY=&amp;quot;C:\Users\voloda\docker-tests\windows-nbo&amp;quot; CLIENTUILEVEL=&amp;quot;0&amp;quot; CLIENTPROCESS
MSI (s) (F0:94) [20:16:29:547]: Running installation inside multi-package transaction C:\Users\voloda\docker-tests\windows-nbo\NetAdvantage_WinForms_20112.msi
MSI (s) (F0:94) [20:16:29:547]: Grabbed execution mutex.
MSI (s) (F0:C8) [20:16:29:579]: Resetting cached policy values
MSI (s) (F0:C8) [20:16:29:579]: Machine policy value &#39;Debug&#39; is 0
MSI (s) (F0:C8) [20:16:29:579]: ******* RunEngine:
           ******* Product: C:\Users\voloda\docker-tests\windows-nbo\NetAdvantage_WinForms_20112.msi
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Keep in mind that for example passwords, serial numbers etc. might be in the log
masked so you need to be a bit inventive to find all important values.&lt;/p&gt;

&lt;p&gt;General suggestion for MSI is that any properties which have upper-case names
should be available on command line.&lt;/p&gt;

&lt;p&gt;MSI properties seems to be specified here:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;MSI (c) (A4:F0) [20:16:29:535]: Switching to server: COMMON_DOCUMENTS_LOC=&amp;quot;C:\Users\Public\Documents&amp;quot; USER_DOCUMENTS_LOC=&amp;quot;C:\Users\voloda\Documents&amp;quot; INSTALLDIR=&amp;quot;C:\Program Files (x86)\Infragistics\&amp;quot; AGREE_AND_INSTALL_OFFICE_2007_UI=&amp;quot;No&amp;quot; INSTALL_SERIALNUM=&amp;quot;1234&amp;quot; COMMONDOCUMENTS=&amp;quot;C:\CommonDocuments\&amp;quot; TARGETDIR=&amp;quot;C:\Program Files (x86)\Infragistics\&amp;quot; ALLUSERS=&amp;quot;1&amp;quot; DOTNETV4=&amp;quot;1&amp;quot; IGSHORTCUTDIR=&amp;quot;C:\Users\voloda\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Infragistics\&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For Infragistic and my build agent I am interested in following entries:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;INSTALL_SERIALNUM&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;AGREE_AND_INSTALL_OFFICE_2007_UI&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;use-orca-editor&#34;&gt;Use Orca editor&lt;/h2&gt;

&lt;p&gt;Microsoft provides as a part of MSI SDK &lt;code&gt;Orca.exe&lt;/code&gt; which allows to edit MSI database.&lt;/p&gt;

&lt;p&gt;Following the above rule about upper-case names you can find properties which
can be specified on command line.&lt;/p&gt;

&lt;p&gt;This can be actually easier but requires MSI SDK with &lt;code&gt;Orca.exe&lt;/code&gt; installed.&lt;/p&gt;

&lt;h1 id=&#34;dockerfile&#34;&gt;Dockerfile&lt;/h1&gt;

&lt;p&gt;Once we know parameters we can just update the &lt;code&gt;Dockerfile&lt;/code&gt; so it copies SDK
to the image and then executes unattended installation the SDK including the
license (or whatever details you need).&lt;/p&gt;

&lt;p&gt;In this case we specify the license number (&lt;code&gt;INSTALL_SERIALNUM=1234&lt;/code&gt;) and
bunch of other properties.&lt;/p&gt;

&lt;p&gt;The example below ensures that during building the image we wait until the
installation process finishes.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-dockerfile&#34; data-lang=&#34;dockerfile&#34;&gt;COPY NetAdvantage_WinForms_20112.msi &lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;C:\\&amp;#34;&lt;/span&gt;&lt;span style=&#34;&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;RUN&lt;/span&gt; $ErrorActionPreference = &lt;span style=&#34;color:#a31515&#34;&gt;&amp;#39;Stop&amp;#39;&lt;/span&gt;; &lt;span style=&#34;color:#a31515&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#a31515&#34;&gt;&lt;/span&gt;    $VerbosePreference = &lt;span style=&#34;color:#a31515&#34;&gt;&amp;#39;Continue&amp;#39;&lt;/span&gt;; &lt;span style=&#34;color:#a31515&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#a31515&#34;&gt;&lt;/span&gt;    Start-Process -Wait -PassThru -FilePath c:&lt;span style=&#34;color:#a31515&#34;&gt;\w&lt;/span&gt;indows&lt;span style=&#34;color:#a31515&#34;&gt;\s&lt;/span&gt;ystem32&lt;span style=&#34;color:#a31515&#34;&gt;\m&lt;/span&gt;siexec.exe -ArgumentList &lt;span style=&#34;color:#a31515&#34;&gt;&amp;#39;/i c:\\NetAdvantage_WinForms_20112.msi  /q /l* c:\\infragistic.log INSTALL_SERIALNUM=1234 ALLUSERS=1 AGREE_AND_INSTALL_OFFICE_2007_UI=No&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Is it good idea to throw an exception in .NET C# constructor?</title>
      <link>http://voloda.bazilisek.net/2017/12/is-it-good-idea-to-throw-an-exception-in-dotnet-csharp-constructor/</link>
      <pubDate>Mon, 11 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>http://voloda.bazilisek.net/2017/12/is-it-good-idea-to-throw-an-exception-in-dotnet-csharp-constructor/</guid>
      <description>

&lt;p&gt;I got reminded recently about two cases why it may be actually a bad idea to
do a complex initialization in a class constructor in C#.&lt;/p&gt;

&lt;p&gt;All the code samples below are written just for the purpose of this post but
are based on real code I either written or came across at some point.&lt;/p&gt;

&lt;h1 id=&#34;case-1-instance-resolved-via-an-ioc-container&#34;&gt;Case 1 - instance resolved via an IoC container&lt;/h1&gt;

&lt;p&gt;Recently I was facing an issue that application started but remained non-functional.&lt;/p&gt;

&lt;p&gt;I quickly found following stack trace in the log file.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Unity.Exceptions.ResolutionFailedException: Resolution of the dependency failed, type = &#39;IMyDataReader&#39;, name = &#39;(none)&#39;.
Exception occurred while: Calling constructor MyDataReader().
Exception is: AggregateException - One or more errors occurred.
-----------------------------------------------
At the time of the exception, the container was:
  Resolving MyDataReader,(none) (mapped from IMyDataReader, (none))
  Calling constructor MyDataReader()
 ---&amp;gt; System.AggregateException: One or more errors occurred. ---&amp;gt; System.Net.Http.HttpRequestException: An error occurred while sending the request. ---&amp;gt; System.Net.WebException: Unable to connect to the remote server ---&amp;gt; System.Net.Sockets.SocketException: No connection could be made because the target machine actively refused it 127.0.0.1:1234
   at System.Net.Sockets.Socket.EndConnect(IAsyncResult asyncResult)
   at System.Net.ServicePoint.ConnectSocketInternal(Boolean connectFailure, Socket s4, Socket s6, Socket&amp;amp; socket, IPAddress&amp;amp; address, ConnectSocketState state, IAsyncResult asyncResult, Exception&amp;amp; exception)
   --- End of inner exception stack trace ---
   at System.Net.HttpWebRequest.EndGetResponse(IAsyncResult asyncResult)
   at System.Net.Http.HttpClientHandler.GetResponseCallback(IAsyncResult ar)
   --- End of inner exception stack trace ---
   --- End of inner exception stack trace ---
   at System.Threading.Tasks.Task`1.GetResultCore(Boolean waitCompletionNotification)
   at MyDataReader..ctor() in C:\Users\vladi\Documents\code\UnityInitializer\UnityInitializer.Tests\RootContainerSetupTest.cs:line 117
   at lambda_method(Closure , IBuilderContext )
   at Unity.ObjectBuilder.BuildPlan.DynamicMethod.DynamicBuildPlanGenerationContext.&amp;lt;&amp;gt;c__DisplayClass16_0.&amp;lt;GetBuildMethod&amp;gt;b__0(IBuilderContext context) in C:\projects\unity\Container\src\ObjectBuilder\BuildPlan\DynamicMethod\DynamicBuildPlanGenerationContext.cs:line 134
   at Unity.ObjectBuilder.Strategies.BuildPlanStrategy.PreBuildUp(IBuilderContext context) in C:\projects\unity\Container\src\ObjectBuilder\Strategies\BuildPlanStrategy.cs:line 36
   at Unity.Container.StrategyChain.BuildUp(IBuilderContext builderContext) in C:\projects\unity\Container\src\Container\StrategyChain.cs:line 54
   at Unity.Policy.BuildPlanPolicyExtensions.ExecuteBuildUp(IBuildPlanPolicy policy, IBuilderContext context) in C:\projects\unity\Abstractions\src\Policy\IBuildPlanPolicy.cs:line 36
   at Unity.UnityContainer.BuildUp(Type typeToBuild, Object existing, String name, ResolverOverride[] resolverOverrides) in C:\projects\unity\Container\src\UnityContainer.cs:line 203
   --- End of inner exception stack trace ---
   at Unity.UnityContainer.BuildUp(Type typeToBuild, Object existing, String name, ResolverOverride[] resolverOverrides) in C:\projects\unity\Container\src\UnityContainer.cs:line 215
   at Unity.UnityContainer.Resolve(Type type, String name, ResolverOverride[] resolverOverrides) in C:\projects\unity\Container\src\UnityContainer.cs:line 163
   at Unity.UnityContainerExtensions.Resolve[T](IUnityContainer container, ResolverOverride[] overrides) in C:\projects\unity\Abstractions\src\Utility\UnityContainerExtensions.cs:line 469
   at T.TT() in C:\Users\vladi\Documents\code\UnityInitializer\UnityInitializer.Tests\RootContainerSetupTest.cs:line 97
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see - the log is pretty cryptic. The source in the end led to
following piece of code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#00f&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#2b91af&#34;&gt;MyDataReader&lt;/span&gt; : IMyDataReader
{
    &lt;span style=&#34;color:#2b91af&#34;&gt;string&lt;/span&gt; _name;
    &lt;span style=&#34;color:#00f&#34;&gt;public&lt;/span&gt; MyDataReader()
    {
        &lt;span style=&#34;color:#2b91af&#34;&gt;var&lt;/span&gt; http = &lt;span style=&#34;color:#00f&#34;&gt;new&lt;/span&gt; HttpClient();
        _name = http.GetStringAsync(&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;http://localhost:1234&amp;#34;&lt;/span&gt;).Result;
    }

    &lt;span style=&#34;color:#00f&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#2b91af&#34;&gt;string&lt;/span&gt; Name { &lt;span style=&#34;color:#00f&#34;&gt;get&lt;/span&gt; { &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; _name; } }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The above idea is pretty clear - load the data from local data service and since
those cannot change just cache them.&lt;/p&gt;

&lt;p&gt;The assumption was that the service is always running (this was, due to the
design, actually a good one - my system just didn&amp;rsquo;t have expected setup yet).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;So what is wrong here?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Well - in this particular case the bad part actually was that the class was registered
in Microsoft Unity IoC container.&lt;/p&gt;

&lt;p&gt;As result upon an instance resolution which is the action running the constructor,
the actual place which throws the exception gets quite hidden and non-obvious
since container doesn&amp;rsquo;t know why the class couldn&amp;rsquo;t be constructed.&lt;/p&gt;

&lt;p&gt;Ultimately the support doesn&amp;rsquo;t have basically any chances to find out the issue
and fix it (which may be just starting the missing service).&lt;/p&gt;

&lt;h2 id=&#34;solution&#34;&gt;Solution&lt;/h2&gt;

&lt;p&gt;In this particular case pretty simple - leave the class initialize and lazy
load the actual data later like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#00f&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#2b91af&#34;&gt;MyDataReader&lt;/span&gt; : IMyDataReader
{
    Lazy&amp;lt;&lt;span style=&#34;color:#2b91af&#34;&gt;string&lt;/span&gt;&amp;gt; _name;
    &lt;span style=&#34;color:#00f&#34;&gt;public&lt;/span&gt; MyDataReader()
    {
        _name = &lt;span style=&#34;color:#00f&#34;&gt;new&lt;/span&gt; Lazy&amp;lt;&lt;span style=&#34;color:#2b91af&#34;&gt;string&lt;/span&gt;&amp;gt;(() =&amp;gt;
        {
            &lt;span style=&#34;color:#2b91af&#34;&gt;var&lt;/span&gt; http = &lt;span style=&#34;color:#00f&#34;&gt;new&lt;/span&gt; HttpClient();
            &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; http.GetStringAsync(&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;http://localhost:1234&amp;#34;&lt;/span&gt;).Result;
        });
    }

    &lt;span style=&#34;color:#00f&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#2b91af&#34;&gt;string&lt;/span&gt; Name { &lt;span style=&#34;color:#00f&#34;&gt;get&lt;/span&gt; { &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; _name.Value; } }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Which leads to much more readable log - and more importantly - &lt;strong&gt;the beginning
of the message points quickly to actual issue&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;System.AggregateException: One or more errors occurred. ---&amp;gt; System.Net.Http.HttpRequestException: An error occurred while sending the request. ---&amp;gt; System.Net.WebException: Unable to connect to the remote server ---&amp;gt; System.Net.Sockets.SocketException: No connection could be made because the target machine actively refused it 127.0.0.1:1234
   at System.Net.Sockets.Socket.EndConnect(IAsyncResult asyncResult)
   at System.Net.ServicePoint.ConnectSocketInternal(Boolean connectFailure, Socket s4, Socket s6, Socket&amp;amp; socket, IPAddress&amp;amp; address, ConnectSocketState state, IAsyncResult asyncResult, Exception&amp;amp; exception)
   --- End of inner exception stack trace ---
   at System.Net.HttpWebRequest.EndGetResponse(IAsyncResult asyncResult)
   at System.Net.Http.HttpClientHandler.GetResponseCallback(IAsyncResult ar)
   --- End of inner exception stack trace ---
   --- End of inner exception stack trace ---
   at System.Threading.Tasks.Task`1.GetResultCore(Boolean waitCompletionNotification)
   at MyDataReader.&amp;lt;&amp;gt;c.&amp;lt;.ctor&amp;gt;b__1_0() in C:\Users\vladi\Documents\code\UnityInitializer\UnityInitializer.Tests\RootContainerSetupTest.cs:line 119
   at System.Lazy`1.CreateValue()
   at System.Lazy`1.LazyInitValue()
   at MyDataReader.get_Name() in C:\Users\vladi\Documents\code\UnityInitializer\UnityInitializer.Tests\RootContainerSetupTest.cs:line 123
   at T.TT() in C:\Users\vladi\Documents\code\UnityInitializer\UnityInitializer.Tests\RootContainerSetupTest.cs:line 97
---&amp;gt; (Inner Exception #0) System.Net.Http.HttpRequestException: An error occurred while sending the request. ---&amp;gt; System.Net.WebException: Unable to connect to the remote server ---&amp;gt; System.Net.Sockets.SocketException: No connection could be made because the target machine actively refused it 127.0.0.1:1234
   at System.Net.Sockets.Socket.EndConnect(IAsyncResult asyncResult)
   at System.Net.ServicePoint.ConnectSocketInternal(Boolean connectFailure, Socket s4, Socket s6, Socket&amp;amp; socket, IPAddress&amp;amp; address, ConnectSocketState state, IAsyncResult asyncResult, Exception&amp;amp; exception)
   --- End of inner exception stack trace ---
   at System.Net.HttpWebRequest.EndGetResponse(IAsyncResult asyncResult)
   at System.Net.Http.HttpClientHandler.GetResponseCallback(IAsyncResult ar)
   --- End of inner exception stack trace ---&amp;lt;---/
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;case-2-working-with-unmanaged-resources&#34;&gt;Case 2 - working with unmanaged resources&lt;/h1&gt;

&lt;p&gt;There is one more interesting scenario to be considered - initializing
unmanaged/disposable resources within the class constructor.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#00f&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; Main()
{
    &lt;span style=&#34;color:#00f&#34;&gt;try&lt;/span&gt;
    {
        &lt;span style=&#34;color:#00f&#34;&gt;using&lt;/span&gt; (&lt;span style=&#34;color:#2b91af&#34;&gt;var&lt;/span&gt; r = &lt;span style=&#34;color:#00f&#34;&gt;new&lt;/span&gt; FReader())
        {

        }
    }
    &lt;span style=&#34;color:#00f&#34;&gt;catch&lt;/span&gt; (Exception ex)
    {
        Console.WriteLine(ex);
    }

    &lt;span style=&#34;color:#00f&#34;&gt;try&lt;/span&gt;
    {
        &lt;span style=&#34;color:#00f&#34;&gt;using&lt;/span&gt; (&lt;span style=&#34;color:#2b91af&#34;&gt;var&lt;/span&gt; r = &lt;span style=&#34;color:#00f&#34;&gt;new&lt;/span&gt; FReader())
        {

        }
    }
    &lt;span style=&#34;color:#00f&#34;&gt;catch&lt;/span&gt; (Exception ex)
    {
        Console.WriteLine(ex);
    }
}

&lt;span style=&#34;color:#00f&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#2b91af&#34;&gt;FReader&lt;/span&gt; : IDisposable
{
    &lt;span style=&#34;color:#00f&#34;&gt;private&lt;/span&gt; Stream _input;

    &lt;span style=&#34;color:#00f&#34;&gt;public&lt;/span&gt; FReader()
    {
        _input = File.Open(&lt;span style=&#34;color:#a31515&#34;&gt;@&amp;#34;C:\windows-version.txt&amp;#34;&lt;/span&gt;, FileMode.Open, FileAccess.Read, FileShare.None);

        &lt;span style=&#34;color:#2b91af&#34;&gt;var&lt;/span&gt; content = _input.ReadByte();

        &lt;span style=&#34;color:#00f&#34;&gt;switch&lt;/span&gt; (content)
        {
            &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#a31515&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;:
            &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#a31515&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;:
                &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;
            &lt;span style=&#34;color:#00f&#34;&gt;default&lt;/span&gt;:
                &lt;span style=&#34;color:#00f&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;new&lt;/span&gt; InvalidOperationException(&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;Unexpected input&amp;#34;&lt;/span&gt;);
        }
    }

    &lt;span style=&#34;color:#00f&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; Dispose()
    {
        _input.Dispose();
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The class seems to be pretty robust, right? It disposes the file properly so
behaves nicely.&lt;/p&gt;

&lt;p&gt;Nothing wrong, at least for the first look.&lt;/p&gt;

&lt;p&gt;But let&amp;rsquo;s look into exceptions being thrown.&lt;/p&gt;

&lt;h2 id=&#34;first-instantiation&#34;&gt;First instantiation&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;System.InvalidOperationException: Unexpected input
   at X.FReader..ctor() in C:\Users\vladi\Documents\code\UnityInitializer\UnityInitializer.Tests\RootContainerSetupTest.cs:line 176
   at X.Main() in C:\Users\vladi\Documents\code\UnityInitializer\UnityInitializer.Tests\RootContainerSetupTest.cs:line 135
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;second-instantiation&#34;&gt;Second instantiation&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;System.IO.IOException: The process cannot access the file &#39;C:\windows-version.txt&#39; because it is being used by another process.
   at System.IO.__Error.WinIOError(Int32 errorCode, String maybeFullPath)
   at System.IO.FileStream.Init(String path, FileMode mode, FileAccess access, Int32 rights, Boolean useRights, FileShare share, Int32 bufferSize, FileOptions options, SECURITY_ATTRIBUTES secAttrs, String msgPath, Boolean bFromProxy, Boolean useLongPath, Boolean checkHost)
   at System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share)
   at System.IO.File.Open(String path, FileMode mode, FileAccess access, FileShare share)
   at X.FReader..ctor() in C:\Users\vladi\Documents\code\UnityInitializer\UnityInitializer.Tests\RootContainerSetupTest.cs:line 164
   at X.Main() in C:\Users\vladi\Documents\code\UnityInitializer\UnityInitializer.Tests\RootContainerSetupTest.cs:line 147
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see for the second case - the file is still locked! So it didn&amp;rsquo;t dispose.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;So what is wrong here?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In the constructor there is an assumption that the file must have a certain structure.&lt;/p&gt;

&lt;p&gt;But what if the file is invalid?&lt;/p&gt;

&lt;p&gt;It will throw an exception in constructor. Hmm - still good?&lt;/p&gt;

&lt;p&gt;It depends!&lt;/p&gt;

&lt;p&gt;As the exception is thrown - the above level assignment within the &lt;code&gt;using&lt;/code&gt;
statement will never happen here.&lt;/p&gt;

&lt;p&gt;As result - the &lt;code&gt;Dispose()&lt;/code&gt; method will never be called.&lt;/p&gt;

&lt;p&gt;Which means that the resource (in our case file) remains active. The above is
not actually 100% correct all the time.&lt;/p&gt;

&lt;p&gt;Depending on the resource type (for example some unmanaged resource with
finalizer) - you may observe that the resource got at some point cleaned up
during garbage collection.&lt;/p&gt;

&lt;h2 id=&#34;solution-1&#34;&gt;Solution&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;You may consider something like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#00f&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#2b91af&#34;&gt;FReader&lt;/span&gt; : IDisposable
{
   &lt;span style=&#34;color:#00f&#34;&gt;private&lt;/span&gt; Stream _input;

   &lt;span style=&#34;color:#00f&#34;&gt;public&lt;/span&gt; FReader()
   {
       _input = File.Open(&lt;span style=&#34;color:#a31515&#34;&gt;@&amp;#34;C:\windows-version.txt&amp;#34;&lt;/span&gt;, FileMode.Open, FileAccess.Read, FileShare.None);

       &lt;span style=&#34;color:#00f&#34;&gt;try&lt;/span&gt;
       {
           &lt;span style=&#34;color:#2b91af&#34;&gt;var&lt;/span&gt; content = _input.ReadByte();

           &lt;span style=&#34;color:#00f&#34;&gt;switch&lt;/span&gt; (content)
           {
               &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#a31515&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;:
               &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#a31515&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;:
                   &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;
               &lt;span style=&#34;color:#00f&#34;&gt;default&lt;/span&gt;:
                   &lt;span style=&#34;color:#00f&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;new&lt;/span&gt; InvalidOperationException(&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;Unexpected input&amp;#34;&lt;/span&gt;);
           }
       }
       &lt;span style=&#34;color:#00f&#34;&gt;catch&lt;/span&gt; (Exception ex)
       {
           _input.Dispose();
           _input = &lt;span style=&#34;color:#00f&#34;&gt;null&lt;/span&gt;;
       }
   }

   &lt;span style=&#34;color:#00f&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; Dispose()
   {
       _input.Dispose();
   }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But you will probably very quickly realize that with slightly more complex
initialization this will become nightmare.
Also - the object will not be actually properly constructed.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Much easier will actually be avoiding such stuff in constructor and leave
it for later - similar to the first case.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;Always keep in mind what the impact of complex logic within constructor might
be.&lt;/p&gt;

&lt;p&gt;You may shoot yourself and observe really weird non-deterministic issues or
repeating support cases because of unreadable log files.&lt;/p&gt;

&lt;p&gt;For me personally - avoiding the complex logic during the object construction is the
preferred way of coding.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Handling detailed code reviews in GIT</title>
      <link>http://voloda.bazilisek.net/2017/11/handling-detailed-code-reviews-in-git/</link>
      <pubDate>Thu, 23 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>http://voloda.bazilisek.net/2017/11/handling-detailed-code-reviews-in-git/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;Pull Requests are sometimes not sufficient - they allow to see changes,
perhaps you can even see that a test build passed but these do not allow
for actual functional testing or even navigating thru the code.&lt;/li&gt;
&lt;li&gt;Some times it is convenient to see all the changes in staging area
(similar to TFS unshelve functionality) so functional test can be done
and code can be reviewed more deeply.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Below steps allow to achieve the same state as for TFS unshelve - you end-up
with code checked out and staged in GIT:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Fetch remote changes

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git fetch origin&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Checkout target branch

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git checkout TargetBranchName&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Do dry merge (without commit)

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git merge --no-commit --no-ff origin/ReviewedBranchName&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now you can do the detailed code review, put comments into PR, do testing,
navigate thru references usign Resharper in Visual Studio etc.&lt;/p&gt;

&lt;p&gt;Once done just abort the merge:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git merge --abort&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Jenkinsfile and git authentication on Windows</title>
      <link>http://voloda.bazilisek.net/2017/11/jenkinsfile-and-git-authentication-on-windows/</link>
      <pubDate>Mon, 20 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>http://voloda.bazilisek.net/2017/11/jenkinsfile-and-git-authentication-on-windows/</guid>
      <description>

&lt;p&gt;In this post are my notes on how to get working &lt;code&gt;git&lt;/code&gt; commands from &lt;code&gt;Jenkinsfile&lt;/code&gt;
running on Windows build agents.&lt;/p&gt;

&lt;h1 id=&#34;password-authentication&#34;&gt;Password authentication&lt;/h1&gt;

&lt;h2 id=&#34;setting-up-username-and-password-in-jenkins-server&#34;&gt;Setting up username and password in Jenkins server&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;First in Jenkins server add a new &lt;code&gt;Credentials&lt;/code&gt; entry of type &lt;code&gt;Username with password&lt;/code&gt;:
&lt;img src=&#34;http://voloda.bazilisek.net/img/jenkins/jenkins_username_and_password.png&#34; alt=&#34;Jenkins username and password&#34; /&gt;.&lt;/li&gt;
&lt;li&gt;Set ID to &lt;code&gt;repo_auth&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;This is later referenced in &lt;code&gt;Jenkinsfile&lt;/code&gt; step &lt;code&gt;withCredentials&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Set &lt;code&gt;Username&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Set &lt;code&gt;Password&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;sample-jenkinsfile&#34;&gt;Sample Jenkinsfile&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Now the system is ready to use above information from &lt;code&gt;Jenkinsfile&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Build script then does following:

&lt;ol&gt;
&lt;li&gt;Fetches username and password into environment variables&lt;/li&gt;
&lt;li&gt;Invokes any &lt;code&gt;git&lt;/code&gt; command which requires authentication&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;pipeline {
  agent { label &#39;vs2017&#39; }

  environment {
    RELEASE_NUMBER = &#39;1.0&#39;
    VERSION_NUMBER = VersionNumber(versionNumberString: &#39;1.0.${BUILDS_ALL_TIME}.0&#39;)
  }

  stages {
    stage(&#39;Compile&#39;){
      steps {
        echo &#39;Compiling&#39;

        bat &amp;quot;\&amp;quot;${tool name: &#39;Default&#39;, type: &#39;msbuild&#39;}\\msbuild.exe\&amp;quot; \&amp;quot;build.msbuild\&amp;quot; /p:BuildNumber=${VERSION_NUMBER}&amp;quot;
      }
    }
    stage(&#39;Tagging&#39;) {
      steps {
        withCredentials([usernamePassword(credentialsId: &#39;repo_auth&#39;, passwordVariable: &#39;GIT_PASSWORD&#39;, usernameVariable: &#39;GIT_USERNAME&#39;)]) {
          bat &amp;quot;git tag &#39;build-${VERSION_NUMBER}&#39;&amp;quot;
          bat &amp;quot;git push http://${GIT_USERNAME}:${GIT_PASSWORD}@repourl.com/test.git --tags&amp;quot;
        }
      }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;ssh-key-authentication-github&#34;&gt;SSH key authentication (Github)&lt;/h1&gt;

&lt;h2 id=&#34;setting-up-known-hosts-in-jenkins-server&#34;&gt;Setting up known hosts in Jenkins server&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;First in Jenkins server add a new &lt;code&gt;Credentials&lt;/code&gt; entry of type &lt;code&gt;Secret text&lt;/code&gt;
&lt;img src=&#34;http://voloda.bazilisek.net/img/jenkins/jenkins_ssh_known_hosts.png&#34; alt=&#34;Jenkins SSH known hosts&#34; /&gt;.&lt;/li&gt;
&lt;li&gt;Set ID to &lt;code&gt;github-knownhosts&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;This is later referenced in &lt;code&gt;Jenkinsfile&lt;/code&gt; step &lt;code&gt;withCredentials&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Set the content of &lt;code&gt;known_hosts&lt;/code&gt; file as value&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;setting-up-the-ssh-key-in-jenkins-server&#34;&gt;Setting up the SSH key in Jenkins server&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Now in Jenkins server add a new &lt;code&gt;Credentials&lt;/code&gt; entry of type &lt;code&gt;SSH Username with private key&lt;/code&gt;
&lt;img src=&#34;http://voloda.bazilisek.net/img/jenkins/jenkins_ssh_key.png&#34; alt=&#34;Jenkins SSH username with private key&#34; /&gt;.&lt;/li&gt;
&lt;li&gt;Set ID to &lt;code&gt;github&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;This is later referenced in &lt;code&gt;Jenkinsfile&lt;/code&gt; step &lt;code&gt;withCredentials&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;sample-jenkinsfile-1&#34;&gt;Sample Jenkinsfile&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Now the system is ready to use above information from &lt;code&gt;Jenkinsfile&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Build script then does following (I am using these from docker build agents
so the build agent always starts from scratch):

&lt;ol&gt;
&lt;li&gt;Populates &lt;code&gt;id_rsa&lt;/code&gt; key with received keyFileVariable&lt;/li&gt;
&lt;li&gt;Populates &lt;code&gt;known_hosts&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Invokes any &lt;code&gt;git&lt;/code&gt; command which requires authentication&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;pipeline {
  agent {label &#39;machine&#39;}

  environment {
    RELEASE_NUMBER = &#39;1.0&#39;
    VERSION_NUMBER = VersionNumber(versionNumberString: &#39;1.0.${BUILDS_ALL_TIME}.0&#39;)
  }

  stages {
    stage(&#39;Build&#39;) {
      steps {
        bat &amp;quot;powershell.exe -NonInteractive -ExecutionPolicy Bypass -Command \&amp;quot;\$ErrorActionPreference=&#39;Stop&#39;;[Console]::OutputEncoding=[System.Text.Encoding]::UTF8;.\\build.ps1;EXIT \$global:LastExitCode\&amp;quot;&amp;quot;
      }
    }
    stage(&#39;Publish on Github&#39;) {
      steps {
        withCredentials([
          string(credentialsId: &#39;github-knownhosts&#39;, variable: &#39;KNOWN_HOSTS&#39;),
          sshUserPrivateKey(credentialsId: &#39;github&#39;, keyFileVariable: &#39;RSA_KEY&#39;, usernameVariable: &#39;SSH_USER&#39;)
        ]) {
          bat &amp;quot;mkdir ${USERPROFILE}\\.ssh&amp;quot;
          bat &amp;quot;copy ${RSA_KEY} ${USERPROFILE}\\.ssh\\id_rsa&amp;quot;
          bat &amp;quot;echo ${KNOWN_HOSTS} &amp;gt; ${USERPROFILE}\\.ssh\\known_hosts&amp;quot;

          bat &amp;quot;git tag &#39;build-${VERSION_NUMBER}&#39;&amp;quot;
          bat &amp;quot;git push ${SSH_USER}@github.com:/project/repo.git --tags&amp;quot;
        }
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Jenkins Docker Slave Windows Build Agent</title>
      <link>http://voloda.bazilisek.net/2017/11/jenkins-docker-slave-windows-build-agent/</link>
      <pubDate>Sun, 19 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>http://voloda.bazilisek.net/2017/11/jenkins-docker-slave-windows-build-agent/</guid>
      <description>

&lt;p&gt;I spent quite some time on getting this working on Windows with Windows Docker
slaves.&lt;/p&gt;

&lt;p&gt;In the end it turned out to be mostly matter of using correct Jenkins docker
plugin.&lt;/p&gt;

&lt;h1 id=&#34;jenkins-docker-slave&#34;&gt;Jenkins docker slave&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Use &lt;code&gt;Yet Another Docker Plugin&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;With this plugin it just works (Docker Plugin doesn&amp;rsquo;t work)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Install JAVA into docker image and make it available on PATH&lt;/li&gt;
&lt;li&gt;In Configuration add &lt;code&gt;Yet Another Docker Plugin&lt;/code&gt; as a &lt;code&gt;Cloud&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;Point it to &lt;code&gt;Docker server&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Test that it is available&lt;/li&gt;
&lt;li&gt;Add the docker image&lt;/li&gt;
&lt;li&gt;Add label which can be references from builds&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Jenkins now automatically creates a docker container as a build is executed

&lt;ul&gt;
&lt;li&gt;It does not require any additional changes&lt;/li&gt;
&lt;li&gt;It properly handles the operating system (Windows)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;For local only images make sure that the &lt;code&gt;Pull&lt;/code&gt; option is set to &lt;code&gt;Never&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;base-dockerfile&#34;&gt;Base Dockerfile&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;This &lt;code&gt;Dockerfile&lt;/code&gt; creates the base image for Windows build agent&lt;/li&gt;
&lt;li&gt;The only requirements is that &lt;code&gt;java.exe&lt;/code&gt; must be accessible in path.

&lt;ul&gt;
&lt;li&gt;It could be perhaps even installed using &lt;code&gt;Chocolatey&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;FROM microsoft/windowsservercore

SHELL [&amp;quot;powershell.exe&amp;quot;, &amp;quot;-ExecutionPolicy&amp;quot;, &amp;quot;Bypass&amp;quot;, &amp;quot;-Command&amp;quot;]

RUN iex ((New-Object System.Net.WebClient).DownloadString(&#39;https://chocolatey.org/install.ps1&#39;))
RUN choco install -y git --params=&#39;/NoShellIntegration&#39;
RUN choco install -y nuget.commandline

ENV JAVA_HOME c:\\jre1.8.0_91
ENV JENKINS_HOME c:\\jenkins

RUN (new-object System.Net.WebClient).Downloadfile(&#39;http://javadl.oracle.com/webapps/download/AutoDL?BundleId=210185&#39;, &#39;C:\jre-8u91-windows-x64.exe&#39;)
RUN start-process -filepath C:\\jre-8u91-windows-x64.exe -passthru -wait -argumentlist &amp;quot;/s,INSTALLDIR=$env:JAVA_HOME,/L,install64.log&amp;quot;
RUN del C:\jre-8u91-windows-x64.exe

RUN $env:PATH = $env:JAVA_HOME + &#39;\\bin;&#39; + $env:PATH; \
    [Environment]::SetEnvironmentVariable(&#39;PATH&#39;, $env:PATH, [EnvironmentVariableTarget]::Machine);

RUN mkdir $env:JENKINS_HOME
WORKDIR $JENKINS_HOME

ENTRYPOINT [&amp;quot;cmd.exe&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;visual-studio-2017-dockerfile&#34;&gt;Visual Studio 2017 Dockerfile&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;This &lt;code&gt;Dockerfile&lt;/code&gt; uses the above as the base image and installs VS 2017

&lt;ul&gt;
&lt;li&gt;It add SDK for .NET 4.5.2 and 4.6.1&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;FROM vkloz/winjava

SHELL [&amp;quot;powershell.exe&amp;quot;, &amp;quot;-ExecutionPolicy&amp;quot;, &amp;quot;Bypass&amp;quot;, &amp;quot;-Command&amp;quot;]

ENV TEST_CONTAINER=1 \
    VS_CHANNEL_URI=https://aka.ms/vs/15/release/799c44140/channel \
    VS_BUILDTOOLS_URI=https://aka.ms/vs/15/release/799c44140/vs_buildtools.exe \
    VS_BUILDTOOLS_SHA256=FA29EB83297AECADB0C4CD41E54512C953164E64EEDD9FB9D3BF9BD70C9A2D29

# Download log collection utility
RUN $ErrorActionPreference = &#39;Stop&#39;; \
    $ProgressPreference = &#39;SilentlyContinue&#39;; \
    $VerbosePreference = &#39;Continue&#39;; \
    Invoke-WebRequest -Uri https://aka.ms/vscollect.exe -OutFile C:\collect.exe

# Download vs_buildtools.exe
RUN $ErrorActionPreference = &#39;Stop&#39;; \
    $ProgressPreference = &#39;SilentlyContinue&#39;; \
    $VerbosePreference = &#39;Continue&#39;; \
    Invoke-WebRequest -Uri $env:VS_BUILDTOOLS_URI -OutFile C:\vs_buildtools.exe; \
    if ((Get-FileHash -Path C:\vs_buildtools.exe -Algorithm SHA256).Hash -ne $env:VS_BUILDTOOLS_SHA256) { throw &#39;Download hash does not match&#39; }

# https://docs.microsoft.com/en-us/visualstudio/install/workload-component-id-vs-build-tools
# Install Visual Studio Build Tools
RUN $ErrorActionPreference = &#39;Stop&#39;; \
    $VerbosePreference = &#39;Continue&#39;; \
    $p = Start-Process -Wait -PassThru -FilePath C:\vs_buildtools.exe -ArgumentList &#39;--quiet --nocache --wait --installPath C:\BuildTools&#39;; \
    if ($ret = $p.ExitCode) { c:\collect.exe; throw (&#39;Install failed with exit code 0x{0:x}&#39; -f $ret) }

RUN $ErrorActionPreference = &#39;Stop&#39;; \
    $VerbosePreference = &#39;Continue&#39;; \
    $p = Start-Process -Wait -PassThru -FilePath C:\vs_buildtools.exe -ArgumentList &#39;modify --quiet --nocache --wait --installPath C:\BuildTools --add Microsoft.VisualStudio.Workload.MSBuildTools&#39;; \
    if ($ret = $p.ExitCode) { c:\collect.exe; throw (&#39;Install failed with exit code 0x{0:x}&#39; -f $ret) }

RUN $ErrorActionPreference = &#39;Stop&#39;; \
    $VerbosePreference = &#39;Continue&#39;; \
    $p = Start-Process -Wait -PassThru -FilePath C:\vs_buildtools.exe -ArgumentList &#39;modify --quiet --nocache --wait --installPath C:\BuildTools --add Microsoft.VisualStudio.Component.Static.Analysis.Tools&#39;; \
    if ($ret = $p.ExitCode) { c:\collect.exe; throw (&#39;Install failed with exit code 0x{0:x}&#39; -f $ret) }

RUN choco install -y netfx-4.5.2-devpack
RUN choco install -y netfx-4.6.1-devpack


# Use shell form to start developer command prompt and any other commands specified
SHELL [&amp;quot;cmd.exe&amp;quot;, &amp;quot;/s&amp;quot;, &amp;quot;/c&amp;quot;]
ENTRYPOINT C:\BuildTools\Common7\Tools\VsDevCmd.bat &amp;amp;&amp;amp;

# Default to PowerShell console running within developer command prompt environment
CMD [&amp;quot;powershell.exe&amp;quot;, &amp;quot;-nologo&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Jenkins Server Setup On Windows</title>
      <link>http://voloda.bazilisek.net/2017/10/jenkins-server-setup-on-windows/</link>
      <pubDate>Tue, 17 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>http://voloda.bazilisek.net/2017/10/jenkins-server-setup-on-windows/</guid>
      <description>

&lt;h1 id=&#34;operating-system-preparation&#34;&gt;Operating system preparation&lt;/h1&gt;

&lt;p&gt;These notes assume since beginning separation of the &lt;strong&gt;Jenkins server&lt;/strong&gt; and
individual build agents so on the server will not be any build utilities
except &lt;strong&gt;git&lt;/strong&gt; which is necessary for repository polling.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Install &lt;strong&gt;Chocolatey&lt;/strong&gt; (see instructions on web).&lt;/li&gt;
&lt;li&gt;Install &lt;strong&gt;Google Chrome&lt;/strong&gt; (using Chocolatey is actually much easier than trying
to download it from web).

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;choco install -y googlechrome&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Install &lt;strong&gt;git&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;choco install -y git /NoShellIntegration&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;jenkins-server-setup&#34;&gt;Jenkins Server Setup&lt;/h1&gt;

&lt;p&gt;This is fairly simple:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;See &lt;a href=&#34;http://jenkinks.io/download&#34;&gt;http://jenkinks.io/download&lt;/a&gt; to get installation package.&lt;/li&gt;
&lt;li&gt;Open &lt;a href=&#34;http://localhost:8080/&#34;&gt;http://localhost:8080/&lt;/a&gt; in Chrome and follow instructions.&lt;/li&gt;
&lt;li&gt;Setup firewall rules to make the server accessible as needed.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;useful-plugins&#34;&gt;Useful plugins&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Yet Another Docker plugins

&lt;ul&gt;
&lt;li&gt;Automatic spawning of docker build agents based on label&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;NUnit plugin

&lt;ul&gt;
&lt;li&gt;Parsing of NUnit results&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Blue Ocean plugin

&lt;ul&gt;
&lt;li&gt;Newer Jenkins UI for build pipelines&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;MSBuild Plugin

&lt;ul&gt;
&lt;li&gt;Allows to configure MSBuild as a tool and reference it from scripts&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Role-based authorization strategy

&lt;ul&gt;
&lt;li&gt;Allows role based access Configuration&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;windows-slave-setup&#34;&gt;Windows Slave Setup&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Install Chocolatey (see instructions on web)&lt;/li&gt;
&lt;li&gt;Install Google Chrome

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;choco install -y googlechrome&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Install Java

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;choco install -y javaruntime&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Install git

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;choco install -y git /NoShellIntegration&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;VS2017 build Tools

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;choco install -y visualstudio2017buildtools&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Install Nuget

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;choco install -y nuget.commandline&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Installing packages after the service start may require service restart&lt;/li&gt;
&lt;li&gt;Login to &lt;strong&gt;Jenkins master&lt;/strong&gt; via Chrome&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Configure Global Security&lt;/code&gt; and setup &lt;code&gt;TCP port for JNLP agents&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Add new Node&lt;/li&gt;
&lt;li&gt;Download the java file and run it

&lt;ul&gt;
&lt;li&gt;In menu it allows to &lt;code&gt;Install Windows Service&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;This may need to change the Jenkins server URL in settings&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Setup labels to distribute load across nodes conditionally&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;links&#34;&gt;Links&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://chocolatey.org&#34;&gt;Chocolatey&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Chocolatey setup on DEV machine &#43; useful packages</title>
      <link>http://voloda.bazilisek.net/setup-on-dev-machine-and-useful-packages/</link>
      <pubDate>Wed, 04 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>http://voloda.bazilisek.net/setup-on-dev-machine-and-useful-packages/</guid>
      <description>

&lt;h2 id=&#34;upgrade-all-packages&#34;&gt;Upgrade all packages&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;choco outdated&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;List available upgrades&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cup all -y&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;list-local-packages&#34;&gt;List local Packages&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;chocolatey list -localonly&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;packages&#34;&gt;Packages&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;choco install -y git --params=&#39;/NoShellIntegration&#39;
choco install -y poshgit
choco install -y gittfs
choco install -y far
choco install -y atom
choco install -y chefdk
choco install -y winmerge
choco install -y googlechrome
choco install -y postman
choco install -y 7zip
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Cyclocomputer Garmin Edge 520 - experience</title>
      <link>http://voloda.bazilisek.net/2016/10/cyclocomputer-garmin-edge-520-experience/</link>
      <pubDate>Sun, 16 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>http://voloda.bazilisek.net/2016/10/cyclocomputer-garmin-edge-520-experience/</guid>
      <description>

&lt;p&gt;I bought Garmin Edge 520 couple weeks ago. There are quite a few reviews on internet so this is not intended to be a general review.&lt;/p&gt;

&lt;p&gt;This is rather few comments on features I didn&amp;rsquo;t find described elsewhere.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://voloda.bazilisek.net/img/mix/edge520.jpg&#34; alt=&#34;Garmin Edge 520&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;device-configuration&#34;&gt;Device configuration&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;I was used from Sigma Rox 9.0 that the configuration is done with convenience in a related software.

&lt;ul&gt;
&lt;li&gt;This served also for the configuration backup.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Unfortunately most of the setup for Garmin Edge 520 needs to be done manually on the device itself.&lt;/li&gt;
&lt;li&gt;For initial setup this is pretty time consuming.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;navigation-features&#34;&gt;Navigation features&lt;/h1&gt;

&lt;p&gt;As written in reviews the device does not have real navigation. Instead you can upload a &lt;code&gt;.gpx&lt;/code&gt; file and device will navigate you on a route.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I used this link to generate Open Street maps for device:

&lt;ul&gt;
&lt;li&gt;Map generation can be found here: &lt;a href=&#34;http://garmin.openstreetmap.nl/&#34;&gt;http://http://garmin.openstreetmap.nl/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Route from &lt;a href=&#34;http://ridewithgps.com&#34;&gt;Ride With GPS&lt;/a&gt; seems to work great even in Czech Republic.

&lt;ul&gt;
&lt;li&gt;It takes some time before you get used to how the navigation works.&lt;/li&gt;
&lt;li&gt;Recently I was able to plan a group ride for 150km in mountains which worked very well.&lt;/li&gt;
&lt;li&gt;The only downside is that it took more than a minute before the device read the course and started to navigate.&lt;/li&gt;
&lt;li&gt;We made a small side trip and the device found itself back on the course once we joined the original plan.w&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;It is very convenient to watch for example elevation profile during a ride.&lt;/li&gt;
&lt;li&gt;Overall the navigation is basically a race against a virtual partner.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;strava-segments&#34;&gt;Strava Segments&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;I liked &lt;a href=&#34;http://www.strava.com&#34;&gt;Strava&lt;/a&gt; segments.&lt;/li&gt;
&lt;li&gt;Starred segments appear automatically on the device if you have Strava premium membership.&lt;/li&gt;
&lt;li&gt;Each segment can be in the device configured against whom you compete.&lt;/li&gt;
&lt;li&gt;There two related challenges:

&lt;ul&gt;
&lt;li&gt;When using course navigation or Garmin Connect workouts segments are disabled by default.&lt;/li&gt;
&lt;li&gt;GPS precision can start/end the segment in a little bit different location than Strava will later evaluate it.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Having fun with Chef</title>
      <link>http://voloda.bazilisek.net/2015/09/having-fun-with-chef/</link>
      <pubDate>Mon, 14 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>http://voloda.bazilisek.net/2015/09/having-fun-with-chef/</guid>
      <description>

&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;Recently I had chance to evaluate usage of &lt;em&gt;Chef&lt;/em&gt; for deployment of web service on project I am working on.&lt;/p&gt;

&lt;p&gt;There are plenty of resources available and this post is meant mostly as a serie of personal notes based on my current experience so I can easily return to it.&lt;/p&gt;

&lt;h1 id=&#34;setup&#34;&gt;Setup&lt;/h1&gt;

&lt;h2 id=&#34;client-side&#34;&gt;Client side&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Chef client&lt;/em&gt; can run in two modes:&lt;/p&gt;

&lt;h3 id=&#34;standalone-called-chef-solo&#34;&gt;Standalone called chef solo&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Uses &lt;em&gt;chef-solo&lt;/em&gt; command without attempts to access the server&lt;/li&gt;
&lt;li&gt;Works greatly for development of &lt;em&gt;cookbooks&lt;/em&gt; or just for simple setup of the environment.&lt;/li&gt;
&lt;li&gt;Allows to define &lt;em&gt;environment&lt;/em&gt; in &lt;em&gt;JSON&lt;/em&gt; config file.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Node&lt;/em&gt; specific information has to be defined&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;client-server-mode&#34;&gt;Client-server mode&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Requires installed &lt;em&gt;chef server&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Allows to bootstrap newly provisioned machine very easily.&lt;/li&gt;
&lt;li&gt;Per-node setup can be maintained on the server.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;server-side&#34;&gt;Server side&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Chef server&lt;/em&gt; has to be installed on a &lt;em&gt;Linux&lt;/em&gt; machine, there is no installation for &lt;em&gt;Windows&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Setup is pretty straightforward and well documented and I was able to perform it even with my outdated &lt;em&gt;Linux&lt;/em&gt; knowledge.

&lt;ul&gt;
&lt;li&gt;The WebUI is paid feature but for me as a developer the command line turned out to be much better understandable.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;deployment-artifacts&#34;&gt;Deployment Artifacts&lt;/h3&gt;

&lt;p&gt;Although it allows to save files as a part of cookbook it seems to be pretty bad idea. Better is to have deployment packages available on some artifact server.&lt;/p&gt;

&lt;h1 id=&#34;creating-first-cookbook&#34;&gt;Creating first cookbook&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;For development the &lt;em&gt;Chef development kit&lt;/em&gt; can be installed:

&lt;ul&gt;
&lt;li&gt;For initial playing with &lt;em&gt;cookbook&lt;/em&gt; the client seems to be sufficient but development kit has some advanced features like static analysis, testing support etc. More to come&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;knife&lt;/em&gt; command helps here quite a bit although manual setup is obviously possible.&lt;/li&gt;
&lt;li&gt;It is best to maintain cookbook repository in &lt;em&gt;GIT&lt;/em&gt;.

&lt;ul&gt;
&lt;li&gt;For example dependency installation command is integrated with &lt;em&gt;git&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;create-cookbook&#34;&gt;Create cookbook&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;In git repository which will contain cookbook run:
&lt;code&gt;cmd
knife cookbook create COOKBOOK_NAME
&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Review created files to add documentation as needed.&lt;/li&gt;
&lt;li&gt;To install any dependencies run:

&lt;ul&gt;
&lt;li&gt;This by default works with &lt;em&gt;master&lt;/em&gt; branch. See other parameters to make it working on current branch.&lt;/li&gt;
&lt;li&gt;Dependency can be installed/managed manually as well if &lt;em&gt;git&lt;/em&gt; is not available.
&lt;code&gt;cmd
knife cookbook site install COOKBOOK_NAME
&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Define dependencies in &lt;em&gt;metadata.rb&lt;/em&gt; file

&lt;ul&gt;
&lt;li&gt;Each dependency can contain version information to maintain compatibility.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;quick-links&#34;&gt;Quick links&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.pluralsight.com/courses/meet-chef&#34;&gt;Pluralsight intro&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.chef.io/knife_cookbook.html&#34;&gt;Chef - knife cookbook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.chef.io/knife_cookbook_site.html&#34;&gt;Chef - knife cookbook site&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.chef.io/chef_solo.html&#34;&gt;Chef solo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Introducing .NET C# Inversion Of Control and Microsoft Unity Hands-On Lab</title>
      <link>http://voloda.bazilisek.net/2015/03/introducing-dotnet-csharp-inversion-of-control-and-microsoft-unity-hands-on-lab/</link>
      <pubDate>Mon, 16 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>http://voloda.bazilisek.net/2015/03/introducing-dotnet-csharp-inversion-of-control-and-microsoft-unity-hands-on-lab/</guid>
      <description>

&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;During past few months we introduced and heavily extended usage of &lt;em&gt;Microsoft Unity IoC container&lt;/em&gt; in our code base as a part of the effort to make the code more loosely coupled.&lt;/p&gt;

&lt;p&gt;As a result of those changes we now even more than before also rely on &lt;em&gt;Inversion Of Control&lt;/em&gt; or more specifically &lt;em&gt;Dependency Injection&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Thus both &lt;em&gt;Microsoft Unity&lt;/em&gt; and &lt;em&gt;IoC/DI&lt;/em&gt; are now crucial part of our toolbox. In order to bring everybody on our team up-to-speed as well as to have training material for newbies we decided to create a simple training material which should help us.&lt;/p&gt;

&lt;p&gt;After brief discussion within the team we agreed that the best way how to handle it would be to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Collect some solid resources describing the IoC/DI.

&lt;ul&gt;
&lt;li&gt;Martin Fowler is obviously first choice - though differences between IoC and DI are better explained in different resources :-).&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Provide hands-on lab project which will cover all the specifics for:

&lt;ul&gt;
&lt;li&gt;Inversion Of Control/Dependency injection.&lt;/li&gt;
&lt;li&gt;Microsoft Unity Container.&lt;/li&gt;
&lt;li&gt;Will serve as a self-training material.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;We will publish it on Github under MIT license.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;target-audience&#34;&gt;Target audience&lt;/h1&gt;

&lt;p&gt;.NET Software developers/engineers and architects who:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Would and are willing to learn about IoC/DI.&lt;/li&gt;
&lt;li&gt;Are familiar IoC/DI but would learn about Microsoft Unity IoC container.&lt;/li&gt;
&lt;li&gt;Would learn about possible challenges which usage of the MS Unity can bring.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;training-materials&#34;&gt;Training materials&lt;/h1&gt;

&lt;p&gt;With my colleagues we prepared set of projects which allows everybody to play with all the stuff on reasonably sized projects.&lt;/p&gt;

&lt;p&gt;Brief introduction can be found &lt;a href=&#34;https://github.com/IoCHowTo/IoCTasks/blob/master/README.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;github-projects&#34;&gt;Github projects&lt;/h2&gt;

&lt;p&gt;If you are either familiar with Github or if you would use this as an opportunity to learn more about it you can just fork/clone repositories below.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/IoCHowTo/IoCTasks&#34;&gt;https://github.com/IoCHowTo/IoCTasks&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;This repository contains initial Readme.md file with references as well as brief introduction.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/IoCHowTo/IoCTasksSolutions&#34;&gt;https://github.com/IoCHowTo/IoCTasksSolutions&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;This repository contains individual sample solutions for each project above.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;direct-access&#34;&gt;Direct access&lt;/h2&gt;

&lt;p&gt;In the case that you do not like Git/Github you can use direct links below to get the latest version of training projects as well as sample solutions in form of ZIP packages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/IoCHowTo/IoCTasks/archive/master.zip&#34;&gt;https://github.com/IoCHowTo/IoCTasks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/IoCHowTo/IoCTasksSolutions/archive/master.zip&#34;&gt;https://github.com/IoCHowTo/IoCTasksSolutions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;contributions&#34;&gt;Contributions&lt;/h1&gt;

&lt;p&gt;If you will find something which needs to be fixed or if you have some interesting sample task just send it as a Github pull request - we accept contributions under MIT license.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Thanks to everybody who already contributed with his time either in form of code or even advice :-).&lt;/strong&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Debugging T-SQL Stored Procedure Invoked From NUnit Tests In Visual Studio 2013 Debugger</title>
      <link>http://voloda.bazilisek.net/2015/03/debugging-t-sql-stored-procedure-invoked-from-nunit-tests-in-visual-studio-2013-debugger/</link>
      <pubDate>Tue, 10 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>http://voloda.bazilisek.net/2015/03/debugging-t-sql-stored-procedure-invoked-from-nunit-tests-in-visual-studio-2013-debugger/</guid>
      <description>

&lt;p&gt;Recently I had to write quite a few interesting stored procedures for MSSQL server which are covered by unit tests invoked as a part of continuous integration build in &lt;strong&gt;Team City&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Setting up the data and parameters for stored procedure takes some time and there are many scenarios thus I started looking for a ways:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;How to debug stored procedures using the existing infrastructure without necessity to extract everything out and use separated debugger in the &lt;strong&gt;SQL Server Management Studio&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;How to stub some of the data so the complex parts of queries can be easily verified.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the end I got working debugging with following setup:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Stored procedures written in T-SQL for MSSQL.&lt;/li&gt;
&lt;li&gt;Each stored procedure is covered by unit tests written in NUnit.

&lt;ul&gt;
&lt;li&gt;Thanks to tip of my colleague MSSQL guru &lt;em&gt;Lubos&lt;/em&gt; I was able quickly setup SQL Server snapshots to be able revert the database quickly to its initial state.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Lubos&lt;/em&gt; also proposed very simple way on how to &lt;strong&gt;stub&lt;/strong&gt; some data in procedures.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;In order to be able quickly check what is going on inside the stored procedure use the Visual Studio 2013 debugger including the ability to step into the stored procedure.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;using-stubs-for-data-used-inside-stored-procedures&#34;&gt;Using stubs for data used inside stored procedures&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Motivation here is that it is not always simple enough or even practical setup all the required data directly in the database.

&lt;ul&gt;
&lt;li&gt;Downside obviously is that since you are about to alter the stored procedure you have to be very careful.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;My colleague proposed a very simple way for this purpose which seems to work:

&lt;ul&gt;
&lt;li&gt;Before running tests take a database snapshot so you can easily revert back.&lt;/li&gt;
&lt;li&gt;Inside procedures use some markers which can be quickly identified and the content between them can be replaced - for example:&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;[Stub1]
&lt;span style=&#34;color:#00f&#34;&gt;SELECT&lt;/span&gt; * &lt;span style=&#34;color:#00f&#34;&gt;FROM&lt;/span&gt; [MyInvoices]
[#Stub1]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Next before you execute the stored procedure you fetch its source and replace the code
between markers with select from data stub (for example temporary table):&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;[Stub1]
&lt;span style=&#34;color:#00f&#34;&gt;SELECT&lt;/span&gt; * &lt;span style=&#34;color:#00f&#34;&gt;FROM&lt;/span&gt; #MyInvoices
[#Stub1] &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Before you exercise the stored procedure you simply populate content of #MyInvoices temporary table and run it.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;how-to-enable-t-sql-debugging-in-visual-studio-2013&#34;&gt;How to enable T-SQL debugging in Visual Studio 2013&lt;/h1&gt;

&lt;p&gt;This was the most tricky part of the whole procedure and it may be specific to my setup (MSSQL 2008 R2, VS2013).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;As a prerequisite the &lt;em&gt;Application debugging&lt;/em&gt; and &lt;em&gt;SQL/CLR debugging&lt;/em&gt; must be enabled for the SQL Server in the &lt;em&gt;SQL Server Object Explorer&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;There are two ways how to get to &lt;em&gt;SQL Server Object Explorer&lt;/em&gt;:

&lt;ul&gt;
&lt;li&gt;Directly open &lt;em&gt;SQL Server Object Explorer&lt;/em&gt; via Visual Studio menu &lt;em&gt;VIEW&lt;/em&gt;:
&lt;img src=&#34;http://voloda.bazilisek.net/img/sqldebugging/visual_studio_2013_open_sql_server_object_explorer.png&#34; alt=&#34;Open SQL Server Object Explorer in VS 2013 menu&#34; /&gt;&lt;/li&gt;
&lt;li&gt;Alternatively use &lt;em&gt;Server Explorer&lt;/em&gt;:

&lt;ul&gt;
&lt;li&gt;Firstly add a connection to your database&lt;/li&gt;
&lt;li&gt;Then right click using mouse on registered database and select &lt;em&gt;Browse in SQL Server Object Explorer&lt;/em&gt;:
&lt;img src=&#34;http://voloda.bazilisek.net/img/sqldebugging/visual_studio_2013_open_sql_server_object_explorer_from_server_explorer.jpg&#34; alt=&#34;Open SQL Server Object Explorer from Server Explorer in VS2013&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Once you get into the &lt;em&gt;SQL Server Object Explorer&lt;/em&gt; enable both debugging options as visible on picture below:
 &lt;img src=&#34;http://voloda.bazilisek.net/img/sqldebugging/visual_studio_2013_enable_sql_debugging_in_sql_server_object_explorer.png&#34; alt=&#34;Enable debugging in SQL Server Object Explorer from VS2013&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;running-tests&#34;&gt;Running tests&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Running tests just for verification purposes is very simple and basically any NUnit runner can be used.&lt;/li&gt;
&lt;li&gt;In our case for the standard purpose serves very well Jetbrains Resharper.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;debugging-tests&#34;&gt;Debugging tests&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Unfortunately this didn&amp;rsquo;t work with built-in R# test runner.&lt;/li&gt;
&lt;li&gt;Instead I use &lt;strong&gt;NUnit-x86.exe&lt;/strong&gt; runner (I simply needed to force the process bitness to 32bits but I suppose that &lt;strong&gt;NUnit.exe&lt;/strong&gt; will work as well):

&lt;ul&gt;
&lt;li&gt;Load test assembly into NUnit runner.&lt;/li&gt;
&lt;li&gt;Attach Visual Studio 2013 debugger to running process.&lt;/li&gt;
&lt;li&gt;Important part here is to have enabled both - &lt;strong&gt;Managed code&lt;/strong&gt; and &lt;strong&gt;T-SQL&lt;/strong&gt; code debugging prior to attaching to he &lt;strong&gt;NUnit-x86.exe&lt;/strong&gt; process:
&lt;img src=&#34;http://voloda.bazilisek.net/img/sqldebugging/visual_studio_2013_attach_debugger_with_t_sql_debugging.jpg&#34; alt=&#34;Attaching to NUnit with enabled T-SQL debugging&#34; /&gt;&lt;/li&gt;
&lt;li&gt;Now set a .breakpoint in .NET code just around the code which is responsible for invocation of the stored procedure you are interested in, for example &lt;code&gt;SqlDbCommand.Execute()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Run unit test from the NUnit runner and have it hit the breakpoint in Visual Studio.&lt;/li&gt;
&lt;li&gt;Now from the _&lt;strong&gt;SQL Server Object Explorer&lt;/strong&gt; open the body of stored procedure (just double-click on it),&lt;/li&gt;
&lt;li&gt;Set a breakpoint inside the procedure.&lt;/li&gt;
&lt;li&gt;And step thru the .NET code which is about to invoke the procedure.&lt;/li&gt;
&lt;li&gt;If everything works well for you you are now inside the stored procedure and you can debug it.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;watching-data-inside-the-stored-procedure&#34;&gt;Watching data inside the stored procedure&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;You can easily watch content of any variable inside the stored procedure.&lt;/li&gt;
&lt;li&gt;I found very simple trick which can be used to watch also content of temporary tables and table variables.

&lt;ul&gt;
&lt;li&gt;At the place you would check the content add following statement (obviously adjusted for correct table/variable name):&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;  &lt;span style=&#34;color:#00f&#34;&gt;DECLARE&lt;/span&gt; @v XML = (&lt;span style=&#34;color:#00f&#34;&gt;SELECT&lt;/span&gt; * &lt;span style=&#34;color:#00f&#34;&gt;FROM&lt;/span&gt; #&lt;span style=&#34;color:#00f&#34;&gt;Parameters&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;FOR&lt;/span&gt; XML AUTO, ROOT(&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#39;MyRoot&amp;#39;&lt;/span&gt;))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Once you will hit the statement in the debugger you can easily watch the content of &lt;code&gt;@v&lt;/code&gt; and visualize it for example via &lt;em&gt;XML Visualizer&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>How to post markdown article on blogspot/blogger with enabled code syntax highlighting</title>
      <link>http://voloda.bazilisek.net/2014/12/how-to-post-markdown-article-on-blogspot/blogger-with-enabled-code-syntax-highlighting/</link>
      <pubDate>Thu, 18 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>http://voloda.bazilisek.net/2014/12/how-to-post-markdown-article-on-blogspot/blogger-with-enabled-code-syntax-highlighting/</guid>
      <description>

&lt;h1 id=&#34;how-to&#34;&gt;How-to&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Open &lt;a href=&#34;http://stackedit.io&#34;&gt;StackEdit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;In blogger create a new post and get postId from the URL&lt;/li&gt;
&lt;li&gt;Setup post permalink to match the title&lt;/li&gt;
&lt;li&gt;Using # synchronize the document with google drive&lt;/li&gt;
&lt;li&gt;Using # publish the article to blogspot&lt;/li&gt;
&lt;li&gt;As you keep editing simply synchronize/re-publish the article&lt;/li&gt;
&lt;li&gt;In order to enable syntax highlighting for the C#/XML or any other code edit the blogspot template and insert the following script reference between &lt;code&gt;&amp;lt;head&amp;gt;&amp;lt;/head&amp;gt;&lt;/code&gt; tags:
&lt;code&gt;&amp;lt;script src=&#39;https://google-code-prettify.googlecode.com/svn/loader/run_prettify.js&#39;/&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Use following at the top of markdown post to define whether the article is published, title and tags:
&lt;code&gt;
---
title: My article title
tags: tag1,tag2
published: true
---
&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Submit article URL to directories:

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.geekarticles.com/submit_link.php&#34;&gt;Geek articles&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;references&#34;&gt;References&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://stackedit.io&#34;&gt;StackEdit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blogspot.com&#34;&gt;Blogspot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://google-code-prettify.googlecode.com&#34;&gt;Syntax highlighter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Visual Studio 2012 debugger does not break after attaching to C#/.NET process</title>
      <link>http://voloda.bazilisek.net/2014/12/visual-studio-2012-debugger-does-not-break-after-attaching-to-csharp-dotnet-process/</link>
      <pubDate>Thu, 18 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>http://voloda.bazilisek.net/2014/12/visual-studio-2012-debugger-does-not-break-after-attaching-to-csharp-dotnet-process/</guid>
      <description>&lt;p&gt;I had from time to time issue debug C#/.NET applications in Visual Studio 2012 after attaching Visual Studio 2012 debugger to a process.&lt;/p&gt;

&lt;p&gt;Symptoms were that the debugger attached to the process but neither &amp;lsquo;Break All&amp;rsquo; worked. The same applied for any preset breakpoint.&lt;/p&gt;

&lt;p&gt;For some time I thought that Visual Studio installation for somehow corrupted on my system but since I was always able to workaround it via &lt;code&gt;Debug.Assert()&lt;/code&gt; or &lt;code&gt;Debugger.Break()&lt;/code&gt; calls put directly into code I had never motivation to really look for a solution nor reinstall the Visual Studio.&lt;/p&gt;

&lt;p&gt;Today I really wanted to attach to a process to see what is going on inside and the issue happened again.&lt;/p&gt;

&lt;p&gt;After a bit of playing I realized that in the case that debugger works after attaching correctly the &amp;lsquo;Attach to Process&amp;rsquo; Visual Studio dialog looks like this (see &amp;lsquo;Attach to&amp;rsquo; field):
&lt;img src=&#34;http://voloda.bazilisek.net/img/visual-studio/visual_studio_debugger_does_recognize_process_type.png&#34; alt=&#34;visual_studio_debugger_does_recognize_process_type.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;For my process it didn&amp;rsquo;t work this time and &amp;lsquo;Attach to Process&amp;rsquo; dialog looked like this (again see &amp;lsquo;Attach to&amp;rsquo; field):
&lt;img src=&#34;http://voloda.bazilisek.net/img/visual-studio/visual_studio_debugger_does_not_recognize_process_type.png&#34; alt=&#34;visual_studio_debugger_does_not_recognize_process_type.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Apparently Visual Studio in some cases does not properly detect the type of the process and does not use correct debugger settings.&lt;/p&gt;

&lt;p&gt;In order to solve my issue I finally found the &amp;lsquo;Select&amp;hellip;&amp;rsquo; button following &amp;lsquo;Attach to&amp;rsquo; field where you can disable automatic detection of the process type and manually select a different one.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://voloda.bazilisek.net/img/visual-studio/visual_studio_debugger_does_not_recognize_process_select_code_type.png&#34; alt=&#34;visual_studio_debugger_does_not_recognize_process_select_code_type.png &#34; /&gt;&lt;/p&gt;

&lt;p&gt;After selecting &amp;lsquo;Manager (v4.5, 4.0)&amp;rsquo; and attaching debugger to process again everything worked well.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to release unmanaged library loaded into managed .NET code</title>
      <link>http://voloda.bazilisek.net/2014/12/how-to-release-unmanaged-library-loaded-into-managed-dotnet-code/</link>
      <pubDate>Wed, 03 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>http://voloda.bazilisek.net/2014/12/how-to-release-unmanaged-library-loaded-into-managed-dotnet-code/</guid>
      <description>

&lt;h1 id=&#34;motivation&#34;&gt;Motivation&lt;/h1&gt;

&lt;p&gt;I had found this article on how to release DLL library already loaded into the process using P-Invoke. It uses &lt;code&gt;LoadLibrary()&lt;/code&gt; and &lt;code&gt;FreeLibrary()&lt;/code&gt; WINAPI calls to achieve this.&lt;/p&gt;

&lt;p&gt;And what is wrong with it?&lt;/p&gt;

&lt;p&gt;It forces to unload ALL instances of the DLL library currently loaded within process. Which means, that in the case you have more than one instance of the class using these external functions ALL these will stop working!&lt;/p&gt;

&lt;p&gt;And that is not all - you cannot use this DLL in same application domain again after unloading.&lt;/p&gt;

&lt;h1 id=&#34;solution&#34;&gt;Solution&lt;/h1&gt;

&lt;p&gt;Solution is pretty simple one, but I have to say that it wasn&amp;rsquo;t very obvious to me at the beginning.
You can use P-Invoke to import following standard WinAPI functions for dynamical function loading:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;LoadLibrary()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;FreeLibrary()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GetProcAddress()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We will use following wrapping class:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#00f&#34;&gt;internal&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#2b91af&#34;&gt;UnsafeMethods&lt;/span&gt;
{
    [DllImport(&amp;#34;kernel32.dll&amp;#34;, SetLastError = true)]
    &lt;span style=&#34;color:#00f&#34;&gt;internal&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;extern&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; IntPtr LoadLibrary(&lt;span style=&#34;color:#2b91af&#34;&gt;string&lt;/span&gt; libraryName);
    [DllImport(&amp;#34;kernel32.dll&amp;#34;, SetLastError = true)]
    &lt;span style=&#34;color:#00f&#34;&gt;internal&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;extern&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#2b91af&#34;&gt;bool&lt;/span&gt; FreeLibrary(IntPtr hModule);
    [DllImport(&amp;#34;kernel32.dll&amp;#34;, SetLastError = true)]
    &lt;span style=&#34;color:#00f&#34;&gt;internal&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;extern&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; IntPtr GetProcAddress(IntPtr hModule, &lt;span style=&#34;color:#2b91af&#34;&gt;string&lt;/span&gt; procName);
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We also need signatures of imported functions - we will convert them into delegates (following ones come from sample project):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#008000&#34;&gt;// int multiply(int value1, int value2);
&lt;/span&gt;&lt;span style=&#34;color:#008000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;delegate&lt;/span&gt; &lt;span style=&#34;color:#2b91af&#34;&gt;int&lt;/span&gt; MultiplyDelegate(&lt;span style=&#34;color:#2b91af&#34;&gt;int&lt;/span&gt; value1, &lt;span style=&#34;color:#2b91af&#34;&gt;int&lt;/span&gt; value2);
&lt;span style=&#34;color:#008000&#34;&gt;// int str2int(const char *input);
&lt;/span&gt;&lt;span style=&#34;color:#008000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;delegate&lt;/span&gt; &lt;span style=&#34;color:#2b91af&#34;&gt;int&lt;/span&gt; Str2IntDelegate([MarshalAs(UnmanagedType.LPStr)]&lt;span style=&#34;color:#2b91af&#34;&gt;string&lt;/span&gt; source);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we can create implement our class calling external DLL functionality with &lt;code&gt;IDisposable&lt;/code&gt; interface so it will automatically release used DLL library when it will go out-of-scope or it will be finalized (in example project are two functions which we will publish as &lt;code&gt;Multiply()&lt;/code&gt; and &lt;code&gt;Str2Int()&lt;/code&gt;).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#00f&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#2b91af&#34;&gt;ExternalHelpers&lt;/span&gt;: IDisposable
{
    &lt;span style=&#34;color:#00f&#34;&gt;#region Private members
&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;private&lt;/span&gt; IntPtr _libraryHandle;
    &lt;span style=&#34;color:#00f&#34;&gt;private&lt;/span&gt; MultiplyDelegate _multiply;
    &lt;span style=&#34;color:#00f&#34;&gt;private&lt;/span&gt; Str2IntDelegate _str2Int;
    &lt;span style=&#34;color:#00f&#34;&gt;#endregion
&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;&lt;/span&gt;
    &lt;span style=&#34;color:#00f&#34;&gt;#region External functions delegates
&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#008000&#34;&gt;// int multiply(int value1, int value2);
&lt;/span&gt;&lt;span style=&#34;color:#008000&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;delegate&lt;/span&gt; &lt;span style=&#34;color:#2b91af&#34;&gt;int&lt;/span&gt; MultiplyDelegate(&lt;span style=&#34;color:#2b91af&#34;&gt;int&lt;/span&gt; value1, &lt;span style=&#34;color:#2b91af&#34;&gt;int&lt;/span&gt; value2);
    &lt;span style=&#34;color:#008000&#34;&gt;// int str2int(const char *input);
&lt;/span&gt;&lt;span style=&#34;color:#008000&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;delegate&lt;/span&gt; &lt;span style=&#34;color:#2b91af&#34;&gt;int&lt;/span&gt; Str2IntDelegate([MarshalAs(UnmanagedType.LPStr)]&lt;span style=&#34;color:#2b91af&#34;&gt;string&lt;/span&gt; source);
    &lt;span style=&#34;color:#00f&#34;&gt;#endregion
&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;&lt;/span&gt;
    &lt;span style=&#34;color:#00f&#34;&gt;public&lt;/span&gt; ExternalHelpers()
    {
        &lt;span style=&#34;color:#008000&#34;&gt;// dynamically load DLL using WinAPI
&lt;/span&gt;&lt;span style=&#34;color:#008000&#34;&gt;&lt;/span&gt;        _libraryHandle = UnsafeMethods.LoadLibrary(&lt;span style=&#34;color:#a31515&#34;&gt;@&amp;#34;testing.dll&amp;#34;&lt;/span&gt;);

        &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (_libraryHandle == IntPtr.Zero)
            Marshal.ThrowExceptionForHR(Marshal.GetHRForLastWin32Error());
        &lt;span style=&#34;color:#008000&#34;&gt;// import functions as delegates using GetProcAddress
&lt;/span&gt;&lt;span style=&#34;color:#008000&#34;&gt;&lt;/span&gt;        _multiply = LoadExternalFunction&amp;lt;MultiplyDelegate&amp;gt;(&lt;span style=&#34;color:#a31515&#34;&gt;@&amp;#34;multiply&amp;#34;&lt;/span&gt;);
        _str2Int = LoadExternalFunction&amp;lt;Str2IntDelegate&amp;gt;(&lt;span style=&#34;color:#a31515&#34;&gt;@&amp;#34;str2int&amp;#34;&lt;/span&gt;);
    }

    &lt;span style=&#34;color:#00f&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#2b91af&#34;&gt;int&lt;/span&gt; Multiply(&lt;span style=&#34;color:#2b91af&#34;&gt;int&lt;/span&gt; value1, &lt;span style=&#34;color:#2b91af&#34;&gt;int&lt;/span&gt; value2)
    {
        &lt;span style=&#34;color:#008000&#34;&gt;// call method using delegate
&lt;/span&gt;&lt;span style=&#34;color:#008000&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; _multiply(value1, value2);
    }

    &lt;span style=&#34;color:#00f&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#2b91af&#34;&gt;int&lt;/span&gt; Str2Int(&lt;span style=&#34;color:#2b91af&#34;&gt;string&lt;/span&gt; source)
    {
        &lt;span style=&#34;color:#008000&#34;&gt;// call method using delegate
&lt;/span&gt;&lt;span style=&#34;color:#008000&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; _str2Int(source);
    }

    &lt;span style=&#34;color:#00f&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; Dispose()
    {
        Dispose(&lt;span style=&#34;color:#00f&#34;&gt;true&lt;/span&gt;);

        GC.SuppressFinalize(&lt;span style=&#34;color:#00f&#34;&gt;this&lt;/span&gt;);
    }

    ~ExternalHelpers()
    {
        Dispose(&lt;span style=&#34;color:#00f&#34;&gt;false&lt;/span&gt;);
    }

    &lt;span style=&#34;color:#00f&#34;&gt;#region Private helper methods
&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;private&lt;/span&gt; T LoadExternalFunction&amp;lt;T&amp;gt;(&lt;span style=&#34;color:#2b91af&#34;&gt;string&lt;/span&gt; functionName)
        &lt;span style=&#34;color:#00f&#34;&gt;where&lt;/span&gt; T: &lt;span style=&#34;color:#00f&#34;&gt;class&lt;/span&gt;
    {
        Debug.Assert(!String.IsNullOrEmpty(functionName));
        &lt;span style=&#34;color:#008000&#34;&gt;// load function pointer
&lt;/span&gt;&lt;span style=&#34;color:#008000&#34;&gt;&lt;/span&gt;        IntPtr functionPointer = UnsafeMethods.GetProcAddress(_libraryHandle, functionName);

        &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (functionPointer == IntPtr.Zero)
            Marshal.ThrowExceptionForHR(Marshal.GetHRForLastWin32Error());
        &lt;span style=&#34;color:#008000&#34;&gt;// Marshal to requested delegate
&lt;/span&gt;&lt;span style=&#34;color:#008000&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; Marshal.GetDelegateForFunctionPointer(functionPointer, &lt;span style=&#34;color:#00f&#34;&gt;typeof&lt;/span&gt;(T)) &lt;span style=&#34;color:#00f&#34;&gt;as&lt;/span&gt; T;
    }

    &lt;span style=&#34;color:#00f&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; Dispose(&lt;span style=&#34;color:#2b91af&#34;&gt;bool&lt;/span&gt; disposing)
    {
        &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (disposing)
        {
            _multiply = &lt;span style=&#34;color:#00f&#34;&gt;null&lt;/span&gt;;
            _str2Int = &lt;span style=&#34;color:#00f&#34;&gt;null&lt;/span&gt;;
        }

        &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (_libraryHandle != IntPtr.Zero)
        {
            &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (!UnsafeMethods.FreeLibrary(_libraryHandle))
                Marshal.ThrowExceptionForHR(Marshal.GetHRForLastWin32Error());

            _libraryHandle = IntPtr.Zero;
        }
    }
    &lt;span style=&#34;color:#00f&#34;&gt;#endregion
&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;&lt;/span&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And finally - we can use it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; Main(&lt;span style=&#34;color:#2b91af&#34;&gt;string&lt;/span&gt;[] args)
{
    using(ExternalHelpers e = &lt;span style=&#34;color:#00f&#34;&gt;new&lt;/span&gt; ExternalHelpers())
    {
        &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#2b91af&#34;&gt;int&lt;/span&gt; value1 = 2;
        &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#2b91af&#34;&gt;int&lt;/span&gt; value2 = 3;
        &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#2b91af&#34;&gt;string&lt;/span&gt; strValue = &lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;345&amp;#34;&lt;/span&gt;;

        Console.WriteLine(&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;{0} * {1} = {2}&amp;#34;&lt;/span&gt;, value1, value2, e.Multiply(value1, value2));
        Console.WriteLine(&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;{0} =&amp;gt; {1}&amp;#34;&lt;/span&gt;, strValue, e.Str2Int(strValue));
    }

    Console.ReadKey();
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Looks easy? Yes it is :-)&lt;/p&gt;

&lt;h1 id=&#34;links&#34;&gt;Links&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://msdn.microsoft.com/&#34;&gt;MSDN&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Unity Registration Validator</title>
      <link>http://voloda.bazilisek.net/2014/11/unity-registration-validator/</link>
      <pubDate>Tue, 25 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>http://voloda.bazilisek.net/2014/11/unity-registration-validator/</guid>
      <description>

&lt;p&gt;Microsoft Unity Extension which verifies registrations between parent and child containers. This is mainly issue when you
accidently inject a dependency from a child container to the parent container while using ContainerControlledLifetimeManager (singleton).&lt;/p&gt;

&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;When using Microsoft Unity IoC container you may face some weird issues when dealing with &amp;lsquo;singletons&amp;rsquo; (ContainerControlledLifetimeManager) and child containers. It may or may not be what you expected.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s consider following classes:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#00f&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;interface&lt;/span&gt; IServiceDependency
{
}

&lt;span style=&#34;color:#00f&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;interface&lt;/span&gt; IService
{
}

&lt;span style=&#34;color:#00f&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#2b91af&#34;&gt;ServiceDependency&lt;/span&gt; : IServiceDependency
{
    &lt;span style=&#34;color:#00f&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;readonly&lt;/span&gt; &lt;span style=&#34;color:#2b91af&#34;&gt;string&lt;/span&gt; _dep1;

    &lt;span style=&#34;color:#00f&#34;&gt;public&lt;/span&gt; ServiceDependency(&lt;span style=&#34;color:#2b91af&#34;&gt;string&lt;/span&gt; dep1)
    {
        _dep1 = dep1;
    }
}

&lt;span style=&#34;color:#00f&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#2b91af&#34;&gt;Service&lt;/span&gt; : IService
{
    &lt;span style=&#34;color:#00f&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;readonly&lt;/span&gt; IServiceDependency _dependency;

    &lt;span style=&#34;color:#00f&#34;&gt;public&lt;/span&gt; Service(IServiceDependency dependency)
    {
        _dependency = dependency;
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now let&amp;rsquo;s setup some test case:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;[Test]
&lt;span style=&#34;color:#00f&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; ServiceResolutionViaTwoDifferentChildContainersShouldFail()
{
    &lt;span style=&#34;color:#2b91af&#34;&gt;var&lt;/span&gt; rootContainer = &lt;span style=&#34;color:#00f&#34;&gt;new&lt;/span&gt; UnityContainer();

    rootContainer.RegisterType&amp;lt;IService, Service&amp;gt;(&lt;span style=&#34;color:#00f&#34;&gt;new&lt;/span&gt; ContainerControlledLifetimeManager());
    &lt;span style=&#34;color:#2b91af&#34;&gt;var&lt;/span&gt; childContainer = rootContainer.CreateChildContainer();
    &lt;span style=&#34;color:#2b91af&#34;&gt;var&lt;/span&gt; childContainer2 = rootContainer.CreateChildContainer();

    childContainer.RegisterInstance&amp;lt;IServiceDependency&amp;gt;(&lt;span style=&#34;color:#00f&#34;&gt;new&lt;/span&gt; ServiceDependency(&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;Dep1&amp;#34;&lt;/span&gt;));
    childContainer2.RegisterInstance&amp;lt;IServiceDependency&amp;gt;(&lt;span style=&#34;color:#00f&#34;&gt;new&lt;/span&gt; ServiceDependency(&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;Dep2&amp;#34;&lt;/span&gt;));

    &lt;span style=&#34;color:#2b91af&#34;&gt;var&lt;/span&gt; childContainerResult1 = childContainer.Resolve&amp;lt;IService&amp;gt;();
    &lt;span style=&#34;color:#2b91af&#34;&gt;var&lt;/span&gt; childContainerResult2 = childContainer.Resolve&amp;lt;IService&amp;gt;();

    &lt;span style=&#34;color:#2b91af&#34;&gt;var&lt;/span&gt; childContainer2Result1 = childContainer.Resolve&amp;lt;IService&amp;gt;();
    &lt;span style=&#34;color:#2b91af&#34;&gt;var&lt;/span&gt; childContainer2Result2 = childContainer.Resolve&amp;lt;IService&amp;gt;();

    Assert.AreEqual(childContainerResult1, childContainerResult2);
    Assert.AreEqual(childContainer2Result1, childContainer2Result2);

    Assert.AreEqual(childContainer2Result1, childContainerResult1);
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;This actually will pass all the assertions.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#34;let-s-analyze-it-a-bit&#34;&gt;Let&amp;rsquo;s analyze it a bit:&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Let&amp;rsquo;s step thru the test case in debugger.&lt;/li&gt;
&lt;li&gt;Setup some watches:

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;((ServiceDependency)((Service)childContainerResult1)._dependency)._dep1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;((ServiceDependency)((Service)childContainer2Result1)._dependency)._dep1&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;You can see that both of them point to &lt;code&gt;Dep1&lt;/code&gt;.

&lt;ul&gt;
&lt;li&gt;Is that what you really wanted?&lt;/li&gt;
&lt;li&gt;Consider the following case:&lt;/li&gt;
&lt;li&gt;You disposed &lt;code&gt;childContainer&lt;/code&gt; and your &lt;code&gt;ServiceDependency&lt;/code&gt; is disposable registered as &lt;code&gt;ContainerControlledLifetimeManager&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;At this point you have invalid instance of &lt;code&gt;IService&lt;/code&gt;&lt;/strong&gt; (it has injected disposed ServiceDependency).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;This is most likely a side effect of unwanted changes and you want to avoid it&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;And this is exactly what is this extension trying to solve&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;By enabling this extension the build operation will fail&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;how-to-enable-extension&#34;&gt;How to enable extension&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Reference the &lt;code&gt;UnityRegistrationValidator.dll&lt;/code&gt; in your project.&lt;/li&gt;
&lt;li&gt;Call the registration below.

&lt;ul&gt;
&lt;li&gt;The extension is available as a &lt;a href=&#34;https://www.nuget.org/packages/UnityRegistrationValidator&#34;&gt;&lt;strong&gt;Nuget package&lt;/strong&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#2b91af&#34;&gt;var&lt;/span&gt; rootContainer = &lt;span style=&#34;color:#00f&#34;&gt;new&lt;/span&gt; UnityContainer();
rootContainer.AddNewExtension&amp;lt;EnsureRegistrationDepthOrderExtension&amp;gt;();&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&#34;following-rules-are-enforced-after-registering-extension&#34;&gt;Following rules are enforced after registering extension&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;For each registration is tracked depth in containers (starting the container in which resolve starts).&lt;/li&gt;
&lt;li&gt;If you register an object which

&lt;ul&gt;
&lt;li&gt;has dependency resolvable only inside the child container&lt;/li&gt;
&lt;li&gt;and has ContainerControlledLifetimeManager()&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;the resolve will fail.&lt;/li&gt;
&lt;li&gt;If you do this without the extension the resolve will succeed but the dependencies were most likely resolved in unexpected way (unless you really know what are you doing).&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;This extension allows you to validate the expected behavior.&lt;/li&gt;
&lt;li&gt;Since it may have performance impact (it needs to track all the registrations as well as build operations) it may have negative performance impact.&lt;/li&gt;
&lt;li&gt;This extension is intended to help you ensure expected behavior - but you have to always consider your circumstanes.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;You are using this extension on your own risk :-).&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;references&#34;&gt;References&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.nuget.org/packages/UnityRegistrationValidator&#34;&gt;https://www.nuget.org/packages/UnityRegistrationValidator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/voloda/UnityRegistrationValidator&#34;&gt;https://github.com/voloda/UnityRegistrationValidator&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>DbKeeperNet - How to seed ASP.NET users and roles</title>
      <link>http://voloda.bazilisek.net/2014/11/dbkeepernet-how-to-seed-aspdotnet-users-and-roles/</link>
      <pubDate>Mon, 24 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>http://voloda.bazilisek.net/2014/11/dbkeepernet-how-to-seed-aspdotnet-users-and-roles/</guid>
      <description>

&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;It is a common task that as a part of database setup you need to seed some default user accounts and roles into the database as a part of setup.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.codeproject.com/Articles/42091/DBKeeperNet-Keeps-Your-DB-Schema-Up-to-date&#34;&gt;DbKeeperNet&lt;/a&gt; is an opensource .NET/C# framework which helps you manage database schema for your database performing various types of upgrade steps. DbKeeperNet is designed with support for various database types in mind. Currently it supports most common databases: &lt;em&gt;&lt;strong&gt;MSSQL, SQLite, Firebird, MySQL&lt;/strong&gt;&lt;/em&gt;, Oracle. Since the whole framework is extensible adding support of a new database type is just a simple task.&lt;/p&gt;

&lt;p&gt;It is just matter of few minutes to get it set up in your project and have in-place infrastructure which will ensure proper upgrade path for your database schema on all installations for your application.&lt;/p&gt;

&lt;p&gt;In its recent version &lt;a href=&#34;http://www.codeproject.com/Articles/42091/DBKeeperNet-Keeps-Your-DB-Schema-Up-to-date&#34;&gt;DbKeeperNet&lt;/a&gt;&amp;nbsp;also support seeding of the ASP.NET membership and roles. With respect to overall design - this is supported on any database which implemented its membership providers and makes them available to the .NET infrastructure.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Please keep in mind that any seeded account with pre-seeded password should change the seeded password ASAP.&lt;/strong&gt;&lt;/p&gt;

&lt;h1 id=&#34;sample-task&#34;&gt;Sample task&lt;/h1&gt;

&lt;p&gt;Let&amp;rsquo;s consider the following set of operations you would perform in your database during the time as your application evolves (of course this can be mixed with any other database schema change like adding a table):&lt;/p&gt;

&lt;h2 id=&#34;upgrade-to-version-1-00&#34;&gt;Upgrade to version 1.00&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;If running on MSSQL setup the membership schema&lt;/li&gt;
&lt;li&gt;Create role TestRole1&lt;/li&gt;
&lt;li&gt;Create role TestRole2&lt;/li&gt;
&lt;li&gt;Create user TestUser1 assigned to TestRole1 and TestRole2&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;upgrade-to-version-1-01&#34;&gt;Upgrade to version 1.01&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Create user TestUser2 assigned to TestRole1&lt;/li&gt;
&lt;li&gt;Delete user TestUser1&lt;/li&gt;
&lt;li&gt;Delete TestRole2&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;upgrade-script&#34;&gt;Upgrade script&lt;/h1&gt;

&lt;p&gt;Part of this article is a console application demo project using the script below and referencing DbKeeperNet as a &lt;a href=&#34;https://www.nuget.org/packages/DbKeeperNet/&#34;&gt;Nuget package&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The demo project is created for the MSSQL but it can be easily adopted for any other database just by changing setup in App.Config
    *   The MSSQL specific step here is necessary since the DB schema creation script requires to be executed within a separated transaction and each of the steps needs to be commited

&lt;ul&gt;
&lt;li&gt;For example MySQL providers seed the required schema on its own upon the first usage of membership providers.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;It can be easily adopted and used in a web application - you simply have to plan for its initial execution.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://www.codeproject.com/Articles/42091/DBKeeperNet-Keeps-Your-DB-Schema-Up-to-date&#34;&gt;DbKeeperNet&lt;/a&gt; is using an XML validated against the XSD schema to define a database upgrade. Below you can find an example database upgrade script to achieve above steps (this is comming directly from the example):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#00f&#34;&gt;&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;utf-8&amp;#34;?&amp;gt;&lt;/span&gt;
&amp;lt;upd:Updates xmlns:upd=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;http://code.google.com/p/dbkeepernet/Updates-1.0.xsd&amp;#34;&lt;/span&gt; xmlns:xsi=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34;&lt;/span&gt; AssemblyName=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;DbKeeperNet.SimpleDemo&amp;#34;&lt;/span&gt; xsi:schemaLocation=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;http://code.google.com/p/dbkeepernet/Updates-1.0.xsd ../../DbKeeperNet.Engine/Resources/Updates-1.0.xsd&amp;#34;&lt;/span&gt;&amp;gt;
  &lt;span style=&#34;color:#008000&#34;&gt;&amp;lt;!-- Default way how to check whether to execute update step or not --&amp;gt;&lt;/span&gt;
  &amp;lt;DefaultPreconditions&amp;gt;
    &lt;span style=&#34;color:#008000&#34;&gt;&amp;lt;!-- We will use step information saving strategy --&amp;gt;&lt;/span&gt;
    &amp;lt;Precondition FriendlyName=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;Update step executed&amp;#34;&lt;/span&gt; Precondition=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;StepNotExecuted&amp;#34;&lt;/span&gt;/&amp;gt;
  &amp;lt;/DefaultPreconditions&amp;gt;
  &amp;lt;Update Version=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;1.00&amp;#34;&lt;/span&gt;&amp;gt;
    &lt;span style=&#34;color:#008000&#34;&gt;&amp;lt;!--
&lt;/span&gt;&lt;span style=&#34;color:#008000&#34;&gt;    This update step is needed to properly inject MSSQL membership schema into the database.
&lt;/span&gt;&lt;span style=&#34;color:#008000&#34;&gt;    The challenge here is that the schema setup must be executed in separated transaction.
&lt;/span&gt;&lt;span style=&#34;color:#008000&#34;&gt;    
&lt;/span&gt;&lt;span style=&#34;color:#008000&#34;&gt;    For other membership providers this is usually handled automatically upon the first usage
&lt;/span&gt;&lt;span style=&#34;color:#008000&#34;&gt;    (like for MySql)
&lt;/span&gt;&lt;span style=&#34;color:#008000&#34;&gt;    --&amp;gt;&lt;/span&gt;
    &amp;lt;UpdateStep xsi:type=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;upd:CustomUpdateStepType&amp;#34;&lt;/span&gt; Id=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt; Type=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;DbKeeperNet.Engine.CustomUpdateSteps.MsSqlStepWithoutExplicitTransaction, DbKeeperNet.Engine&amp;#34;&lt;/span&gt;  FriendlyName=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;Setting up database schema for membership and roles&amp;#34;&lt;/span&gt;&amp;gt;
      &amp;lt;Preconditions&amp;gt;
        &amp;lt;Precondition FriendlyName=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;Update step executed&amp;#34;&lt;/span&gt; Precondition=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;StepNotExecuted&amp;#34;&lt;/span&gt;/&amp;gt;
        &amp;lt;Precondition FriendlyName=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;Database is MSSQL&amp;#34;&lt;/span&gt; Precondition=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;DbType&amp;#34;&lt;/span&gt;&amp;gt;
          &amp;lt;Param&amp;gt;MSSQL&amp;lt;/Param&amp;gt;
        &amp;lt;/Precondition&amp;gt;
      &amp;lt;/Preconditions&amp;gt;
      &amp;lt;Param&amp;gt;DbKeeperNet.Extensions.MsSqlMembershipAndRolesSetup&amp;lt;/Param&amp;gt;
      &amp;lt;Param&amp;gt;DbKeeperNet.Extensions.MsSqlMembershipAndRolesSetup.MsSqlMembershipAndRolesSetup.sql&amp;lt;/Param&amp;gt;
    &amp;lt;/UpdateStep&amp;gt;
    &lt;span style=&#34;color:#008000&#34;&gt;&amp;lt;!-- Create some seeded roles --&amp;gt;&lt;/span&gt;
    &amp;lt;UpdateStep xsi:type=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;upd:AspNetRoleCreateUpdateStepType&amp;#34;&lt;/span&gt; FriendlyName=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;Create role TestRole1&amp;#34;&lt;/span&gt; Id=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;2&amp;#34;&lt;/span&gt; RoleName=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;TestRole1&amp;#34;&lt;/span&gt;/&amp;gt;
    &amp;lt;UpdateStep xsi:type=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;upd:AspNetRoleCreateUpdateStepType&amp;#34;&lt;/span&gt; Id=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;3&amp;#34;&lt;/span&gt; RoleName=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;TestRole2&amp;#34;&lt;/span&gt;/&amp;gt;
    &lt;span style=&#34;color:#008000&#34;&gt;&amp;lt;!-- Seed an account and associate it with roles --&amp;gt;&lt;/span&gt;
    &amp;lt;UpdateStep xsi:type=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;upd:AspNetAccountCreateUpdateStepType&amp;#34;&lt;/span&gt; Id=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;4&amp;#34;&lt;/span&gt; UserName=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;TestUser1&amp;#34;&lt;/span&gt; Mail=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;testuser1@domain.com&amp;#34;&lt;/span&gt; Password=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;SeededPassword&amp;#34;&lt;/span&gt;&amp;gt;
      &amp;lt;Role&amp;gt;TestRole1&amp;lt;/Role&amp;gt;
      &amp;lt;Role&amp;gt;TestRole2&amp;lt;/Role&amp;gt;
    &amp;lt;/UpdateStep&amp;gt;
  &amp;lt;/Update&amp;gt;
  &amp;lt;Update Version=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;1.01&amp;#34;&lt;/span&gt;&amp;gt;
    &amp;lt;UpdateStep xsi:type=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;upd:AspNetAccountCreateUpdateStepType&amp;#34;&lt;/span&gt; Id=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt; UserName=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;TestUser2&amp;#34;&lt;/span&gt; Mail=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;testuser2@domain.com&amp;#34;&lt;/span&gt; Password=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;SeededPassword2&amp;#34;&lt;/span&gt;&amp;gt;
      &amp;lt;Role&amp;gt;TestRole1&amp;lt;/Role&amp;gt;
    &amp;lt;/UpdateStep&amp;gt;
    &lt;span style=&#34;color:#008000&#34;&gt;&amp;lt;!-- Delete the seeded role --&amp;gt;&lt;/span&gt;
    &amp;lt;UpdateStep xsi:type=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;upd:AspNetRoleDeleteUpdateStepType&amp;#34;&lt;/span&gt; Id=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;2&amp;#34;&lt;/span&gt; RoleName=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;TestRole2&amp;#34;&lt;/span&gt;/&amp;gt;
    &lt;span style=&#34;color:#008000&#34;&gt;&amp;lt;!-- Delete one of the seeded accounts --&amp;gt;&lt;/span&gt;
    &amp;lt;UpdateStep xsi:type=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;upd:AspNetAccountDeleteUpdateStepType&amp;#34;&lt;/span&gt; Id=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;3&amp;#34;&lt;/span&gt; UserName=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;TestUser1&amp;#34;&lt;/span&gt;/&amp;gt;
  &amp;lt;/Update&amp;gt;
&amp;lt;/upd:Updates&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now let&amp;rsquo;s setup the C# portion which executes the script:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#2b91af&#34;&gt;string&lt;/span&gt; connString = &lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt;; &lt;span style=&#34;color:#008000&#34;&gt;// MsSql connection   
&lt;/span&gt;&lt;span style=&#34;color:#008000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;using&lt;/span&gt; (UpdateContext context = &lt;span style=&#34;color:#00f&#34;&gt;new&lt;/span&gt; UpdateContext())
{
    context.LoadExtensions();
    context.InitializeDatabaseService(connString);

    Updater updater = &lt;span style=&#34;color:#00f&#34;&gt;new&lt;/span&gt; Updater(context);
    updater.ExecuteXmlFromConfig();
}
Console.WriteLine(&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;Can login as TestUser2: &amp;#34;&lt;/span&gt; + Membership.Provider.ValidateUser(&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;Testuser2&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;SeededPassword2&amp;#34;&lt;/span&gt;));
Console.WriteLine(&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;Can login as TestUser2: &amp;#34;&lt;/span&gt; + Membership.Provider.ValidateUser(&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;testuser2&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;InvalidPassword&amp;#34;&lt;/span&gt;));
Console.WriteLine(&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;Is user testuser2 in role testrole1: &amp;#34;&lt;/span&gt; + Roles.Provider.IsUserInRole(&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;testuser2&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;testrole1&amp;#34;&lt;/span&gt;));
Console.WriteLine(&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;Is user testuser2 in role testrole2: &amp;#34;&lt;/span&gt; + Roles.Provider.IsUserInRole(&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;testuser2&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;testrole2&amp;#34;&lt;/span&gt;));&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And appropriate App.Config portion:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#00f&#34;&gt;&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;utf-8&amp;#34;?&amp;gt;&lt;/span&gt;
&amp;lt;configuration&amp;gt;
  &amp;lt;configSections&amp;gt;
    &amp;lt;section name=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;dbkeeper.net&amp;#34;&lt;/span&gt; type=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;DbKeeperNet.Engine.DbKeeperNetConfigurationSection,DbKeeperNet.Engine&amp;#34;&lt;/span&gt;/&amp;gt;
  &amp;lt;/configSections&amp;gt;
  &amp;lt;dbkeeper.net loggingService=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;fx&amp;#34;&lt;/span&gt;&amp;gt;
    &amp;lt;updateScripts&amp;gt;
&lt;span style=&#34;color:#008000&#34;&gt;&amp;lt;!-- This is the location of the DB Upgrade script - we use an embedded resource --&amp;gt;&lt;/span&gt;
      &amp;lt;add provider=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;asm&amp;#34;&lt;/span&gt; location=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;DbKeeperNet.AspNetMembershipDemo.DatabaseSetup.xml,DbKeeperNet.AspNetMembershipDemo&amp;#34;&lt;/span&gt; /&amp;gt;
    &amp;lt;/updateScripts&amp;gt;
    &amp;lt;databaseServiceMappings&amp;gt;
      &amp;lt;add connectString=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt; databaseService=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;MsSql&amp;#34;&lt;/span&gt; /&amp;gt;
    &amp;lt;/databaseServiceMappings&amp;gt;
  &amp;lt;/dbkeeper.net&amp;gt;
  &amp;lt;connectionStrings&amp;gt;
    &lt;span style=&#34;color:#008000&#34;&gt;&amp;lt;!-- Change this to correct absolute path for the demo or to an actual database --&amp;gt;&lt;/span&gt;
    &amp;lt;add name=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt; connectionString=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;Data Source=.\SQLEXPRESS;AttachDbFilename=&amp;#39;C:\Users\voloda\MyRoot\Development\GIT\DbKeeperNet\DbKeeperNet\Demos\DbKeeperNet.AspNetMembershipDemo\bin\Debug\DbKeeperNetAspNetMembershipDemo.mdf&amp;#39;;Integrated Security=True;Connect Timeout=30;User Instance=True;Initial catalog=DbKeeperNetAspNetMembershipDemo&amp;#34;&lt;/span&gt; providerName=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;System.Data.SqlClient&amp;#34;&lt;/span&gt;/&amp;gt;
  &amp;lt;/connectionStrings&amp;gt;
&lt;span style=&#34;color:#008000&#34;&gt;&amp;lt;!-- Let&amp;#39;s enable MSSQL membership providers --&amp;gt;&lt;/span&gt;
  &amp;lt;system.web&amp;gt;
    &amp;lt;membership defaultProvider=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;AspNetSqlMembershipProvider&amp;#34;&lt;/span&gt;&amp;gt;
      &amp;lt;providers&amp;gt;
        &amp;lt;clear/&amp;gt;
        &amp;lt;add name=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;AspNetSqlMembershipProvider&amp;#34;&lt;/span&gt; type=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;System.Web.Security.SqlMembershipProvider, System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a&amp;#34;&lt;/span&gt; connectionStringName=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt; enablePasswordRetrieval=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;false&amp;#34;&lt;/span&gt; enablePasswordReset=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt; requiresQuestionAndAnswer=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;false&amp;#34;&lt;/span&gt; requiresUniqueEmail=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;false&amp;#34;&lt;/span&gt; passwordFormat=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;Hashed&amp;#34;&lt;/span&gt; maxInvalidPasswordAttempts=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;5&amp;#34;&lt;/span&gt; minRequiredPasswordLength=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;6&amp;#34;&lt;/span&gt; minRequiredNonalphanumericCharacters=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt; passwordAttemptWindow=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;10&amp;#34;&lt;/span&gt; passwordStrengthRegularExpression=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; applicationName=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;/&amp;gt;
      &amp;lt;/providers&amp;gt;
    &amp;lt;/membership&amp;gt;
    &amp;lt;roleManager enabled=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt; defaultProvider=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;AspNetSqlRoleProvider&amp;#34;&lt;/span&gt;&amp;gt;
      &amp;lt;providers&amp;gt;
        &amp;lt;clear/&amp;gt;
        &amp;lt;add connectionStringName=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt; applicationName=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt; name=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;AspNetSqlRoleProvider&amp;#34;&lt;/span&gt; type=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;System.Web.Security.SqlRoleProvider, System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a&amp;#34;&lt;/span&gt;/&amp;gt;
      &amp;lt;/providers&amp;gt;
    &amp;lt;/roleManager&amp;gt;
    &amp;lt;profile enabled=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;false&amp;#34;&lt;/span&gt;&amp;gt;
      &amp;lt;providers&amp;gt;
        &amp;lt;clear/&amp;gt;
      &amp;lt;/providers&amp;gt;
    &amp;lt;/profile&amp;gt;
  &amp;lt;/system.web&amp;gt;
&amp;lt;/configuration&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&#34;references&#34;&gt;References&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://drive.google.com/file/d/0B27zqy23aL3BblVFNGJPdF9XVXM/view?usp=sharing&#34;&gt;Demo project download&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://github.com/DbKeeperNet/DbKeeperNet&#34;&gt;DbKeeperNet&lt;/a&gt; project (contains also some demo projects)&lt;/li&gt;
&lt;li&gt;DbKeeperNet &lt;a href=&#34;http://www.codeproject.com/Articles/42091/DBKeeperNet-Keeps-Your-DB-Schema-Up-to-date&#34;&gt;article&lt;/a&gt; on Codeproject&lt;/li&gt;
&lt;li&gt;Nuget packages

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.nuget.org/packages/DbKeeperNet/&#34;&gt;https://www.nuget.org/packages/DbKeeperNet/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.nuget.org/packages/DbKeeperNet.Extensions.MsSqlMembershipAndRolesSetup/&#34;&gt;https://www.nuget.org/packages/DbKeeperNet.Extensions.MsSqlMembershipAndRolesSetup/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;history&#34;&gt;History&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Initial version&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Using CVS as source control for Sybase PowerBuilder</title>
      <link>http://voloda.bazilisek.net/2010/05/using-cvs-as-source-control-for-sybase-powerbuilder/</link>
      <pubDate>Sat, 15 May 2010 00:00:00 +0000</pubDate>
      
      <guid>http://voloda.bazilisek.net/2010/05/using-cvs-as-source-control-for-sybase-powerbuilder/</guid>
      <description>

&lt;p&gt;This article in short describes, how to use CVS for Powerbuilder. This solution we are using for about 6 years and it works very good.&lt;/p&gt;

&lt;h1 id=&#34;pbl-problems&#34;&gt;PBL problems&lt;/h1&gt;

&lt;p&gt;The main difficulty of the Sybase Power Builder is in PBL libraries. PBL libraries are binary libraries containing both - sources and precompiled sources. This solution causes many problems:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;PBLs are also very inclinable to faults (in Power Builder 7 it was not very surprissing that after fullrebuild failure were PBLs completely broken).&lt;/li&gt;
&lt;li&gt;Object sources saved in PBLs are not easily comparable.&lt;/li&gt;
&lt;li&gt;Also built-in support for inefficience (sources are checked-out to temporary PBL library, offline access is not very comfortable etc).&lt;/li&gt;
&lt;li&gt;In the case of multiple developers working on the same project this causes many problems with sources synchronization (you can use many utilities, but it was always hell after one week track all changes and put them together - it tooks for about half a day per week and it was quiet often, that some changes were lost).&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;solution&#34;&gt;Solution&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Use CVS as source control (use can use both *nix or Windows solution).&lt;/li&gt;
&lt;li&gt;Use TortoiseCVS (or any other free CVS GUI clients) for access to sources.&lt;/li&gt;
&lt;li&gt;Use Winmerge or any other free utility for sources differencies comparison.&lt;/li&gt;
&lt;li&gt;Export all sources into CVS project source tree (the best way is to export every PBL library into the separate directory in the CVS source tree).&lt;/li&gt;
&lt;li&gt;On building machine use PowerGen for project compilation and PBLs restore. In each build you can take your PBLs from the scratch (PowerGen can resolve all dependecies between objects and import them back into PBLs in the correct order).&lt;/li&gt;
&lt;li&gt;Every developer takes fresh PBLs after every build.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;editing-sources&#34;&gt;Editing sources&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Every developer can take fresh PBLs generated by PowerGen after build.&lt;/li&gt;
&lt;li&gt;Before change perform Update command on existing object.&lt;/li&gt;
&lt;li&gt;Import this object from CVS sandbox into your work PBL (replacing existing one).&lt;/li&gt;
&lt;li&gt;Perform any required changes.&lt;/li&gt;
&lt;li&gt;Export modified object from working PBL to the CVS sandbox.&lt;/li&gt;
&lt;li&gt;Execute Commit command on the exported object in CVS sandbox, provide proper comment and send it to the CVS source control.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;benefits&#34;&gt;Benefits&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;All sources are stored in plain text (including datawindows).&lt;/li&gt;
&lt;li&gt;All changes are simply trackable (from Power Builder 9 (?8?) this works much better, because in previous versions Power Builder changes order of methods on every save) - at least you know who and why made the change.&lt;/li&gt;
&lt;li&gt;You can simply resolve any conflicts (no more hell with sharing and synchronizing PBLs between developers).&lt;/li&gt;
&lt;li&gt;PBLs cann&amp;rsquo;t contain any old errors from rebuilding etc.&lt;/li&gt;
&lt;li&gt;You can also connect additional actions to every souce file commit/checkout/tag and automatically connect those into other company systems.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can also use tags and branches for tracking your builds.&lt;/p&gt;

&lt;h1 id=&#34;links&#34;&gt;Links&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.tortoisecvs.org/&#34;&gt;TortoiseCVS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://winmerge.org/&#34;&gt;WinMerge&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://en.wikipedia.org/wiki/PowerBuilder&#34;&gt;Sybase Power Builder on Wiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.ecrane.com/&#34;&gt;PowerGen&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Using SVN as source control for Sybase PowerBuilder</title>
      <link>http://voloda.bazilisek.net/2010/05/using-svn-as-source-control-for-sybase-powerbuilder/</link>
      <pubDate>Sat, 15 May 2010 00:00:00 +0000</pubDate>
      
      <guid>http://voloda.bazilisek.net/2010/05/using-svn-as-source-control-for-sybase-powerbuilder/</guid>
      <description>

&lt;p&gt;This article in short describes an idea how to use SVN for Powerbuilder to improve development process. This solution is based on previously used CVS (described in another &lt;a href=&#34;http://voloda.bazilisek.net/2010/05/using-cvs-as-source-control-for-sybase-powerbuilder/&#34;&gt;article&lt;/a&gt;).&lt;br /&gt;
CVS we were are using for about 6 years and it was working perfectly.&lt;br /&gt;
But currently we have to change hardware and operating system it was running on, so we decided to move forward and use a bit better but still free solution - SVN running on Windows.&lt;/p&gt;

&lt;h1 id=&#34;pbl-problems&#34;&gt;PBL problems&lt;/h1&gt;

&lt;p&gt;The main difficulty of the Sybase Power Builder is in PBL libraries. PBL libraries are binary libraries containing both - sources and precompiled sources.&lt;br /&gt;
This solution causes many problems:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;PBLs are also very inclinable to faults (in Power Builder 7 it was not very surprising that after fullrebuild failure were PBLs completely broken).&lt;/li&gt;
&lt;li&gt;Object sources saved in PBLs are not easily comparable.&lt;/li&gt;
&lt;li&gt;Also built-in support for inefficiency (sources are checked-out to temporary PBL library, offline access is not very comfortable etc.).&lt;/li&gt;
&lt;li&gt;In the case of multiple developers working on the same project this causes many problems with sources synchronization (you can use many utilities, but it was always hell after one week track all changes and put them together - it took for about half a day per week and it was quiet often, that some changes were lost).&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;solution&#34;&gt;Solution&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Use SVN as source control (you can use both *nix or Windows platform).&lt;/li&gt;
&lt;li&gt;Use TortoiseSVN (or any other free SVN GUI clients) for access to sources.&lt;/li&gt;
&lt;li&gt;Use Winmerge or any other free utility for sources differencies comparison.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Export all sources into SVN project source tree (the best way is to export every PBL library into the separate directory in the SVN source tree).&lt;/li&gt;
&lt;li&gt;On building machine use PowerGen for project compilation and PBLs restore. In each build you can take your PBLs from the scratch (PowerGen can resolve all dependecies between objects and import them back into PBLs in the correct order).&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Every developer takes fresh PBLs after every build.&lt;/li&gt;
&lt;li&gt;Use existing Windows Domain authentication for access to SVN server.&lt;/li&gt;
&lt;li&gt;Integrate with current project management system.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;svn-server-setup-on-windows&#34;&gt;SVN server setup on Windows&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Download &lt;a href=&#34;http://www.apache.org/&#34;&gt;Apache 2.2&lt;/a&gt; installation MSI and install it (any examples will reffer to the default location)&lt;/li&gt;
&lt;li&gt;Install module &lt;a href=&#34;http://sourceforge.net/projects/mod-auth-sspi&#34;&gt;mod_auth_sspi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Download and install &lt;a href=&#34;http://www.blogger.com/post-edit.g?blogID=2152854310850949660&amp;amp;postID=7977943162963394741&#34;&gt;SVN&lt;/a&gt;. You have to choose correct version for Apache 2.2. I suggest to use MSI installation package, because it will setup all required paths etc.&lt;/li&gt;
&lt;li&gt;Setup new SVN repository (&lt;code&gt;svnadmin create c:/svnroot&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Restart computer, if necessary.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;apache-2-2-example-configuration&#34;&gt;Apache 2.2 example configuration&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;LoadModule dav_svn_module modules/mod_dav_svn.so
LoadModule authz_svn_module modules/mod_authz_svn.so
LoadModule sspi_auth_module modules/mod_auth_sspi.so

&amp;lt;location svn=&amp;quot;&amp;quot;&amp;gt;
   DAV svn
   SVNPath c:/svnroot

   AuthName &amp;quot;SVN Access&amp;quot;
   AuthType SSPI
   SSPIAuth on
   SSPIAuthoritative on
   SSPIOfferBasic on
   SSPIDomain ourdom.ourcompany
   require group &amp;quot;ourdom\development&amp;quot;
&amp;lt;/location&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;svn-repository-organization&#34;&gt;SVN repository organization&lt;/h1&gt;

&lt;p&gt;The SVN repository is organized a bit differently than in CVS. You can definitely find more details on Google. Below are only some details.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Each project consist of three subfolders, no sources should be commited directly under project name folder.&lt;/li&gt;
&lt;li&gt;branching code means that you made a repository copy to a branch folder.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;trunk&lt;/strong&gt; folder - contains sources of the main branch.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;branches&lt;/strong&gt; folder - contains branch folders for branch copies.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;tags&lt;/strong&gt; folder - contains branch folders for tag copies.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;sample-svn-repository-structure&#34;&gt;Sample SVN repository structure&amp;gt;&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;MyProject
  +-- trunk
  +-- branches
     +-- fixes-1.3
     +-- fixes-1.5
  +-- tags
     +-- build-1.3.1
     +-- build-1.3.2
     +-- build-1.5.1
     +-- build-1.6.1
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;editing-sources&#34;&gt;Editing sources&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Every developer can take fresh PBLs generated by PowerGen after build.&lt;/li&gt;
&lt;li&gt;Before change perform Update command on existing object.&lt;/li&gt;
&lt;li&gt;Import this object from SVN sandbox into your work PBL (replacing existing one).&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Perform any required changes.&lt;/li&gt;
&lt;li&gt;Export modified object from working PBL to the SVN sandbox.&lt;/li&gt;
&lt;li&gt;Execute Commit command on the exported object in SVN sandbox, provide proper comment and send it to the SVN source control.&lt;/li&gt;
&lt;li&gt;You can also (and I strongly suggest this) perform commit on the entire SVN sandbox - this will send all modified files at once as single transaction. In history you can later see all files checked in as single commit.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;benefits&#34;&gt;Benefits&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;All sources are stored in plain text (including datawindows).&lt;/li&gt;
&lt;li&gt;All changes are simply trackable (from Power Builder 9 (?8?) this works much better, because in previous versions Power Builder changes order of methods on every save) - at least you know who and why made the change.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;You can simply resolve any conflicts (no more hell with sharing and synchronizing PBLs between developers).&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;PBLs can&amp;rsquo;t contain any old errors from rebuilding etc.&lt;/li&gt;
&lt;li&gt;You can also connect additional actions to every souce file commit/checkout/tag and automatically connect those into other company systems.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;You can also use tags and branches for tracking your builds.&lt;/li&gt;
&lt;li&gt;SVN checkins are tracked as transactions, in history you can directly see all files related to the commit.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;project-management-system-integration&#34;&gt;Project Management System Integration&lt;/h1&gt;

&lt;p&gt;I found project CaptainHook on SourceForge which allows exactly what I wanted - creation of SVN server hooks using .NET code. So I made two simple plugins to it:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;One which disallows commiting changes to the tag folder.&lt;/li&gt;
&lt;li&gt;Second which tooks commit messages formatted same way as in CVS which exports information to the proprietaty project management system.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;cvs-to-svn-migration&#34;&gt;CVS to SVN migration&lt;/h1&gt;

&lt;p&gt;There are plenty of tools available for the repository migration from CVS to SVN. We have migrated a repository which had almost 1GB in CVS without any problems to our new SVN source control including tags and branches including the whole history of changes. Migration was running for about 12 hours.&lt;/p&gt;

&lt;h1 id=&#34;links&#34;&gt;Links&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.tortoisesvn.org/&#34;&gt;TortoiseSVN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://winmerge.org/&#34;&gt;WinMerge&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://en.wikipedia.org/wiki/PowerBuilder&#34;&gt;Sybase Power Builder on Wiki&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.ecrane.com/&#34;&gt;PowerGen&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://voloda.bazilisek.net/2010/06/using-cvs-as-source-control-with-sybase.html&#34;&gt;CVS and PowerBuilder&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://sourceforge.net/projects/captainhook/&#34;&gt;CaptainHook&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.apache.org/&#34;&gt;Apache&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://sourceforge.net/projects/mod-auth-sspi&#34;&gt;mod_auth_sspi&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
