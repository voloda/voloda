<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on My personal notes</title>
    <link>/post/</link>
    <description>Recent content in Posts on My personal notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 25 Oct 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Jenkinsfile Sample Utilizing Docker Slave Agent</title>
      <link>/2017/10/jenkinsfile-sample-utilizing-docker-slave-agent/</link>
      <pubDate>Wed, 25 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/10/jenkinsfile-sample-utilizing-docker-slave-agent/</guid>
      <description>pipeline { agent none environment { RELEASE_NUMBER = &#39;17.1.1&#39; VERSION_NUMBER = VersionNumber(versionNumberString: &#39;17.1.1.${BUILDS_ALL_TIME}&#39;) } stages { stage(&#39;Checkout from GIT&#39;){ agent any steps { script { currentBuild.displayName = &amp;quot;#${VERSION_NUMBER}&amp;quot; } checkout scm } } stage(&#39;NUGET package restore&#39;) { agent { label &#39;nuget&#39; } steps { echo &#39;Restoring nuget packages&#39; bat &#39;&amp;quot;%NUGET_PATH%&amp;quot; restore TestSolution.sln&#39; dir (&#39;.&#39;) { stash &#39;sources&#39; } } } stage(&#39;Build&#39;) { agent { label &#39;dotNET_4.7&#39;} steps { dir (&#39;.&#39;) { unstash &#39;sources&#39; } bat &amp;quot;\&amp;quot;${tool name: &#39;Default&#39;, type: &#39;msbuild&#39;}\\msbuild.</description>
    </item>
    
    <item>
      <title>Jenkins Server Setup On Windows</title>
      <link>/2017/10/jenkins-server-setup-on-windows/</link>
      <pubDate>Tue, 17 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/10/jenkins-server-setup-on-windows/</guid>
      <description>Jenkinks server setup Server setup  See http://jenkinks.io/download Open http://localhost:8080/  Slave setup  Install Chocolatey (see instructions on web) Install Google Chrome  choco install -y googlechrome  Install Java  choco install -y javaruntime  Install git  choco install -y git /NoShellIntegration  VS2017 build Tools  choco install -y visualstudio2017buildtools  Installing packages after the service start may require service restart Login to master via Chrome Configure Global Security and setup TCP port for JNLP agents Add new Node 17 Download the java file and run it  In menu it allows to Install Windows Service This may need to change the Jenkinks server URL in settings  Setup labels to distribute load across nodes conditionally  Tools  Chrome  https://dl.</description>
    </item>
    
    <item>
      <title>Jenkins Docker Slave Windows Build Agent</title>
      <link>/2017/10/jenkins-docker-slave-windows-build-agent/</link>
      <pubDate>Sun, 15 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>/2017/10/jenkins-docker-slave-windows-build-agent/</guid>
      <description>Jenkins docker slave  Use Yet Another Docker Plugin  Docker Plugin doesn&amp;rsquo;t work  Install JAVA into docker image and make it available on PATH In Configuration add Yet Another Docker Plugin as a cloud  Point it to Docker server Test that it is available Add the docker image Add label which can be references from builds  Jenkins now automatically creates a docker container  It does not require any additional changes  For local images make sure that the Pull option is set to Never  Sample Dockerfile FROM microsoft/windowsservercore SHELL [&amp;quot;powershell.</description>
    </item>
    
    <item>
      <title>Chocolatey setup on DEV machine &#43; useful packages</title>
      <link>/notes/chocolatey/setup-on-dev-machine-and-useful-packages/</link>
      <pubDate>Wed, 04 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>/notes/chocolatey/setup-on-dev-machine-and-useful-packages/</guid>
      <description> Upgrade all packages  choco outdated  List available upgrades  cup all -y  List local Packages  chocolatey list -localonly  Packages choco install -y git --params=&#39;/NoShellIntegration&#39; choco install -y poshgit choco install -y gittfs choco install -y far choco install -y atom choco install -y chefdk choco install -y winmerge  </description>
    </item>
    
    <item>
      <title>Visual Studio 2012 debugger does not break after attaching to C#/.NET process</title>
      <link>/2014/12/visual-studio-2012-debugger-does-not-break-after-attaching-to-csharp-dotnet-process/</link>
      <pubDate>Thu, 18 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>/2014/12/visual-studio-2012-debugger-does-not-break-after-attaching-to-csharp-dotnet-process/</guid>
      <description>I had from time to time issue debug C#/.NET applications in Visual Studio 2012 after attaching Visual Studio 2012 debugger to a process.
Symptoms were that the debugger attached to the process but neither &amp;lsquo;Break All&amp;rsquo; worked. The same applied for any preset breakpoint.
For some time I thought that Visual Studio installation for somehow corrupted on my system but since I was always able to workaround it via Debug.Assert() or Debugger.</description>
    </item>
    
    <item>
      <title>How to release unmanaged library loaded into managed .NET code</title>
      <link>/2014/12/how-to-release-unmanaged-library-loaded-into-managed-dotnet-code/</link>
      <pubDate>Wed, 03 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>/2014/12/how-to-release-unmanaged-library-loaded-into-managed-dotnet-code/</guid>
      <description>Motivation I had found this article on how to release DLL library already loaded into the process using P-Invoke. It uses LoadLibrary() and FreeLibrary() WINAPI calls to achieve this.
And what is wrong with it?
It forces to unload ALL instances of the DLL library currently loaded within process. Which means, that in the case you have more than one instance of the class using these external functions ALL these will stop working!</description>
    </item>
    
    <item>
      <title>Unity Registration Validator</title>
      <link>/2014/11/unity-registration-validator/</link>
      <pubDate>Tue, 25 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>/2014/11/unity-registration-validator/</guid>
      <description>Microsoft Unity Extension which verifies registrations between parent and child containers. This is mainly issue when you accidently inject a dependency from a child container to the parent container while using ContainerControlledLifetimeManager (singleton).
Introduction When using Microsoft Unity IoC container you may face some weird issues when dealing with &amp;lsquo;singletons&amp;rsquo; (ContainerControlledLifetimeManager) and child containers. It may or may not be what you expected.
Let&amp;rsquo;s consider following classes:
public interface IServiceDependency { } public interface IService { } public class ServiceDependency : IServiceDependency { private readonly string _dep1; public ServiceDependency(string dep1) { _dep1 = dep1; } } public class Service : IService { private readonly IServiceDependency _dependency; public Service(IServiceDependency dependency) { _dependency = dependency; } } Now let&amp;rsquo;s setup some test case:</description>
    </item>
    
  </channel>
</rss>