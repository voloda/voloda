<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>2017 on My personal notes on various topics</title>
    <link>https://voloda.bazilisek.net/year/2017/</link>
    <description>Recent content in 2017 on My personal notes on various topics</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>(c) 2010-2019 Vladimir Kloz</copyright>
    <lastBuildDate>Wed, 20 Dec 2017 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://voloda.bazilisek.net/year/2017/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>How to create Docker build agent image with SDK installed from MSI</title>
      <link>https://voloda.bazilisek.net/2017/12/how-to-create-docker-build-agent-image-with-sdk-installed-from-msi/</link>
      <pubDate>Wed, 20 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://voloda.bazilisek.net/2017/12/how-to-create-docker-build-agent-image-with-sdk-installed-from-msi/</guid>
      <description>

&lt;p&gt;When creating build agent docker image usually you need to install SDKs
from MSI (like Infragistic, DevExpress, Active Reports etc.).&lt;/p&gt;

&lt;p&gt;There are couple of challenges here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Windows Docker doesn&amp;rsquo;t support UI.&lt;/li&gt;
&lt;li&gt;Also very often you have to populate UI with values.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For this purpose MSI supports so called unattended installs.&lt;/p&gt;

&lt;p&gt;For input values you can pass those as parameters to MSI on command line.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s assume that we want to install SDK like Infragistic.&lt;/p&gt;

&lt;h1 id=&#34;how-to-find-out-msi-command-line&#34;&gt;How to find out MSI command line&lt;/h1&gt;

&lt;h2 id=&#34;use-msi-logging&#34;&gt;Use MSI logging&lt;/h2&gt;

&lt;p&gt;First run the SDK MSI from command line on a sandbox PC so it produced
installation log:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;msiexec /i NetAdvantage_WinForms_20112.msi /L*V infragistic.log
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now follow the installation&lt;/p&gt;

&lt;p&gt;Now looks into generated &lt;code&gt;infragistic.log&lt;/code&gt; file and look for values you entered.&lt;/p&gt;

&lt;p&gt;Piece of log file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;...
Action 20:16:29: ExecuteAction.
Action start 20:16:29: ExecuteAction.
MSI (c) (A4:F0) [20:16:29:526]: PROPERTY CHANGE: Adding SECONDSEQUENCE property. Its value is &#39;1&#39;.
MSI (c) (A4:F0) [20:16:29:535]: Grabbed execution mutex.
MSI (c) (A4:F0) [20:16:29:535]: Incrementing counter to disable shutdown. Counter after increment: 0
MSI (c) (A4:F0) [20:16:29:535]: Switching to server: COMMON_DOCUMENTS_LOC=&amp;quot;C:\Users\Public\Documents&amp;quot; USER_DOCUMENTS_LOC=&amp;quot;C:\Users\voloda\Documents&amp;quot; INSTALLDIR=&amp;quot;C:\Program Files (x86)\Infragistics\&amp;quot; AGREE_AND_INSTALL_OFFICE_2007_UI=&amp;quot;No&amp;quot; INSTALL_SERIALNUM=&amp;quot;1234&amp;quot; COMMONDOCUMENTS=&amp;quot;C:\CommonDocuments\&amp;quot; TARGETDIR=&amp;quot;C:\Program Files (x86)\Infragistics\&amp;quot; ALLUSERS=&amp;quot;1&amp;quot; DOTNETV4=&amp;quot;1&amp;quot; IGSHORTCUTDIR=&amp;quot;C:\Users\voloda\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Infragistics\&amp;quot; INSTALLDIR.B2768727_084D_4283_A045_7A86BAF639DC=&amp;quot;C:\Windows\SysWOW64\GAC\&amp;quot; INSTALLDIR.4ED14E0A_AECA_4FCD_BEF6_35F299C4270E=&amp;quot;C:\Windows\SysWOW64\UltimateKeys\&amp;quot; _INSTALL_PROD_CODE=&amp;quot;48&amp;quot; INSTALLDIR.D348289C_580E_44C6_A617_A90FC315DB7D=&amp;quot;C:\Windows\SysWOW64\UltimateKeys\&amp;quot; INSTALLDIR.52DB8F59_5C03_491A_99D2_1A0565A67FD2=&amp;quot;C:\Windows\SysWOW64\UltimateKeys\&amp;quot; INSTALLDIR.96F9412E_4A28_4BF2_B6B7_66F921C4BE3C=&amp;quot;C:\Windows\SysWOW64\UltimateKeys\&amp;quot; INSTALLDIR.7295D7F7_BBA6_41D4_8E45_780AD1F07B46=&amp;quot;C:\Windows\SysWOW64\UltimateKeys\&amp;quot; CURRENTDIRECTORY=&amp;quot;C:\Users\voloda\docker-tests\windows-nbo&amp;quot; CLIENTUILEVEL=&amp;quot;0&amp;quot; CLIENTPROCESS
MSI (s) (F0:94) [20:16:29:547]: Running installation inside multi-package transaction C:\Users\voloda\docker-tests\windows-nbo\NetAdvantage_WinForms_20112.msi
MSI (s) (F0:94) [20:16:29:547]: Grabbed execution mutex.
MSI (s) (F0:C8) [20:16:29:579]: Resetting cached policy values
MSI (s) (F0:C8) [20:16:29:579]: Machine policy value &#39;Debug&#39; is 0
MSI (s) (F0:C8) [20:16:29:579]: ******* RunEngine:
           ******* Product: C:\Users\voloda\docker-tests\windows-nbo\NetAdvantage_WinForms_20112.msi
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Keep in mind that for example passwords, serial numbers etc. might be in the log
masked so you need to be a bit inventive to find all important values.&lt;/p&gt;

&lt;p&gt;General suggestion for MSI is that any properties which have upper-case names
should be available on command line.&lt;/p&gt;

&lt;p&gt;MSI properties seems to be specified here:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;MSI (c) (A4:F0) [20:16:29:535]: Switching to server: COMMON_DOCUMENTS_LOC=&amp;quot;C:\Users\Public\Documents&amp;quot; USER_DOCUMENTS_LOC=&amp;quot;C:\Users\voloda\Documents&amp;quot; INSTALLDIR=&amp;quot;C:\Program Files (x86)\Infragistics\&amp;quot; AGREE_AND_INSTALL_OFFICE_2007_UI=&amp;quot;No&amp;quot; INSTALL_SERIALNUM=&amp;quot;1234&amp;quot; COMMONDOCUMENTS=&amp;quot;C:\CommonDocuments\&amp;quot; TARGETDIR=&amp;quot;C:\Program Files (x86)\Infragistics\&amp;quot; ALLUSERS=&amp;quot;1&amp;quot; DOTNETV4=&amp;quot;1&amp;quot; IGSHORTCUTDIR=&amp;quot;C:\Users\voloda\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Infragistics\&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For Infragistic and my build agent I am interested in following entries:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;INSTALL_SERIALNUM&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;AGREE_AND_INSTALL_OFFICE_2007_UI&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;use-orca-editor&#34;&gt;Use Orca editor&lt;/h2&gt;

&lt;p&gt;Microsoft provides as a part of MSI SDK &lt;code&gt;Orca.exe&lt;/code&gt; which allows to edit MSI database.&lt;/p&gt;

&lt;p&gt;Following the above rule about upper-case names you can find properties which
can be specified on command line.&lt;/p&gt;

&lt;p&gt;This can be actually easier but requires MSI SDK with &lt;code&gt;Orca.exe&lt;/code&gt; installed.&lt;/p&gt;

&lt;h1 id=&#34;dockerfile&#34;&gt;Dockerfile&lt;/h1&gt;

&lt;p&gt;Once we know parameters we can just update the &lt;code&gt;Dockerfile&lt;/code&gt; so it copies SDK
to the image and then executes unattended installation the SDK including the
license (or whatever details you need).&lt;/p&gt;

&lt;p&gt;In this case we specify the license number (&lt;code&gt;INSTALL_SERIALNUM=1234&lt;/code&gt;) and
bunch of other properties.&lt;/p&gt;

&lt;p&gt;The example below ensures that during building the image we wait until the
installation process finishes.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-dockerfile&#34; data-lang=&#34;dockerfile&#34;&gt;COPY NetAdvantage_WinForms_20112.msi &lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;C:\\&amp;#34;&lt;/span&gt;&lt;span style=&#34;&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;RUN&lt;/span&gt; $ErrorActionPreference = &lt;span style=&#34;color:#a31515&#34;&gt;&amp;#39;Stop&amp;#39;&lt;/span&gt;; &lt;span style=&#34;color:#a31515&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#a31515&#34;&gt;&lt;/span&gt;    $VerbosePreference = &lt;span style=&#34;color:#a31515&#34;&gt;&amp;#39;Continue&amp;#39;&lt;/span&gt;; &lt;span style=&#34;color:#a31515&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#a31515&#34;&gt;&lt;/span&gt;    Start-Process -Wait -PassThru -FilePath c:&lt;span style=&#34;color:#a31515&#34;&gt;\w&lt;/span&gt;indows&lt;span style=&#34;color:#a31515&#34;&gt;\s&lt;/span&gt;ystem32&lt;span style=&#34;color:#a31515&#34;&gt;\m&lt;/span&gt;siexec.exe -ArgumentList &lt;span style=&#34;color:#a31515&#34;&gt;&amp;#39;/i c:\\NetAdvantage_WinForms_20112.msi  /q /l* c:\\infragistic.log INSTALL_SERIALNUM=1234 ALLUSERS=1 AGREE_AND_INSTALL_OFFICE_2007_UI=No&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Is it good idea to throw an exception in .NET C# constructor?</title>
      <link>https://voloda.bazilisek.net/2017/12/is-it-good-idea-to-throw-an-exception-in-dotnet-csharp-constructor/</link>
      <pubDate>Mon, 11 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://voloda.bazilisek.net/2017/12/is-it-good-idea-to-throw-an-exception-in-dotnet-csharp-constructor/</guid>
      <description>

&lt;p&gt;I got reminded recently about two cases why it may be actually a bad idea to
do a complex initialization in a class constructor in C#.&lt;/p&gt;

&lt;p&gt;All the code samples below are written just for the purpose of this post but
are based on real code I either written or came across at some point.&lt;/p&gt;

&lt;h1 id=&#34;case-1-instance-resolved-via-an-ioc-container&#34;&gt;Case 1 - instance resolved via an IoC container&lt;/h1&gt;

&lt;p&gt;Recently I was facing an issue that application started but remained non-functional.&lt;/p&gt;

&lt;p&gt;I quickly found following stack trace in the log file.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Unity.Exceptions.ResolutionFailedException: Resolution of the dependency failed, type = &#39;IMyDataReader&#39;, name = &#39;(none)&#39;.
Exception occurred while: Calling constructor MyDataReader().
Exception is: AggregateException - One or more errors occurred.
-----------------------------------------------
At the time of the exception, the container was:
  Resolving MyDataReader,(none) (mapped from IMyDataReader, (none))
  Calling constructor MyDataReader()
 ---&amp;gt; System.AggregateException: One or more errors occurred. ---&amp;gt; System.Net.Http.HttpRequestException: An error occurred while sending the request. ---&amp;gt; System.Net.WebException: Unable to connect to the remote server ---&amp;gt; System.Net.Sockets.SocketException: No connection could be made because the target machine actively refused it 127.0.0.1:1234
   at System.Net.Sockets.Socket.EndConnect(IAsyncResult asyncResult)
   at System.Net.ServicePoint.ConnectSocketInternal(Boolean connectFailure, Socket s4, Socket s6, Socket&amp;amp; socket, IPAddress&amp;amp; address, ConnectSocketState state, IAsyncResult asyncResult, Exception&amp;amp; exception)
   --- End of inner exception stack trace ---
   at System.Net.HttpWebRequest.EndGetResponse(IAsyncResult asyncResult)
   at System.Net.Http.HttpClientHandler.GetResponseCallback(IAsyncResult ar)
   --- End of inner exception stack trace ---
   --- End of inner exception stack trace ---
   at System.Threading.Tasks.Task`1.GetResultCore(Boolean waitCompletionNotification)
   at MyDataReader..ctor() in C:\Users\vladi\Documents\code\UnityInitializer\UnityInitializer.Tests\RootContainerSetupTest.cs:line 117
   at lambda_method(Closure , IBuilderContext )
   at Unity.ObjectBuilder.BuildPlan.DynamicMethod.DynamicBuildPlanGenerationContext.&amp;lt;&amp;gt;c__DisplayClass16_0.&amp;lt;GetBuildMethod&amp;gt;b__0(IBuilderContext context) in C:\projects\unity\Container\src\ObjectBuilder\BuildPlan\DynamicMethod\DynamicBuildPlanGenerationContext.cs:line 134
   at Unity.ObjectBuilder.Strategies.BuildPlanStrategy.PreBuildUp(IBuilderContext context) in C:\projects\unity\Container\src\ObjectBuilder\Strategies\BuildPlanStrategy.cs:line 36
   at Unity.Container.StrategyChain.BuildUp(IBuilderContext builderContext) in C:\projects\unity\Container\src\Container\StrategyChain.cs:line 54
   at Unity.Policy.BuildPlanPolicyExtensions.ExecuteBuildUp(IBuildPlanPolicy policy, IBuilderContext context) in C:\projects\unity\Abstractions\src\Policy\IBuildPlanPolicy.cs:line 36
   at Unity.UnityContainer.BuildUp(Type typeToBuild, Object existing, String name, ResolverOverride[] resolverOverrides) in C:\projects\unity\Container\src\UnityContainer.cs:line 203
   --- End of inner exception stack trace ---
   at Unity.UnityContainer.BuildUp(Type typeToBuild, Object existing, String name, ResolverOverride[] resolverOverrides) in C:\projects\unity\Container\src\UnityContainer.cs:line 215
   at Unity.UnityContainer.Resolve(Type type, String name, ResolverOverride[] resolverOverrides) in C:\projects\unity\Container\src\UnityContainer.cs:line 163
   at Unity.UnityContainerExtensions.Resolve[T](IUnityContainer container, ResolverOverride[] overrides) in C:\projects\unity\Abstractions\src\Utility\UnityContainerExtensions.cs:line 469
   at T.TT() in C:\Users\vladi\Documents\code\UnityInitializer\UnityInitializer.Tests\RootContainerSetupTest.cs:line 97
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see - the log is pretty cryptic. The source in the end led to
following piece of code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#00f&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#2b91af&#34;&gt;MyDataReader&lt;/span&gt; : IMyDataReader
{
    &lt;span style=&#34;color:#2b91af&#34;&gt;string&lt;/span&gt; _name;
    &lt;span style=&#34;color:#00f&#34;&gt;public&lt;/span&gt; MyDataReader()
    {
        &lt;span style=&#34;color:#2b91af&#34;&gt;var&lt;/span&gt; http = &lt;span style=&#34;color:#00f&#34;&gt;new&lt;/span&gt; HttpClient();
        _name = http.GetStringAsync(&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;http://localhost:1234&amp;#34;&lt;/span&gt;).Result;
    }

    &lt;span style=&#34;color:#00f&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#2b91af&#34;&gt;string&lt;/span&gt; Name { &lt;span style=&#34;color:#00f&#34;&gt;get&lt;/span&gt; { &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; _name; } }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The above idea is pretty clear - load the data from local data service and since
those cannot change just cache them.&lt;/p&gt;

&lt;p&gt;The assumption was that the service is always running (this was, due to the
design, actually a good one - my system just didn&amp;rsquo;t have expected setup yet).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;So what is wrong here?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Well - in this particular case the bad part actually was that the class was registered
in Microsoft Unity IoC container.&lt;/p&gt;

&lt;p&gt;As result upon an instance resolution which is the action running the constructor,
the actual place which throws the exception gets quite hidden and non-obvious
since container doesn&amp;rsquo;t know why the class couldn&amp;rsquo;t be constructed.&lt;/p&gt;

&lt;p&gt;Ultimately the support doesn&amp;rsquo;t have basically any chances to find out the issue
and fix it (which may be just starting the missing service).&lt;/p&gt;

&lt;h2 id=&#34;solution&#34;&gt;Solution&lt;/h2&gt;

&lt;p&gt;In this particular case pretty simple - leave the class initialize and lazy
load the actual data later like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#00f&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#2b91af&#34;&gt;MyDataReader&lt;/span&gt; : IMyDataReader
{
    Lazy&amp;lt;&lt;span style=&#34;color:#2b91af&#34;&gt;string&lt;/span&gt;&amp;gt; _name;
    &lt;span style=&#34;color:#00f&#34;&gt;public&lt;/span&gt; MyDataReader()
    {
        _name = &lt;span style=&#34;color:#00f&#34;&gt;new&lt;/span&gt; Lazy&amp;lt;&lt;span style=&#34;color:#2b91af&#34;&gt;string&lt;/span&gt;&amp;gt;(() =&amp;gt;
        {
            &lt;span style=&#34;color:#2b91af&#34;&gt;var&lt;/span&gt; http = &lt;span style=&#34;color:#00f&#34;&gt;new&lt;/span&gt; HttpClient();
            &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; http.GetStringAsync(&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;http://localhost:1234&amp;#34;&lt;/span&gt;).Result;
        });
    }

    &lt;span style=&#34;color:#00f&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#2b91af&#34;&gt;string&lt;/span&gt; Name { &lt;span style=&#34;color:#00f&#34;&gt;get&lt;/span&gt; { &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; _name.Value; } }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Which leads to much more readable log - and more importantly - &lt;strong&gt;the beginning
of the message points quickly to actual issue&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;System.AggregateException: One or more errors occurred. ---&amp;gt; System.Net.Http.HttpRequestException: An error occurred while sending the request. ---&amp;gt; System.Net.WebException: Unable to connect to the remote server ---&amp;gt; System.Net.Sockets.SocketException: No connection could be made because the target machine actively refused it 127.0.0.1:1234
   at System.Net.Sockets.Socket.EndConnect(IAsyncResult asyncResult)
   at System.Net.ServicePoint.ConnectSocketInternal(Boolean connectFailure, Socket s4, Socket s6, Socket&amp;amp; socket, IPAddress&amp;amp; address, ConnectSocketState state, IAsyncResult asyncResult, Exception&amp;amp; exception)
   --- End of inner exception stack trace ---
   at System.Net.HttpWebRequest.EndGetResponse(IAsyncResult asyncResult)
   at System.Net.Http.HttpClientHandler.GetResponseCallback(IAsyncResult ar)
   --- End of inner exception stack trace ---
   --- End of inner exception stack trace ---
   at System.Threading.Tasks.Task`1.GetResultCore(Boolean waitCompletionNotification)
   at MyDataReader.&amp;lt;&amp;gt;c.&amp;lt;.ctor&amp;gt;b__1_0() in C:\Users\vladi\Documents\code\UnityInitializer\UnityInitializer.Tests\RootContainerSetupTest.cs:line 119
   at System.Lazy`1.CreateValue()
   at System.Lazy`1.LazyInitValue()
   at MyDataReader.get_Name() in C:\Users\vladi\Documents\code\UnityInitializer\UnityInitializer.Tests\RootContainerSetupTest.cs:line 123
   at T.TT() in C:\Users\vladi\Documents\code\UnityInitializer\UnityInitializer.Tests\RootContainerSetupTest.cs:line 97
---&amp;gt; (Inner Exception #0) System.Net.Http.HttpRequestException: An error occurred while sending the request. ---&amp;gt; System.Net.WebException: Unable to connect to the remote server ---&amp;gt; System.Net.Sockets.SocketException: No connection could be made because the target machine actively refused it 127.0.0.1:1234
   at System.Net.Sockets.Socket.EndConnect(IAsyncResult asyncResult)
   at System.Net.ServicePoint.ConnectSocketInternal(Boolean connectFailure, Socket s4, Socket s6, Socket&amp;amp; socket, IPAddress&amp;amp; address, ConnectSocketState state, IAsyncResult asyncResult, Exception&amp;amp; exception)
   --- End of inner exception stack trace ---
   at System.Net.HttpWebRequest.EndGetResponse(IAsyncResult asyncResult)
   at System.Net.Http.HttpClientHandler.GetResponseCallback(IAsyncResult ar)
   --- End of inner exception stack trace ---&amp;lt;---/
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;case-2-working-with-unmanaged-resources&#34;&gt;Case 2 - working with unmanaged resources&lt;/h1&gt;

&lt;p&gt;There is one more interesting scenario to be considered - initializing
unmanaged/disposable resources within the class constructor.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#00f&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; Main()
{
    &lt;span style=&#34;color:#00f&#34;&gt;try&lt;/span&gt;
    {
        &lt;span style=&#34;color:#00f&#34;&gt;using&lt;/span&gt; (&lt;span style=&#34;color:#2b91af&#34;&gt;var&lt;/span&gt; r = &lt;span style=&#34;color:#00f&#34;&gt;new&lt;/span&gt; FReader())
        {

        }
    }
    &lt;span style=&#34;color:#00f&#34;&gt;catch&lt;/span&gt; (Exception ex)
    {
        Console.WriteLine(ex);
    }

    &lt;span style=&#34;color:#00f&#34;&gt;try&lt;/span&gt;
    {
        &lt;span style=&#34;color:#00f&#34;&gt;using&lt;/span&gt; (&lt;span style=&#34;color:#2b91af&#34;&gt;var&lt;/span&gt; r = &lt;span style=&#34;color:#00f&#34;&gt;new&lt;/span&gt; FReader())
        {

        }
    }
    &lt;span style=&#34;color:#00f&#34;&gt;catch&lt;/span&gt; (Exception ex)
    {
        Console.WriteLine(ex);
    }
}

&lt;span style=&#34;color:#00f&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#2b91af&#34;&gt;FReader&lt;/span&gt; : IDisposable
{
    &lt;span style=&#34;color:#00f&#34;&gt;private&lt;/span&gt; Stream _input;

    &lt;span style=&#34;color:#00f&#34;&gt;public&lt;/span&gt; FReader()
    {
        _input = File.Open(&lt;span style=&#34;color:#a31515&#34;&gt;@&amp;#34;C:\windows-version.txt&amp;#34;&lt;/span&gt;, FileMode.Open, FileAccess.Read, FileShare.None);

        &lt;span style=&#34;color:#2b91af&#34;&gt;var&lt;/span&gt; content = _input.ReadByte();

        &lt;span style=&#34;color:#00f&#34;&gt;switch&lt;/span&gt; (content)
        {
            &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#a31515&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;:
            &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#a31515&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;:
                &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;
            &lt;span style=&#34;color:#00f&#34;&gt;default&lt;/span&gt;:
                &lt;span style=&#34;color:#00f&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;new&lt;/span&gt; InvalidOperationException(&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;Unexpected input&amp;#34;&lt;/span&gt;);
        }
    }

    &lt;span style=&#34;color:#00f&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; Dispose()
    {
        _input.Dispose();
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The class seems to be pretty robust, right? It disposes the file properly so
behaves nicely.&lt;/p&gt;

&lt;p&gt;Nothing wrong, at least for the first look.&lt;/p&gt;

&lt;p&gt;But let&amp;rsquo;s look into exceptions being thrown.&lt;/p&gt;

&lt;h2 id=&#34;first-instantiation&#34;&gt;First instantiation&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;System.InvalidOperationException: Unexpected input
   at X.FReader..ctor() in C:\Users\vladi\Documents\code\UnityInitializer\UnityInitializer.Tests\RootContainerSetupTest.cs:line 176
   at X.Main() in C:\Users\vladi\Documents\code\UnityInitializer\UnityInitializer.Tests\RootContainerSetupTest.cs:line 135
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;second-instantiation&#34;&gt;Second instantiation&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;System.IO.IOException: The process cannot access the file &#39;C:\windows-version.txt&#39; because it is being used by another process.
   at System.IO.__Error.WinIOError(Int32 errorCode, String maybeFullPath)
   at System.IO.FileStream.Init(String path, FileMode mode, FileAccess access, Int32 rights, Boolean useRights, FileShare share, Int32 bufferSize, FileOptions options, SECURITY_ATTRIBUTES secAttrs, String msgPath, Boolean bFromProxy, Boolean useLongPath, Boolean checkHost)
   at System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share)
   at System.IO.File.Open(String path, FileMode mode, FileAccess access, FileShare share)
   at X.FReader..ctor() in C:\Users\vladi\Documents\code\UnityInitializer\UnityInitializer.Tests\RootContainerSetupTest.cs:line 164
   at X.Main() in C:\Users\vladi\Documents\code\UnityInitializer\UnityInitializer.Tests\RootContainerSetupTest.cs:line 147
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see for the second case - the file is still locked! So it didn&amp;rsquo;t dispose.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;So what is wrong here?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In the constructor there is an assumption that the file must have a certain structure.&lt;/p&gt;

&lt;p&gt;But what if the file is invalid?&lt;/p&gt;

&lt;p&gt;It will throw an exception in constructor. Hmm - still good?&lt;/p&gt;

&lt;p&gt;It depends!&lt;/p&gt;

&lt;p&gt;As the exception is thrown - the above level assignment within the &lt;code&gt;using&lt;/code&gt;
statement will never happen here.&lt;/p&gt;

&lt;p&gt;As result - the &lt;code&gt;Dispose()&lt;/code&gt; method will never be called.&lt;/p&gt;

&lt;p&gt;Which means that the resource (in our case file) remains active. The above is
not actually 100% correct all the time.&lt;/p&gt;

&lt;p&gt;Depending on the resource type (for example some unmanaged resource with
finalizer) - you may observe that the resource got at some point cleaned up
during garbage collection.&lt;/p&gt;

&lt;h2 id=&#34;solution-1&#34;&gt;Solution&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;You may consider something like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#00f&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#2b91af&#34;&gt;FReader&lt;/span&gt; : IDisposable
{
   &lt;span style=&#34;color:#00f&#34;&gt;private&lt;/span&gt; Stream _input;

   &lt;span style=&#34;color:#00f&#34;&gt;public&lt;/span&gt; FReader()
   {
       _input = File.Open(&lt;span style=&#34;color:#a31515&#34;&gt;@&amp;#34;C:\windows-version.txt&amp;#34;&lt;/span&gt;, FileMode.Open, FileAccess.Read, FileShare.None);

       &lt;span style=&#34;color:#00f&#34;&gt;try&lt;/span&gt;
       {
           &lt;span style=&#34;color:#2b91af&#34;&gt;var&lt;/span&gt; content = _input.ReadByte();

           &lt;span style=&#34;color:#00f&#34;&gt;switch&lt;/span&gt; (content)
           {
               &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#a31515&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;:
               &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#a31515&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;:
                   &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;
               &lt;span style=&#34;color:#00f&#34;&gt;default&lt;/span&gt;:
                   &lt;span style=&#34;color:#00f&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;new&lt;/span&gt; InvalidOperationException(&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;Unexpected input&amp;#34;&lt;/span&gt;);
           }
       }
       &lt;span style=&#34;color:#00f&#34;&gt;catch&lt;/span&gt; (Exception ex)
       {
           _input.Dispose();
           _input = &lt;span style=&#34;color:#00f&#34;&gt;null&lt;/span&gt;;
       }
   }

   &lt;span style=&#34;color:#00f&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; Dispose()
   {
       _input.Dispose();
   }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But you will probably very quickly realize that with slightly more complex
   initialization this will become nightmare.
   Also - the object will not be actually properly constructed.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Much easier will actually be avoiding such stuff in constructor and leave
it for later - similar to the first case.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;Always keep in mind what the impact of complex logic within constructor might
be.&lt;/p&gt;

&lt;p&gt;You may shoot yourself and observe really weird non-deterministic issues or
repeating support cases because of unreadable log files.&lt;/p&gt;

&lt;p&gt;For me personally - avoiding the complex logic during the object construction is the
preferred way of coding.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Handling detailed code reviews in GIT</title>
      <link>https://voloda.bazilisek.net/2017/11/handling-detailed-code-reviews-in-git/</link>
      <pubDate>Thu, 23 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://voloda.bazilisek.net/2017/11/handling-detailed-code-reviews-in-git/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;Pull Requests are sometimes not sufficient - they allow to see changes,
perhaps you can even see that a test build passed but these do not allow
for actual functional testing or even navigating thru the code.&lt;/li&gt;
&lt;li&gt;Some times it is convenient to see all the changes in staging area
(similar to TFS unshelve functionality) so functional test can be done
and code can be reviewed more deeply.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Below steps allow to achieve the same state as for TFS unshelve - you end-up
with code checked out and staged in GIT:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Fetch remote changes

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git fetch origin&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Checkout target branch

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git checkout TargetBranchName&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Do dry merge (without commit)

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git merge --no-commit --no-ff origin/ReviewedBranchName&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now you can do the detailed code review, put comments into PR, do testing,
navigate thru references usign Resharper in Visual Studio etc.&lt;/p&gt;

&lt;p&gt;Once done just abort the merge:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git merge --abort&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Jenkinsfile and git authentication on Windows</title>
      <link>https://voloda.bazilisek.net/2017/11/jenkinsfile-and-git-authentication-on-windows/</link>
      <pubDate>Mon, 20 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://voloda.bazilisek.net/2017/11/jenkinsfile-and-git-authentication-on-windows/</guid>
      <description>

&lt;p&gt;In this post are my notes on how to get working &lt;code&gt;git&lt;/code&gt; commands from &lt;code&gt;Jenkinsfile&lt;/code&gt;
running on Windows build agents.&lt;/p&gt;

&lt;h1 id=&#34;password-authentication&#34;&gt;Password authentication&lt;/h1&gt;

&lt;h2 id=&#34;setting-up-username-and-password-in-jenkins-server&#34;&gt;Setting up username and password in Jenkins server&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;First in Jenkins server add a new &lt;code&gt;Credentials&lt;/code&gt; entry of type &lt;code&gt;Username with password&lt;/code&gt;:
&lt;img src=&#34;https://voloda.bazilisek.net/img/jenkins/jenkins_username_and_password.png&#34; alt=&#34;Jenkins username and password&#34; /&gt;.&lt;/li&gt;
&lt;li&gt;Set ID to &lt;code&gt;repo_auth&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;This is later referenced in &lt;code&gt;Jenkinsfile&lt;/code&gt; step &lt;code&gt;withCredentials&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Set &lt;code&gt;Username&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Set &lt;code&gt;Password&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;sample-jenkinsfile&#34;&gt;Sample Jenkinsfile&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Now the system is ready to use above information from &lt;code&gt;Jenkinsfile&lt;/code&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Build script then does following:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Fetches username and password into environment variables&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Invokes any &lt;code&gt;git&lt;/code&gt; command which requires authentication&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pipeline {
agent { label &#39;vs2017&#39; }

environment {
RELEASE_NUMBER = &#39;1.0&#39;
VERSION_NUMBER = VersionNumber(versionNumberString: &#39;1.0.${BUILDS_ALL_TIME}.0&#39;)
}

stages {
stage(&#39;Compile&#39;){
steps {
echo &#39;Compiling&#39;

bat &amp;quot;\&amp;quot;${tool name: &#39;Default&#39;, type: &#39;msbuild&#39;}\\msbuild.exe\&amp;quot; \&amp;quot;build.msbuild\&amp;quot; /p:BuildNumber=${VERSION_NUMBER}&amp;quot;
}
}
stage(&#39;Tagging&#39;) {
steps {
withCredentials([usernamePassword(credentialsId: &#39;repo_auth&#39;, passwordVariable: &#39;GIT_PASSWORD&#39;, usernameVariable: &#39;GIT_USERNAME&#39;)]) {
  bat &amp;quot;git tag &#39;build-${VERSION_NUMBER}&#39;&amp;quot;
  bat &amp;quot;git push http://${GIT_USERNAME}:${GIT_PASSWORD}@repourl.com/test.git --tags&amp;quot;
}
}
}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;ssh-key-authentication-github&#34;&gt;SSH key authentication (Github)&lt;/h1&gt;

&lt;h2 id=&#34;setting-up-known-hosts-in-jenkins-server&#34;&gt;Setting up known hosts in Jenkins server&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;First in Jenkins server add a new &lt;code&gt;Credentials&lt;/code&gt; entry of type &lt;code&gt;Secret text&lt;/code&gt;
&lt;img src=&#34;https://voloda.bazilisek.net/img/jenkins/jenkins_ssh_known_hosts.png&#34; alt=&#34;Jenkins SSH known hosts&#34; /&gt;.&lt;/li&gt;
&lt;li&gt;Set ID to &lt;code&gt;github-knownhosts&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;This is later referenced in &lt;code&gt;Jenkinsfile&lt;/code&gt; step &lt;code&gt;withCredentials&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Set the content of &lt;code&gt;known_hosts&lt;/code&gt; file as value&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;setting-up-the-ssh-key-in-jenkins-server&#34;&gt;Setting up the SSH key in Jenkins server&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Now in Jenkins server add a new &lt;code&gt;Credentials&lt;/code&gt; entry of type &lt;code&gt;SSH Username with private key&lt;/code&gt;
&lt;img src=&#34;https://voloda.bazilisek.net/img/jenkins/jenkins_ssh_key.png&#34; alt=&#34;Jenkins SSH username with private key&#34; /&gt;.&lt;/li&gt;
&lt;li&gt;Set ID to &lt;code&gt;github&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;This is later referenced in &lt;code&gt;Jenkinsfile&lt;/code&gt; step &lt;code&gt;withCredentials&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;sample-jenkinsfile-1&#34;&gt;Sample Jenkinsfile&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Now the system is ready to use above information from &lt;code&gt;Jenkinsfile&lt;/code&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Build script then does following (I am using these from docker build agents
so the build agent always starts from scratch):&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Populates &lt;code&gt;id_rsa&lt;/code&gt; key with received keyFileVariable&lt;/li&gt;
&lt;li&gt;Populates &lt;code&gt;known_hosts&lt;/code&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Invokes any &lt;code&gt;git&lt;/code&gt; command which requires authentication&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pipeline {
agent {label &#39;machine&#39;}

environment {
RELEASE_NUMBER = &#39;1.0&#39;
VERSION_NUMBER = VersionNumber(versionNumberString: &#39;1.0.${BUILDS_ALL_TIME}.0&#39;)
}

stages {
stage(&#39;Build&#39;) {
steps {
bat &amp;quot;powershell.exe -NonInteractive -ExecutionPolicy Bypass -Command \&amp;quot;\$ErrorActionPreference=&#39;Stop&#39;;[Console]::OutputEncoding=[System.Text.Encoding]::UTF8;.\\build.ps1;EXIT \$global:LastExitCode\&amp;quot;&amp;quot;
}
}
stage(&#39;Publish on Github&#39;) {
steps {
withCredentials([
  string(credentialsId: &#39;github-knownhosts&#39;, variable: &#39;KNOWN_HOSTS&#39;),
  sshUserPrivateKey(credentialsId: &#39;github&#39;, keyFileVariable: &#39;RSA_KEY&#39;, usernameVariable: &#39;SSH_USER&#39;)
]) {
  bat &amp;quot;mkdir ${USERPROFILE}\\.ssh&amp;quot;
  bat &amp;quot;copy ${RSA_KEY} ${USERPROFILE}\\.ssh\\id_rsa&amp;quot;
  bat &amp;quot;echo ${KNOWN_HOSTS} &amp;gt; ${USERPROFILE}\\.ssh\\known_hosts&amp;quot;

  bat &amp;quot;git tag &#39;build-${VERSION_NUMBER}&#39;&amp;quot;
  bat &amp;quot;git push ${SSH_USER}@github.com:/project/repo.git --tags&amp;quot;
}
}
}
}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Jenkins Docker Slave Windows Build Agent</title>
      <link>https://voloda.bazilisek.net/2017/11/jenkins-docker-slave-windows-build-agent/</link>
      <pubDate>Sun, 19 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://voloda.bazilisek.net/2017/11/jenkins-docker-slave-windows-build-agent/</guid>
      <description>

&lt;p&gt;I spent quite some time on getting this working on Windows with Windows Docker
slaves.&lt;/p&gt;

&lt;p&gt;In the end it turned out to be mostly matter of using correct Jenkins docker
plugin.&lt;/p&gt;

&lt;h1 id=&#34;jenkins-docker-slave&#34;&gt;Jenkins docker slave&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Use &lt;code&gt;Yet Another Docker Plugin&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;With this plugin it just works (Docker Plugin doesn&amp;rsquo;t work)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Install JAVA into docker image and make it available on PATH&lt;/li&gt;
&lt;li&gt;In Configuration add &lt;code&gt;Yet Another Docker Plugin&lt;/code&gt; as a &lt;code&gt;Cloud&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;Point it to &lt;code&gt;Docker server&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Test that it is available&lt;/li&gt;
&lt;li&gt;Add the docker image&lt;/li&gt;
&lt;li&gt;Add label which can be references from builds&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Jenkins now automatically creates a docker container as a build is executed

&lt;ul&gt;
&lt;li&gt;It does not require any additional changes&lt;/li&gt;
&lt;li&gt;It properly handles the operating system (Windows)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;For local only images make sure that the &lt;code&gt;Pull&lt;/code&gt; option is set to &lt;code&gt;Never&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;base-dockerfile&#34;&gt;Base Dockerfile&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;This &lt;code&gt;Dockerfile&lt;/code&gt; creates the base image for Windows build agent&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The only requirements is that &lt;code&gt;java.exe&lt;/code&gt; must be accessible in path.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;It could be perhaps even installed using &lt;code&gt;Chocolatey&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;FROM microsoft/windowsservercore

SHELL [&amp;quot;powershell.exe&amp;quot;, &amp;quot;-ExecutionPolicy&amp;quot;, &amp;quot;Bypass&amp;quot;, &amp;quot;-Command&amp;quot;]

RUN iex ((New-Object System.Net.WebClient).DownloadString(&#39;https://chocolatey.org/install.ps1&#39;))
RUN choco install -y git --params=&#39;/NoShellIntegration&#39;
RUN choco install -y nuget.commandline

ENV JAVA_HOME c:\\jre1.8.0_91
ENV JENKINS_HOME c:\\jenkins

RUN (new-object System.Net.WebClient).Downloadfile(&#39;http://javadl.oracle.com/webapps/download/AutoDL?BundleId=210185&#39;, &#39;C:\jre-8u91-windows-x64.exe&#39;)
RUN start-process -filepath C:\\jre-8u91-windows-x64.exe -passthru -wait -argumentlist &amp;quot;/s,INSTALLDIR=$env:JAVA_HOME,/L,install64.log&amp;quot;
RUN del C:\jre-8u91-windows-x64.exe

RUN $env:PATH = $env:JAVA_HOME + &#39;\\bin;&#39; + $env:PATH; \
	[Environment]::SetEnvironmentVariable(&#39;PATH&#39;, $env:PATH, [EnvironmentVariableTarget]::Machine);

RUN mkdir $env:JENKINS_HOME
WORKDIR $JENKINS_HOME

ENTRYPOINT [&amp;quot;cmd.exe&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;visual-studio-2017-dockerfile&#34;&gt;Visual Studio 2017 Dockerfile&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;This &lt;code&gt;Dockerfile&lt;/code&gt; uses the above as the base image and installs VS 2017&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;It add SDK for .NET 4.5.2 and 4.6.1&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;FROM vkloz/winjava

SHELL [&amp;quot;powershell.exe&amp;quot;, &amp;quot;-ExecutionPolicy&amp;quot;, &amp;quot;Bypass&amp;quot;, &amp;quot;-Command&amp;quot;]

ENV TEST_CONTAINER=1 \
VS_CHANNEL_URI=https://aka.ms/vs/15/release/799c44140/channel \
VS_BUILDTOOLS_URI=https://aka.ms/vs/15/release/799c44140/vs_buildtools.exe \
VS_BUILDTOOLS_SHA256=FA29EB83297AECADB0C4CD41E54512C953164E64EEDD9FB9D3BF9BD70C9A2D29

# Download log collection utility
RUN $ErrorActionPreference = &#39;Stop&#39;; \
$ProgressPreference = &#39;SilentlyContinue&#39;; \
$VerbosePreference = &#39;Continue&#39;; \
Invoke-WebRequest -Uri https://aka.ms/vscollect.exe -OutFile C:\collect.exe

# Download vs_buildtools.exe
RUN $ErrorActionPreference = &#39;Stop&#39;; \
$ProgressPreference = &#39;SilentlyContinue&#39;; \
$VerbosePreference = &#39;Continue&#39;; \
Invoke-WebRequest -Uri $env:VS_BUILDTOOLS_URI -OutFile C:\vs_buildtools.exe; \
if ((Get-FileHash -Path C:\vs_buildtools.exe -Algorithm SHA256).Hash -ne $env:VS_BUILDTOOLS_SHA256) { throw &#39;Download hash does not match&#39; }

# https://docs.microsoft.com/en-us/visualstudio/install/workload-component-id-vs-build-tools
# Install Visual Studio Build Tools
RUN $ErrorActionPreference = &#39;Stop&#39;; \
$VerbosePreference = &#39;Continue&#39;; \
$p = Start-Process -Wait -PassThru -FilePath C:\vs_buildtools.exe -ArgumentList &#39;--quiet --nocache --wait --installPath C:\BuildTools&#39;; \
if ($ret = $p.ExitCode) { c:\collect.exe; throw (&#39;Install failed with exit code 0x{0:x}&#39; -f $ret) }

RUN $ErrorActionPreference = &#39;Stop&#39;; \
$VerbosePreference = &#39;Continue&#39;; \
$p = Start-Process -Wait -PassThru -FilePath C:\vs_buildtools.exe -ArgumentList &#39;modify --quiet --nocache --wait --installPath C:\BuildTools --add Microsoft.VisualStudio.Workload.MSBuildTools&#39;; \
if ($ret = $p.ExitCode) { c:\collect.exe; throw (&#39;Install failed with exit code 0x{0:x}&#39; -f $ret) }

RUN $ErrorActionPreference = &#39;Stop&#39;; \
$VerbosePreference = &#39;Continue&#39;; \
$p = Start-Process -Wait -PassThru -FilePath C:\vs_buildtools.exe -ArgumentList &#39;modify --quiet --nocache --wait --installPath C:\BuildTools --add Microsoft.VisualStudio.Component.Static.Analysis.Tools&#39;; \
if ($ret = $p.ExitCode) { c:\collect.exe; throw (&#39;Install failed with exit code 0x{0:x}&#39; -f $ret) }

RUN choco install -y netfx-4.5.2-devpack
RUN choco install -y netfx-4.6.1-devpack


# Use shell form to start developer command prompt and any other commands specified
SHELL [&amp;quot;cmd.exe&amp;quot;, &amp;quot;/s&amp;quot;, &amp;quot;/c&amp;quot;]
ENTRYPOINT C:\BuildTools\Common7\Tools\VsDevCmd.bat &amp;amp;&amp;amp;

# Default to PowerShell console running within developer command prompt environment
CMD [&amp;quot;powershell.exe&amp;quot;, &amp;quot;-nologo&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Jenkins Server Setup On Windows</title>
      <link>https://voloda.bazilisek.net/2017/10/jenkins-server-setup-on-windows/</link>
      <pubDate>Tue, 17 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://voloda.bazilisek.net/2017/10/jenkins-server-setup-on-windows/</guid>
      <description>

&lt;h1 id=&#34;operating-system-preparation&#34;&gt;Operating system preparation&lt;/h1&gt;

&lt;p&gt;These notes assume since beginning separation of the &lt;strong&gt;Jenkins server&lt;/strong&gt; and
individual build agents so on the server will not be any build utilities
except &lt;strong&gt;git&lt;/strong&gt; which is necessary for repository polling.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Install &lt;strong&gt;Chocolatey&lt;/strong&gt; (see instructions on web).&lt;/li&gt;
&lt;li&gt;Install &lt;strong&gt;Google Chrome&lt;/strong&gt; (using Chocolatey is actually much easier than trying
to download it from web).

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;choco install -y googlechrome&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Install &lt;strong&gt;git&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;choco install -y git /NoShellIntegration&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;jenkins-server-setup&#34;&gt;Jenkins Server Setup&lt;/h1&gt;

&lt;p&gt;This is fairly simple:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;See &lt;a href=&#34;http://jenkinks.io/download&#34;&gt;http://jenkinks.io/download&lt;/a&gt; to get installation package.&lt;/li&gt;
&lt;li&gt;Open &lt;a href=&#34;http://localhost:8080/&#34;&gt;http://localhost:8080/&lt;/a&gt; in Chrome and follow instructions.&lt;/li&gt;
&lt;li&gt;Setup firewall rules to make the server accessible as needed.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;useful-plugins&#34;&gt;Useful plugins&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Yet Another Docker plugins

&lt;ul&gt;
&lt;li&gt;Automatic spawning of docker build agents based on label&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;NUnit plugin

&lt;ul&gt;
&lt;li&gt;Parsing of NUnit results&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Blue Ocean plugin

&lt;ul&gt;
&lt;li&gt;Newer Jenkins UI for build pipelines&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;MSBuild Plugin

&lt;ul&gt;
&lt;li&gt;Allows to configure MSBuild as a tool and reference it from scripts&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Role-based authorization strategy

&lt;ul&gt;
&lt;li&gt;Allows role based access Configuration&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;windows-slave-setup&#34;&gt;Windows Slave Setup&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Install Chocolatey (see instructions on web)&lt;/li&gt;
&lt;li&gt;Install Google Chrome

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;choco install -y googlechrome&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Install Java

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;choco install -y javaruntime&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Install git

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;choco install -y git /NoShellIntegration&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;VS2017 build Tools

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;choco install -y visualstudio2017buildtools&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Install Nuget

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;choco install -y nuget.commandline&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Installing packages after the service start may require service restart&lt;/li&gt;
&lt;li&gt;Login to &lt;strong&gt;Jenkins master&lt;/strong&gt; via Chrome&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Configure Global Security&lt;/code&gt; and setup &lt;code&gt;TCP port for JNLP agents&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Add new Node&lt;/li&gt;
&lt;li&gt;Download the java file and run it

&lt;ul&gt;
&lt;li&gt;In menu it allows to &lt;code&gt;Install Windows Service&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;This may need to change the Jenkins server URL in settings&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Setup labels to distribute load across nodes conditionally&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;links&#34;&gt;Links&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://chocolatey.org&#34;&gt;Chocolatey&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Chocolatey setup on DEV machine &#43; useful packages</title>
      <link>https://voloda.bazilisek.net/setup-on-dev-machine-and-useful-packages/</link>
      <pubDate>Wed, 04 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://voloda.bazilisek.net/setup-on-dev-machine-and-useful-packages/</guid>
      <description>

&lt;h2 id=&#34;upgrade-all-packages&#34;&gt;Upgrade all packages&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;choco outdated&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;List available upgrades&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cup all -y&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;list-local-packages&#34;&gt;List local Packages&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;chocolatey list -localonly&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;packages&#34;&gt;Packages&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;choco install -y git --params=&#39;/NoShellIntegration&#39;
choco install -y poshgit
choco install -y gittfs
choco install -y far
choco install -y atom
choco install -y chefdk
choco install -y winmerge
choco install -y googlechrome
choco install -y postman
choco install -y 7zip
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>
