<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>2018 on My personal notes</title>
    <link>https://voloda.bazilisek.net/year/2018/</link>
    <description>Recent content in 2018 on My personal notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 20 Oct 2018 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://voloda.bazilisek.net/year/2018/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Kolo 2018 - zhodnocení sezóny</title>
      <link>https://voloda.bazilisek.net/2018/10/kolo-2018-zhodnoceni-sezony/</link>
      <pubDate>Sat, 20 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://voloda.bazilisek.net/2018/10/kolo-2018-zhodnoceni-sezony/</guid>
      <description>

&lt;p&gt;Pár poznámek k cyklosezoně 2018 - jen osobní poznámky&amp;hellip;&lt;/p&gt;

&lt;h1 id=&#34;jídlo-a-pití&#34;&gt;Jídlo a pití&lt;/h1&gt;

&lt;h2 id=&#34;co-nefungovalo&#34;&gt;Co nefungovalo&lt;/h2&gt;

&lt;h3 id=&#34;sladké&#34;&gt;Sladké&lt;/h3&gt;

&lt;p&gt;Jakékoliv větší množství cukru mě vždycky poslalo do kolen cca na hodinu možná déle (Seč na jaře, sám kolem Sázavy, Jeseníky s Pavlem).
Sladké je v pohodě, ale je potřeba to občas proložit něčím normálním - bageta, chleba s sebou apod.&lt;/p&gt;

&lt;p&gt;Tohle zahrnuje i cyklotyčky, ionťák - lepší malá láhav ionťáku a velká čisté vody.&lt;/p&gt;

&lt;p&gt;Nejde ujet celý den jen na sladkých tyčkách - lepší mezi ně hnusný párek v rohlíku&amp;hellip;&lt;/p&gt;

&lt;h3 id=&#34;moc-jídla&#34;&gt;Moc jídla&lt;/h3&gt;

&lt;p&gt;Moc jídla před závodem je fakt blbej nápad - vrací se to zpátky (párky ke snídani nebrat) - kdo by to čekal, že?&lt;/p&gt;

&lt;h2 id=&#34;co-fungovalo&#34;&gt;Co fungovalo&lt;/h2&gt;

&lt;p&gt;Cholesterolová dieta je vlastně super - ovesná kaše, oříšky a semínka je ideální kombinace ke snídani - je to celé mírně nasládlé, ale ne moc. Nekombinovat s marmeládou apod.&lt;/p&gt;

&lt;p&gt;Tesně před závodem po rozjetí nebo i během cesty banán - nezkoušel jsem před jízdou - asi by to spíš fungovalo jako cukr, takže kontraproduktivní.&lt;/p&gt;

&lt;p&gt;Cukr po dojetí - borůvková marmeláda a pak regener apod. (přes zimu poloviční dávka regeneru po intenzivnějším tréninku, celkem 4 pixly za sezónu).&lt;/p&gt;

&lt;p&gt;Rychlé gely - na cca 3 hodinový závod gely celkem stačí (Nepolisy 2x, Václavská jízda 1.5x), ale každý gel je potřeba rozdělit na více částís časovým odstupem
a pořádně zapít, jinak platí to samé výše.&lt;/p&gt;

&lt;h1 id=&#34;trénink&#34;&gt;Trénink&lt;/h1&gt;

&lt;h2 id=&#34;co-nefungovalo-1&#34;&gt;Co nefungovalo&lt;/h2&gt;

&lt;p&gt;Po ukončení intervalů po zimě v průběhu jara naprostá stagnace a spíše regrese výkonu na krátkých trasách (i když je otázka, jestli jsem na Šandovce opravdu jel FTP 298W s ohledem na kalibraci wattmetru a restartování computeru).&lt;/p&gt;

&lt;p&gt;Ježdění segmentů je sice zábava, ale v zásadě to nikam moc nevede. Zas je to ale super na motivaci a užití si trochu toho, co jsem natrénoval.&lt;/p&gt;

&lt;p&gt;Indoor tréninky - podle testu je FTP cca o 10 watt nižší, asi by stálo zato podle toho upravit tréninky a nepřehánět to - v zásadě to koreluje i s tím, co píše Friel na blogu - FTP by mělo být specifické pro každý styl tréninku.&lt;/p&gt;

&lt;p&gt;Hlaďák - indikace i když už skoro pozdě, ale dá se zachránit pokud to chytnu brzo je stoupající tep oproti watt.&lt;/p&gt;

&lt;p&gt;Únava/nevyspání - málo spánku v podstatě totálně zabíjí schopnost jet tempo a výš (i když vytrvalostně se nechá jet v podstatě na hranici Z2/Z3), ale výš je smrtící a je lepší to prostě vzdát.&lt;/p&gt;

&lt;h2 id=&#34;co-fungovalo-1&#34;&gt;Co fungovalo&lt;/h2&gt;

&lt;p&gt;Přes zimu zafungovaly pravidelné delší tréninky na cca 3-4 hodiny na pomezí Z1/Z2 na aerobní vytrvalost - je to super i kvůli tomu, že jsem se tolik nepropotil a tak se to dá vydržet. Párkrát jsem to jel celé v kuse a to byla blbost - benzínka je prostě dobrá!&lt;/p&gt;

&lt;p&gt;Zároveň lehké posilování (párkrát posilovna, nějaké cviky doma - kliky, plank, dřepy na jedné noze).&lt;/p&gt;

&lt;p&gt;Po prvním víkendu na horách a ježdění v kopcích šla rychle nahoru silová vytrvalost ve smyslu výdrže, ne absolutní výkon. Ježdění na pomezí Z3/Z4 se nechá vydržet i několik dní za sebou, případně po tréninku na úrovni FTP.&lt;/p&gt;

&lt;p&gt;Asi fungovalo držení watt (ze začátku jen odhad z trenažéru) oproti tepu při indoor ježdění - tep šel s rostoucím časem nahoru, watt se ale dalo držet - je otázka, jestli tohle není kontraproduktivní, ale zatím to vypadá, že ne - opatrně.&lt;/p&gt;

&lt;p&gt;Při intervalech s vyšším výkonem, kdy se potřebuju  soustředit tak je nejlepší odbočovat pořád vpravo, minimalizují se přestávky ve šlapání, z hlavní na vedlejší není potřeba tolik dávat pozor atd.&lt;/p&gt;

&lt;p&gt;Září - říjen pokusně pravidelná kombinace FTP intervaly (nutné být odpočinutý), HR tempo, SST intervaly a o víkendu VO2max intervaly. Po prvních několika cyklech jsem se postupně dostal na rozumné časy na jednotlivých intervalech. K vyzkoušení zbývá jak by fungovalo následujících několik týdnů na zvýšeném FTP. Pří vysoké únavě bylo lepší trénink ukončit a přejít čistě na vytrvalost.&lt;/p&gt;

&lt;h1 id=&#34;stretching&#34;&gt;Stretching&lt;/h1&gt;

&lt;h2 id=&#34;co-nefungovalo-2&#34;&gt;Co nefungovalo&lt;/h2&gt;

&lt;p&gt;Flákání strečinku fakt nefunguje a druhý den jsem byl víc KO.&lt;/p&gt;

&lt;h2 id=&#34;co-fungovalo-2&#34;&gt;Co fungovalo&lt;/h2&gt;

&lt;p&gt;Dynamic cycling funguje super - vlastně to není nic extra jen sada cviků, které se opakují, ale jednoho to donutí se 15 minut protahovat. Ideálně aspoň 4x týdně, minimum 3x a k tomu aspoň základní stretching po každém tréninku.&lt;/p&gt;

&lt;h1 id=&#34;ftp-test&#34;&gt;FTP test&lt;/h1&gt;

&lt;h2 id=&#34;co-nefungovalo-3&#34;&gt;Co nefungovalo&lt;/h2&gt;

&lt;p&gt;Jakákoliv snaha jet výrazně výš než minule byla naprosto k ničemu. Ať si člověk přeje co chce, prostě za měsíc 30W nahoru nejde a snažit se dokázat si něco jiného je naprosto k ničemu. Vede to jen k nucené přestávce, odepsané hlavě a nakonec nižšímu výkonu.&lt;/p&gt;

&lt;p&gt;Stejně tak najet si na hnusnou silnici je k ničemu - jen to rozhodí soustředění a výsledně se člověk soustředí jen na to jak se vyhnout dírám místo na šlapání.&lt;/p&gt;

&lt;p&gt;Ještě horší to bylo při pokusu o indoor test - obecně je to horší kvůli přehřívání, ale snažit se navíc udržet vyšší výkon bylo na totální odvaření. Kupodivu navzdory tomu, že jsem to vlastně 2x zabalil FTP bylo jen o cca 10W nižší.&lt;/p&gt;

&lt;h2 id=&#34;co-fungovalo-3&#34;&gt;Co fungovalo&lt;/h2&gt;

&lt;p&gt;Rozjetí, pak 5 minut na horní hranici P5, pak vyjet cca 10 minut a pak test. Držet se ze začátku okolo předchozího FTP a přidávat. Při správném provedení se na konci výkon buď drží nebo zvyšuje a ne snižuje!&lt;/p&gt;

&lt;h1 id=&#34;závody&#34;&gt;Závody&lt;/h1&gt;

&lt;h2 id=&#34;co-nefungovalo-4&#34;&gt;Co nefungovalo&lt;/h2&gt;

&lt;p&gt;Na hromadných je prostě znát, že nemám vytrvalost to celé vydržet, obvykle ke konci jsem skončil nějak KO.&lt;/p&gt;

&lt;p&gt;Časovka - na Strnadově 30 jsem pokusně jel vyšší watt, ale k ničemu to nevedlo - ve druhé půlce jsem byl celkem KO, nedávala to ani hlava. Navíc FTP asi fakt zatím ani hodinu nevydržím.&lt;/p&gt;

&lt;p&gt;Startovat hodně na začátku - na Strnadově 30 hlava ke konci nedávala, že jsem už první a nemám proč se zmáčknout. Lepší mít někoho, kdo mě předjede a vidět ho, protože s tím se nechá nějak pracovat.&lt;/p&gt;

&lt;p&gt;Málo napumpované kolo - pumpička bez funkčního manometru je k ničemu! Opravdu rukou nepoznám 8bar a už mě to dvakrát vytrestalo na závodech.&lt;/p&gt;

&lt;p&gt;Při TT na Špindlerovku jsem nedokázal udejchat nad 169 tepů - buď kvůli sauně nebo kocovině den předem a nebo špatné rozjetí v kombinaci s dlouhým čekáním&amp;hellip; Nevím jestli to souvisí ale při TT Na Truba jsem se nedostal za 6minut nad 170 tepů při výkonu okolo 360W (tady jsem šel taky spát relativně pozdě a k tomu si dal večer pivo). Asi příště zkusím pivo vynechat.&lt;/p&gt;

&lt;h2 id=&#34;co-fungovalo-4&#34;&gt;Co fungovalo&lt;/h2&gt;

&lt;p&gt;Více závodů v sezóně - tohle jednoznačně fungovalo super, protože jsem si dokázal vyzkoušet různé věci, což mi dřív vždycky trvalo do dalšího roku. Zároveň trochu líp odhaduju co se bude dít v hromadných závodech, zlepšuje se střídání apod.&lt;/p&gt;

&lt;p&gt;Závody cca do třech hodin - na tohle dokážu natrénovat - na delší nemám celkově vytrvalost jet nějaké rozumné tempo a celé si to užít, takže bylo správné rozhodnutí se vykašlat na dlouhou na Krakonošovi a jezdit to, co si dokážu užít.&lt;/p&gt;

&lt;p&gt;Časovky fungují skvěle - je to krátké, s wattmetrem se dá dobře odhadnout jak jet.&lt;/p&gt;

&lt;h3 id=&#34;rozjetí&#34;&gt;Rozjetí&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;před závodem - tohle chce ještě trochu laborovat. Vcelku zafungovalo rozjetí za Pavlem Kohoutkem pře Šandovkou - projet závod a cca minutu na 350W.

&lt;ul&gt;
&lt;li&gt;podobně jsem to zkoušel i před TT Na Truba. Asi to relativně fungovalo, ale celé to bylo dost krátké a spíš na vysokou intenzitu&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;před intervalama - 10sec 500W + 50sec v Z1 opakovat 4x vypadá celkem OK.&lt;/li&gt;
&lt;li&gt;před FTP testem - cca 5 minut okolo 350W asi taky funguje.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Časovky - podle Friela moje tréninky odpovídají profilu na časovky a je to celkově znát - krátký závod mi celkem sedí, wattmetr hodně pomáhá se udržet v odpovídající zóně i když je boj ze začátku zůstat nízko a nepřepálit to - každopádně tepový náběh do odpovídající zóny trvá několik minut narozdíl od snahy dostat se na tep a pak v něm jet.&lt;/p&gt;

&lt;p&gt;To jak člověk chytí řidítka dělá hodně - Praha - Bydžov - Praha s rukama víceméně v oblouku a průměr cca 31.5km/hod.&lt;/p&gt;

&lt;h1 id=&#34;ostatní&#34;&gt;Ostatní&lt;/h1&gt;

&lt;p&gt;Pár týdnů jsem chytal křeče v oblasti kotníku - postupně to přešlo a byl dost odřeněj dole. Moc nevím čím to bylo, postupně to zmizelo, ale udělal jsem spoustu změn - nové kolo, úprava posedu na starém, nové sedlo atd&amp;hellip;&lt;/p&gt;

&lt;p&gt;Uvidíme, jestli se to bude vracet.&lt;/p&gt;

&lt;p&gt;Nové kolo - funguje super - menší rám mi úžasně sedí.&lt;/p&gt;

&lt;p&gt;Wattmetr Garmin Vector 3S - rozhodně zajímavá investice, dost se mi změnil způsob šlapání - dřív jsem sice šlapal relativně pořád, ale teď v podstatě jedu pořád ve stejném záběru. Je potřeba to pokaždé kalibrovat kvůli teplotním změnám. Ideálně nechat kolo chvíli venku a nebo po 4-5km zastavit a překalibrovat.&lt;/p&gt;

&lt;p&gt;Cyklocomputer - víceméně vypnutá rychlost je vlastně super - člověk to k ničemu moc nepotřebuje a zbytečně nestresuje, když jede proti větru&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>DbKeeperNet 3 - an alternative to perform database upgrade (migrations) with support of .NET Standard 2.0</title>
      <link>https://voloda.bazilisek.net/2018/09/dbkeepernet-3-an-alternative-to-perform-database-upgrade-migrations-with-support-of-dotnet-standard-2.0/</link>
      <pubDate>Mon, 03 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://voloda.bazilisek.net/2018/09/dbkeepernet-3-an-alternative-to-perform-database-upgrade-migrations-with-support-of-dotnet-standard-2.0/</guid>
      <description>

&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;Each project using database access solves how to distribute database schema and how to keep it up-to-date after upgrades. I was solving this problem multiple times, so I decided to write a common, easy to use, and freely available library. The result of this is the &lt;strong&gt;DbKeeperNet&lt;/strong&gt; library which is pure ADO.NET framework (no dependency on Entity Framework).&lt;/p&gt;

&lt;p&gt;This article will briefly show how to use &lt;strong&gt;DbKeeperNet&lt;/strong&gt; library to fulfill this task. The library is designed as extensible and with planned support to any database engine.&lt;/p&gt;

&lt;p&gt;It is basically a simple alternative to Entity Framework database migrations for projects which do not use EF.&lt;/p&gt;

&lt;h1 id=&#34;supported-features&#34;&gt;Supported Features&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;.NET Standard 2.0

&lt;ul&gt;
&lt;li&gt;Supports .NET Core 2.0+&lt;/li&gt;
&lt;li&gt;Supports .NET Framework 4.6.1+&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Very simple usage.&lt;/li&gt;
&lt;li&gt;Database commands are kept in a simple, structured XML file.&lt;/li&gt;
&lt;li&gt;Each upgrade step is executed in a separate transaction (if supported by the database service). In the case of failure, all further steps are prohibited.&lt;/li&gt;
&lt;li&gt;Rich set of built-in preconditions used for evaluation whether update should or shouldn&amp;rsquo;t be executed.&lt;/li&gt;
&lt;li&gt;Support for unlimited and customizable list of database engines.&lt;/li&gt;
&lt;li&gt;In single update, a script may be an alternative to SQL commands, for all database engine types if needed.&lt;/li&gt;
&lt;li&gt;Support for custom preconditions.&lt;/li&gt;
&lt;li&gt;Support for custom in-code upgrade steps (allows complex data transformations to be done in code instead of SQL).&lt;/li&gt;
&lt;li&gt;DbKeeperNet provides deep logging of what is currently happening. Diagnostic output may be redirected through the standard .NET &lt;code&gt;System.Diagnostics.Trace&lt;/code&gt; class or the &lt;code&gt;System.Diagnostics.TraceSource&lt;/code&gt; class, or to a custom plug-in, allowing integration to an already existing application diagnostics framework.&lt;/li&gt;
&lt;li&gt;XML update script structure is strictly defined by the XSD schema which can be used in any XML editor with auto-completion (intellisense).&lt;/li&gt;
&lt;li&gt;Support for MySQL Connect .NET.&lt;/li&gt;
&lt;li&gt;Support for PostrgreSQL.&lt;/li&gt;
&lt;li&gt;Support for SQLite.&lt;/li&gt;
&lt;li&gt;Support for Microsoft SQL server.&lt;/li&gt;
&lt;li&gt;Support for Firebird.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;background&#34;&gt;Background&lt;/h1&gt;

&lt;p&gt;There are two basic principles on how to get your application&amp;rsquo;s database schema up-to-date:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Before each change, check directly in the database whether a change was already made or not (such as ask the database whether a table already exists or not).&lt;/li&gt;
&lt;li&gt;Have a kind of database schema versioning table and record the current schema version.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;DbKeeperNet supports both these principles; however, I suggest to use the second one.&lt;/p&gt;

&lt;p&gt;DbKeeperNet&amp;rsquo;s design for this second principle is in a unique identifier for each update step. The database service implementation simply keeps track of these already executed steps (concrete implementation is strongly dependent on the used database service). This allows you to very simply search the database and check which steps were already executed.&lt;/p&gt;

&lt;h1 id=&#34;using-dbkeepernet&#34;&gt;Using DbKeeperNet&lt;/h1&gt;

&lt;p&gt;The code snippets below are taken from the &lt;em&gt;CoreConsoleApp&lt;/em&gt; project which is part of the source control. If you want to directly execute
the demo project it should work against the SQLite database.&lt;/p&gt;

&lt;p&gt;For other database types you need to adjust connection string and setup appropriate database engine using the correct extension reference:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;DbKeeperNet.Extensions.Mysql&lt;/code&gt;  and its &lt;code&gt;UseMysql()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DbKeeperNet.Extensions.Firebird&lt;/code&gt;  and its &lt;code&gt;UseFirebird()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DbKeeperNet.Extensions.Pgsql&lt;/code&gt;  and its &lt;code&gt;UsePgsql()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DbKeeperNet.Extensions.SQLite&lt;/code&gt;  and its &lt;code&gt;UseSQLite()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DbKeeperNet.Extensions.SqlServer&lt;/code&gt;  and its &lt;code&gt;UseSqlServer()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For more complex scenarios, you can check the &lt;em&gt;ComplexDemo&lt;/em&gt; project (there is an example of a custom step implementation, split XML scripts, etc.).&lt;/p&gt;

&lt;p&gt;My favorite way to implement an upgrade script is by using an XML file stored as an embedded resource in an assembly. So, let&amp;rsquo;s prepare a simple upgrade script with an alternative statement for two different database engines (you can find it in the &lt;em&gt;CoreConsoleApp&lt;/em&gt; demo project as the file &lt;em&gt;DatabaseUpgrade.xml&lt;/em&gt;
which contains also alternative database statements):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#00f&#34;&gt;&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;utf-8&amp;#34; ?&amp;gt;&lt;/span&gt;
&amp;lt;upd:Updates xmlns:upd=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;http://code.google.com/p/dbkeepernet/Updates-1.0.xsd&amp;#34;&lt;/span&gt;
                    xmlns:xsi=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34;&lt;/span&gt;
             xsi:schemaLocation=
        &lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;http://code.google.com/p/dbkeepernet/Updates-1.0.xsd Updates-1.0.xsd&amp;#34;&lt;/span&gt;
                AssemblyName=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;DbKeeperNet.SimpleDemo&amp;#34;&lt;/span&gt;&amp;gt;
  &lt;span style=&#34;color:#008000&#34;&gt;&amp;lt;!-- Default way how to check whether to execute update step or not --&amp;gt;&lt;/span&gt;
  &amp;lt;DefaultPreconditions&amp;gt;
    &lt;span style=&#34;color:#008000&#34;&gt;&amp;lt;!-- We will use step information saving strategy --&amp;gt;&lt;/span&gt;
    &amp;lt;Precondition FriendlyName=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;Update step executed&amp;#34;&lt;/span&gt; 
                Precondition=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;StepNotExecuted&amp;#34;&lt;/span&gt;/&amp;gt;
  &amp;lt;/DefaultPreconditions&amp;gt;
  
  &amp;lt;Update Version=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;1.00&amp;#34;&lt;/span&gt;&amp;gt;
    &amp;lt;UpdateStep xsi:type=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;upd:UpdateDbStepType&amp;#34;&lt;/span&gt; 
    FriendlyName=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;Create table DbKeeperNet_SimpleDemo&amp;#34;&lt;/span&gt; Id=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt;&amp;gt;
      &lt;span style=&#34;color:#008000&#34;&gt;&amp;lt;!-- DbType attribute may be omitted - it will result in default value all
&lt;/span&gt;&lt;span style=&#34;color:#008000&#34;&gt;           which means all database types --&amp;gt;&lt;/span&gt;
      &amp;lt;AlternativeStatement DbType=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;MsSql&amp;#34;&lt;/span&gt;&amp;gt;
        &lt;span style=&#34;color:#00f&#34;&gt;&amp;lt;![CDATA[
&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;          CREATE TABLE DbKeeperNet_SimpleDemo
&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;          (
&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;          id int identity(1, 1) not null,
&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;          name nvarchar(32),
&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;          constraint PK_DbKeeperNet_SimpleDemo primary key clustered (id)
&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;          )
&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;        ]]&amp;gt;&lt;/span&gt;
      &amp;lt;/AlternativeStatement&amp;gt;
    &amp;lt;/UpdateStep&amp;gt;
    &amp;lt;UpdateStep xsi:type=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;upd:UpdateDbStepType&amp;#34;&lt;/span&gt; 
    FriendlyName=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;Fill table DbKeeperNet_SimpleDemo&amp;#34;&lt;/span&gt; Id=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;2&amp;#34;&lt;/span&gt;&amp;gt;
      &amp;lt;AlternativeStatement DbType=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;MsSql&amp;#34;&lt;/span&gt;&amp;gt;
        &lt;span style=&#34;color:#00f&#34;&gt;&amp;lt;![CDATA[
&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;          insert into DbKeeperNet_SimpleDemo(name) values(&amp;#39;First value&amp;#39;);
&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;          insert into DbKeeperNet_SimpleDemo(name) values(&amp;#39;Second value&amp;#39;);
&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;        ]]&amp;gt;&lt;/span&gt;
      &amp;lt;/AlternativeStatement&amp;gt;
    &amp;lt;/UpdateStep&amp;gt;
  &amp;lt;/Update&amp;gt;
&amp;lt;/upd:Updates&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, we will implement the necessary steps for the code execution:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#008000&#34;&gt;// Perform all configured database updates
&lt;/span&gt;&lt;span style=&#34;color:#008000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#2b91af&#34;&gt;string&lt;/span&gt; connectionString = &lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;Data Source=fullframeworkdemo.db3&amp;#34;&lt;/span&gt;;

&lt;span style=&#34;color:#2b91af&#34;&gt;var&lt;/span&gt; serviceCollection = &lt;span style=&#34;color:#00f&#34;&gt;new&lt;/span&gt; ServiceCollection();
serviceCollection.AddDbKeeperNet(c =&amp;gt;
{
    c
    .UseSQLite(connectionString)
    .AddEmbeddedResourceScript(&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;FullFrameworkConsoleApp.DatabaseUpgrade.xml,FullFrameworkConsoleApp&amp;#34;&lt;/span&gt;);
});
serviceCollection.AddLogging(c =&amp;gt; { c.AddConsole(); });

&lt;span style=&#34;color:#2b91af&#34;&gt;var&lt;/span&gt; serviceProvider = serviceCollection.BuildServiceProvider(&lt;span style=&#34;color:#00f&#34;&gt;true&lt;/span&gt;);

&lt;span style=&#34;color:#00f&#34;&gt;using&lt;/span&gt; (&lt;span style=&#34;color:#2b91af&#34;&gt;var&lt;/span&gt; scope = serviceProvider.CreateScope())
{
    &lt;span style=&#34;color:#2b91af&#34;&gt;var&lt;/span&gt; upgrader = scope.ServiceProvider.GetService&amp;lt;IDatabaseUpdater&amp;gt;();
    upgrader.ExecuteUpgrade();
}

&lt;span style=&#34;color:#008000&#34;&gt;// the above line is last required line for installation
&lt;/span&gt;&lt;span style=&#34;color:#008000&#34;&gt;// And now just print all inserted rows on console
&lt;/span&gt;&lt;span style=&#34;color:#008000&#34;&gt;// (just for demonstration purpose)
&lt;/span&gt;&lt;span style=&#34;color:#008000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;using&lt;/span&gt; (&lt;span style=&#34;color:#2b91af&#34;&gt;var&lt;/span&gt; c = &lt;span style=&#34;color:#00f&#34;&gt;new&lt;/span&gt; SqliteConnection(connectionString))
{
    c.Open();

    DbCommand cmd = c.CreateCommand();
    cmd.CommandText = &lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;select * from DbKeeperNet_SimpleDemo&amp;#34;&lt;/span&gt;;
    DbDataReader reader = cmd.ExecuteReader();
    &lt;span style=&#34;color:#00f&#34;&gt;while&lt;/span&gt; (reader.Read())
        Console.WriteLine(&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;{0}: {1}&amp;#34;&lt;/span&gt;, reader[0], reader[1]);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And that is all - all database changes are executed automatically, only in the case that they were not already executed.&lt;/p&gt;

&lt;h1 id=&#34;changes-from-previous-releases&#34;&gt;Changes from previous releases&lt;/h1&gt;

&lt;p&gt;The XML is backward compatible so you just need to update the way how the database upgrade is invoked. This will give you flexibility of new versions
of the .NET framework including .NET Core 2.1.&lt;/p&gt;

&lt;h1 id=&#34;demo-projects&#34;&gt;Demo projects&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/DbKeeperNet/DbKeeperNet/tree/master/demos/ASPNETCore&#34;&gt;ASP.NET Core demo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/DbKeeperNet/DbKeeperNet/tree/master/demos/ASPNet&#34;&gt;ASP.NET MVC demo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/DbKeeperNet/DbKeeperNet/tree/master/demos/CoreConsoleApp&#34;&gt;.NET Core Console Application demo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/DbKeeperNet/DbKeeperNet/tree/master/demos/FullFrameworkConsoleApp&#34;&gt;.NET Framework 4.6.1 demo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;writing-database-update-scripts&#34;&gt;Writing Database Update Scripts&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;All scripts are executed in the same order as they were registered&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;Assembly&lt;/code&gt; attribute of the &lt;code&gt;Updates&lt;/code&gt; element is in fact a namespace in which each &lt;code&gt;Version&lt;/code&gt; and &lt;code&gt;Step&lt;/code&gt; must be unique. If you would logically divide a single script into multiple files, you can use the same value in all the scripts.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;Version&lt;/code&gt; attribute of the &lt;code&gt;Update&lt;/code&gt; element is intended to be used as a marker of database schema version. I suggest using a unique value for each distributed build changing the database schema (this value can be the same as the assembly version).&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;Step&lt;/code&gt; attribute of the &lt;code&gt;UpdateStep&lt;/code&gt; element should be unique inside each update version.&lt;/li&gt;
&lt;li&gt;Never change the &lt;code&gt;AssemblyName&lt;/code&gt;, &lt;code&gt;Version&lt;/code&gt;, and &lt;code&gt;Step&lt;/code&gt; steps after you deploy the application, unless you are absolutely sure what you are doing.&amp;nbsp;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;project-references&#34;&gt;Project references&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://github.com/DbKeeperNet/DbKeeperNet&#34;&gt;http://github.com/DbKeeperNet/DbKeeperNet&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gitter.im/dbkeepernet/Lobby&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/gitterHQ/gitter.png&#34; alt=&#34;Gitter char&#34; /&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;This article shows only the basics from a set of supported functions. More information and examples of upgrade scripts can be find in the DbKeeperNet source files or in the unit tests.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Building Docker Image For MySql 8.0.11 From Microsoft/Windowsservercore Base Image</title>
      <link>https://voloda.bazilisek.net/2018/06/building-docker-image-for-mysql-8-0-11-from-microsoft-windowsservercore-base-image/</link>
      <pubDate>Wed, 13 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://voloda.bazilisek.net/2018/06/building-docker-image-for-mysql-8-0-11-from-microsoft-windowsservercore-base-image/</guid>
      <description>&lt;p&gt;I wanted to setup a testing docker image for .NET and MySql 8.0.11. Unfortunatelly it didn&amp;rsquo;t work out of the box but
I found it pretty easily that the missing dependency on the image is &lt;code&gt;Microsoft Visual C++ 2015 Redistributable Update 3&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Below is &lt;code&gt;Dockerfile&lt;/code&gt; I used to build the image.&lt;/p&gt;

&lt;p&gt;Into the same directory put download 8.0.11 Mysql server version &lt;a href=&#34;https://cdn.mysql.com//Downloads/MySQL-8.0/mysql-8.0.11-winx64.zip&#34;&gt;https://cdn.mysql.com//Downloads/MySQL-8.0/mysql-8.0.11-winx64.zip&lt;/a&gt; named as &lt;code&gt;mysql.zip&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Please note that the image below is created with &lt;code&gt;root&lt;/code&gt; user without a password specified&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;FROM microsoft/windowsservercore

SHELL [&amp;quot;powershell&amp;quot;, &amp;quot;-Command&amp;quot;, &amp;quot;$ErrorActionPreference = &#39;Stop&#39;; $ProgressPreference = &#39;SilentlyContinue&#39;;&amp;quot;]

COPY mysql.zip c:\\mysql.zip

RUN Expand-Archive c:/mysql.zip -DestinationPath C:/ ; \
    Remove-Item c:/mysql.zip

RUN $env:PATH = &#39;C:\\mysql-8.0.11-winx64\\bin\\;&#39; + $env:PATH; \
    [Environment]::SetEnvironmentVariable(&#39;PATH&#39;, $env:PATH, [EnvironmentVariableTarget]::Machine);

RUN Invoke-WebRequest &#39;https://download.microsoft.com/download/6/D/F/6DF3FF94-F7F9-4F0B-838C-A328D1A7D0EE/vc_redist.x64.exe&#39; -OutFile vcredist_x64.exe ; \
    Start-Process vcredist_x64.exe -ArgumentList &#39;/install&#39;, &#39;/passive&#39;, &#39;/norestart&#39; -NoNewWindow -Wait ; \
    Remove-Item vcredist_x64.exe

RUN C:\\mysql-8.0.11-winx64\\bin\\mysqld --initialize-insecure
RUN C:\\mysql-8.0.11-winx64\\bin\\mysqld --install


ENTRYPOINT [&amp;quot;cmd.exe&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Angular5 Materialized Design And Karma Unit Tests Cheat Sheet</title>
      <link>https://voloda.bazilisek.net/2018/04/angular5-materialized-design-and-karma-unit-tests-cheat-sheet/</link>
      <pubDate>Mon, 30 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://voloda.bazilisek.net/2018/04/angular5-materialized-design-and-karma-unit-tests-cheat-sheet/</guid>
      <description>

&lt;h1 id=&#34;running-tests&#34;&gt;Running tests&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Run command from Angular5 project folder: &lt;code&gt;ng test&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;create-an-injectable-service-with-an-interface&#34;&gt;Create an injectable service with an interface&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;This allows to define a typescript interface implemented by a class&lt;/li&gt;

&lt;li&gt;&lt;p&gt;For injection is actually used the &lt;code&gt;AUTHENTICATION_SERVICE&lt;/code&gt; token&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-typescript&#34; data-lang=&#34;typescript&#34;&gt;&lt;span style=&#34;color:#00f&#34;&gt;import&lt;/span&gt; { Injectable, InjectionToken } from &lt;span style=&#34;color:#a31515&#34;&gt;&amp;#39;@angular/core&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#00f&#34;&gt;import&lt;/span&gt; { HttpClient, HttpHeaders } from &lt;span style=&#34;color:#a31515&#34;&gt;&amp;#39;@angular/common/http&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#00f&#34;&gt;import&lt;/span&gt; { Observable } from &lt;span style=&#34;color:#a31515&#34;&gt;&amp;#39;rxjs/Observable&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#00f&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#a31515&#34;&gt;&amp;#39;rxjs/add/operator/map&amp;#39;&lt;/span&gt;;

&lt;span style=&#34;color:#00f&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;interface&lt;/span&gt; IAuthenticationService {
login(username: &lt;span style=&#34;color:#2b91af&#34;&gt;string&lt;/span&gt;, password: &lt;span style=&#34;color:#2b91af&#34;&gt;string&lt;/span&gt;): Observable&amp;lt;any&amp;gt;;
extendToken(): Observable&amp;lt;any&amp;gt;;
logout();
isLoggedIn(): &lt;span style=&#34;color:#00f&#34;&gt;boolean&lt;/span&gt;;
hasRole(role: &lt;span style=&#34;color:#2b91af&#34;&gt;string&lt;/span&gt;): &lt;span style=&#34;color:#00f&#34;&gt;boolean&lt;/span&gt;;
}

&lt;span style=&#34;color:#00f&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; AUTHENTICATION_SERVICE = &lt;span style=&#34;color:#00f&#34;&gt;new&lt;/span&gt; InjectionToken&amp;lt;IAuthenticationService&amp;gt;(&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#39;AUTHENTICATION_SERVICE&amp;#39;&lt;/span&gt;);

&lt;span style=&#34;color:#00f&#34;&gt;@Injectable&lt;/span&gt;()
&lt;span style=&#34;color:#00f&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;class&lt;/span&gt; AuthenticationService &lt;span style=&#34;color:#00f&#34;&gt;implements&lt;/span&gt; IAuthenticationService {
&lt;span style=&#34;color:#00f&#34;&gt;constructor&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;private&lt;/span&gt; http: &lt;span style=&#34;color:#2b91af&#34;&gt;HttpClient&lt;/span&gt;) { }

&lt;span style=&#34;color:#008000&#34;&gt;// returns actually the token
&lt;/span&gt;&lt;span style=&#34;color:#008000&#34;&gt;&lt;/span&gt;login(username: &lt;span style=&#34;color:#2b91af&#34;&gt;string&lt;/span&gt;, password: &lt;span style=&#34;color:#2b91af&#34;&gt;string&lt;/span&gt;): Observable&amp;lt;any&amp;gt; {
    &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;this&lt;/span&gt;.http.post&amp;lt;any&amp;gt;(&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#39;api/sign-in&amp;#39;&lt;/span&gt;, { username: &lt;span style=&#34;color:#2b91af&#34;&gt;username&lt;/span&gt;, password: &lt;span style=&#34;color:#2b91af&#34;&gt;password&lt;/span&gt; })
        .map(token =&amp;gt; {
            &lt;span style=&#34;color:#00f&#34;&gt;this&lt;/span&gt;.updateToken(token);
            &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; token;
        });
}
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Injecting the dependency utilizing interface &lt;code&gt;IAuthenticationService&lt;/code&gt; and injection token &lt;code&gt;AUTHENTICATION_SERVICE&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-typescript&#34; data-lang=&#34;typescript&#34;&gt;&lt;span style=&#34;color:#00f&#34;&gt;constructor&lt;/span&gt;(
&lt;span style=&#34;color:#00f&#34;&gt;@Inject&lt;/span&gt;(AUTHENTICATION_SERVICE) &lt;span style=&#34;color:#00f&#34;&gt;private&lt;/span&gt; authenticationService: &lt;span style=&#34;color:#2b91af&#34;&gt;IAuthenticationService&lt;/span&gt;) { }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;creating-a-spy-object-mock&#34;&gt;Creating a spy object/mock&lt;/h1&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-typescript&#34; data-lang=&#34;typescript&#34;&gt;...

describe(&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#39;AppComponent&amp;#39;&lt;/span&gt;, () =&amp;gt; {
  &lt;span style=&#34;color:#00f&#34;&gt;let&lt;/span&gt; serviceSpy: &lt;span style=&#34;color:#2b91af&#34;&gt;jasmine.SpyObj&lt;/span&gt;&amp;lt;IMyService&amp;gt;;

  beforeEach(async(() =&amp;gt; {
    TestBed.configureTestingModule({
      declarations: [
        AppComponent
      ],
      providers: [
        {
          provide: &lt;span style=&#34;color:#2b91af&#34;&gt;MY_SERVICE&lt;/span&gt;,
          useValue: &lt;span style=&#34;color:#2b91af&#34;&gt;jasmine.createSpyObj&lt;/span&gt;(&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#39;IMyService&amp;#39;&lt;/span&gt;, [&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#39;isLoggedIn&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#a31515&#34;&gt;&amp;#39;hasRole&amp;#39;&lt;/span&gt;])
        }
      ],
      imports: [HttpClientTestingModule]
    }).compileComponents();
  }));

  beforeEach(() =&amp;gt; {
    serviceSpy = TestBed.get(MY_SERVICE);
    &lt;span style=&#34;color:#008000&#34;&gt;// preconfigure expected return value
&lt;/span&gt;&lt;span style=&#34;color:#008000&#34;&gt;&lt;/span&gt;    serviceSpy.hasRole = jasmine.createSpy().and.returnValue(&lt;span style=&#34;color:#00f&#34;&gt;false&lt;/span&gt;);
  });

...&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&#34;validating-passed-parameters-on-spy-mock&#34;&gt;Validating passed parameters on spy/mock&lt;/h1&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-typescript&#34; data-lang=&#34;typescript&#34;&gt;expect(serviceSpy.hasRole).toHaveBeenCalledWith(&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#39;admin&amp;#39;&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&#34;setting-returned-value-from-a-spy-mock-method&#34;&gt;Setting returned value from a spy/mock method&lt;/h1&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-typescript&#34; data-lang=&#34;typescript&#34;&gt;serviceSpy.hasRole = jasmine.createSpy().and.returnValue(&lt;span style=&#34;color:#00f&#34;&gt;false&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&#34;mocking-router-related-stuff&#34;&gt;Mocking router related stuff&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Needs to include module &lt;code&gt;RouterTestingModule&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;mocking-activatedroute-and-router&#34;&gt;Mocking ActivatedRoute and Router&lt;/h1&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-typescript&#34; data-lang=&#34;typescript&#34;&gt;&lt;span style=&#34;color:#00f&#34;&gt;import&lt;/span&gt; { ActivatedRoute, Router, convertToParamMap } from &lt;span style=&#34;color:#a31515&#34;&gt;&amp;#39;@angular/router&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#00f&#34;&gt;import&lt;/span&gt; { RouterTestingModule } from &lt;span style=&#34;color:#a31515&#34;&gt;&amp;#39;@angular/router/testing&amp;#39;&lt;/span&gt;;

...

  beforeEach(async(() =&amp;gt; {
    TestBed.configureTestingModule({
      declarations: [ LicenseEventLogComponent ],
      providers: [
        {
          provide: &lt;span style=&#34;color:#2b91af&#34;&gt;ActivatedRoute&lt;/span&gt;,
          useValue: {
            snapshot: {
              paramMap: &lt;span style=&#34;color:#2b91af&#34;&gt;convertToParamMap&lt;/span&gt;({ id: &lt;span style=&#34;color:#a31515&#34;&gt;&amp;#39;123&amp;#39;&lt;/span&gt; })
            }
          }
        },
        {
          provide: &lt;span style=&#34;color:#2b91af&#34;&gt;Router&lt;/span&gt;,
          useValue: &lt;span style=&#34;color:#2b91af&#34;&gt;jasmine.createSpyObj&lt;/span&gt;(&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#39;Router&amp;#39;&lt;/span&gt;, [&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#39;navigate&amp;#39;&lt;/span&gt;])
        },

...&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Jenkinsfile Sample Utilizing Docker Slave Agent</title>
      <link>https://voloda.bazilisek.net/2018/04/jenkinsfile-sample-utilizing-docker-slave-agent/</link>
      <pubDate>Tue, 03 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://voloda.bazilisek.net/2018/04/jenkinsfile-sample-utilizing-docker-slave-agent/</guid>
      <description>&lt;pre&gt;&lt;code&gt;pipeline {
  agent none

  environment {
    RELEASE_NUMBER = &#39;17.1.1&#39;
    VERSION_NUMBER = VersionNumber(versionNumberString: &#39;17.1.1.${BUILDS_ALL_TIME}&#39;)
  }


  stages {
    stage(&#39;Checkout from GIT&#39;){
      agent any
      steps {
        script {
          currentBuild.displayName = &amp;quot;#${VERSION_NUMBER}&amp;quot;
        }
        checkout scm
      }
    }
    stage(&#39;NUGET package restore&#39;) {
      agent { label &#39;nuget&#39; }
      steps {
            echo &#39;Restoring nuget packages&#39;
            bat &#39;&amp;quot;%NUGET_PATH%&amp;quot; restore TestSolution.sln&#39;
            dir (&#39;.&#39;) {
              stash &#39;sources&#39;
            }
      }
    }
    stage(&#39;Build&#39;) {
      agent { label &#39;dotNET_4.7&#39;}
      steps {
        dir (&#39;.&#39;) {
          unstash &#39;sources&#39;
        }

        bat &amp;quot;\&amp;quot;${tool name: &#39;Default&#39;, type: &#39;msbuild&#39;}\\msbuild.exe\&amp;quot; TestSolution.sln /p:Configuration=Release /p:Platform=\&amp;quot;Any CPU\&amp;quot;&amp;quot;

        dir (&#39;TestSolution/bin&#39;) {
          stash &#39;bins&#39;
        }
        withCredentials([usernamePassword(credentialsId: &#39;cdd06d32-f11d-446c-8687-3debc9dba901&#39;, passwordVariable: &#39;GIT_PASSWORD&#39;, usernameVariable: &#39;GIT_USERNAME&#39;)]) {
          bat &amp;quot;git tag &#39;j-${VERSION_NUMBER}&#39;&amp;quot;

          bat &amp;quot;git push http://${GIT_USERNAME}:${GIT_PASSWORD}@git.server.net/TestSolution2.git --tags&amp;quot;
        }
      }
    }
    stage(&#39;Archive&#39;) {
      agent any
      steps {
        dir (&#39;TestSolution/bin&#39;) {
          unstash &#39;bins&#39;
        }
        archive &#39;**/bin/Release/**.dll&#39;
      }
    }
  }

}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Angular5 and ASP.NET Core 2.0 cheat sheet</title>
      <link>https://voloda.bazilisek.net/2018/03/angular5-and-aspnet-core-20-cheat-sheet/</link>
      <pubDate>Mon, 26 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://voloda.bazilisek.net/2018/03/angular5-and-aspnet-core-20-cheat-sheet/</guid>
      <description>

&lt;p&gt;Couple of notes on setting up a project on Angular5 utilizing .NET Core 2.0
WebAPI.&lt;/p&gt;

&lt;h1 id=&#34;code-organization&#34;&gt;Code organization&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;ProjectRootFolder
|
+.git
|
+-AngularProjectFolder
|
+-dotNetCoreProjectFolder
  |
  +-wwwroot
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;project-setup&#34;&gt;Project setup&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Create project root folder with git repository:

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mkdir ProjectRootFolder&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cd ProjectRootFolder&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git init&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Create dotNet Core API application

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dotnet new webapi -n ProjectWebApi&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Create Angular 5 application

&lt;ul&gt;
&lt;li&gt;Assumes Angular5 CLI is available already (see &lt;a href=&#34;https://angular.io/guide/quickstart&#34;&gt;https://angular.io/guide/quickstart&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ng new project-web-ui&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Customize build output path in &lt;code&gt;.angular-cli.json&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Set &lt;code&gt;outDir&lt;/code&gt; to &lt;code&gt;../ProjectWebApi/WWWRoot/&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;angular-5-cli-commands&#34;&gt;Angular 5 CLI commands&lt;/h1&gt;

&lt;h2 id=&#34;running-angular5-and-net-core-2-0-backend-service-localy-during-development&#34;&gt;Running Angular5 and .NET Core 2.0 backend service localy during development&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;First create &lt;code&gt;proxy.config.json&lt;/code&gt; file in the root of web site source code.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;{
  &lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;/api&amp;#34;&lt;/span&gt;: {
      &lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;target&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;http://localhost:56785&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;secure&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#00f&#34;&gt;false&lt;/span&gt;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Update &lt;code&gt;/api&lt;/code&gt; to a virtual folder which should be proxified&lt;/li&gt;
&lt;li&gt;Update &lt;code&gt;target&lt;/code&gt; to point to API&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Run &lt;code&gt;ng serve --proxy-config proxy.config.json&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;running-karma-tests&#34;&gt;Running KARMA tests&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ng test&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;When testing components it may require &lt;code&gt;ng test --sourcemaps=false&lt;/code&gt; to avoid issues&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;building-angular5-website-which-will-be-deployed-to-a-virtual-folder&#34;&gt;Building Angular5 website which will be deployed to a virtual folder&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ng build --base-href &amp;quot;/alx/&amp;quot;&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;alx&lt;/code&gt; is the virtual folder on the server (updates &lt;code&gt;&amp;lt;base href/&amp;gt;&lt;/code&gt; tag
inside the &lt;code&gt;index.html&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;deployment&#34;&gt;Deployment&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;IIS requires dotNet core support installed

&lt;ul&gt;
&lt;li&gt;See &lt;a href=&#34;https://docs.microsoft.com/en-us/aspnet/core/host-and-deploy/iis/?tabs=aspnetcore2x&#34;&gt;https://docs.microsoft.com/en-us/aspnet/core/host-and-deploy/iis/?tabs=aspnetcore2x&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Pay special attention to &lt;strong&gt;.NET Core Windows Server Hosting bundle&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Other than that create appropriate Application Pool as described and deploy
the application.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Biggest challenge so far is that the WebAPI process is running all the time
and cannot be easily upgraded.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
