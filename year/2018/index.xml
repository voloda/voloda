<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>2018 on My personal notes on various topics</title>
    <link>http://voloda.bazilisek.net/year/2018/</link>
    <description>Recent content in 2018 on My personal notes on various topics</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 03 Apr 2018 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="http://voloda.bazilisek.net/year/2018/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Jenkinsfile Sample Utilizing Docker Slave Agent</title>
      <link>http://voloda.bazilisek.net/2018/04/jenkinsfile-sample-utilizing-docker-slave-agent/</link>
      <pubDate>Tue, 03 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>http://voloda.bazilisek.net/2018/04/jenkinsfile-sample-utilizing-docker-slave-agent/</guid>
      <description>&lt;pre&gt;&lt;code&gt;pipeline {
  agent none

  environment {
    RELEASE_NUMBER = &#39;17.1.1&#39;
    VERSION_NUMBER = VersionNumber(versionNumberString: &#39;17.1.1.${BUILDS_ALL_TIME}&#39;)
  }


  stages {
    stage(&#39;Checkout from GIT&#39;){
      agent any
      steps {
        script {
          currentBuild.displayName = &amp;quot;#${VERSION_NUMBER}&amp;quot;
        }
        checkout scm
      }
    }
    stage(&#39;NUGET package restore&#39;) {
      agent { label &#39;nuget&#39; }
      steps {
            echo &#39;Restoring nuget packages&#39;
            bat &#39;&amp;quot;%NUGET_PATH%&amp;quot; restore TestSolution.sln&#39;
            dir (&#39;.&#39;) {
              stash &#39;sources&#39;
            }
      }
    }
    stage(&#39;Build&#39;) {
      agent { label &#39;dotNET_4.7&#39;}
      steps {
        dir (&#39;.&#39;) {
          unstash &#39;sources&#39;
        }

        bat &amp;quot;\&amp;quot;${tool name: &#39;Default&#39;, type: &#39;msbuild&#39;}\\msbuild.exe\&amp;quot; TestSolution.sln /p:Configuration=Release /p:Platform=\&amp;quot;Any CPU\&amp;quot;&amp;quot;

        dir (&#39;TestSolution/bin&#39;) {
          stash &#39;bins&#39;
        }
        withCredentials([usernamePassword(credentialsId: &#39;cdd06d32-f11d-446c-8687-3debc9dba901&#39;, passwordVariable: &#39;GIT_PASSWORD&#39;, usernameVariable: &#39;GIT_USERNAME&#39;)]) {
          bat &amp;quot;git tag &#39;j-${VERSION_NUMBER}&#39;&amp;quot;

          bat &amp;quot;git push http://${GIT_USERNAME}:${GIT_PASSWORD}@git.server.net/TestSolution2.git --tags&amp;quot;
        }
      }
    }
    stage(&#39;Archive&#39;) {
      agent any
      steps {
        dir (&#39;TestSolution/bin&#39;) {
          unstash &#39;bins&#39;
        }
        archive &#39;**/bin/Release/**.dll&#39;
      }
    }
  }

}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Angular5 and ASP.NET Core 2.0 cheat sheet</title>
      <link>http://voloda.bazilisek.net/2018/03/angular5-and-aspnet-core-20-cheat-sheet/</link>
      <pubDate>Mon, 26 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>http://voloda.bazilisek.net/2018/03/angular5-and-aspnet-core-20-cheat-sheet/</guid>
      <description>

&lt;p&gt;Couple of notes on setting up a project on Angular5 utilizing .NET Core 2.0
WebAPI.&lt;/p&gt;

&lt;h1 id=&#34;code-organization&#34;&gt;Code organization&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;ProjectRootFolder
|
+.git
|
+-AngularProjectFolder
|
+-dotNetCoreProjectFolder
  |
  +-wwwroot
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;project-setup&#34;&gt;Project setup&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Create project root folder with git repository:

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mkdir ProjectRootFolder&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cd ProjectRootFolder&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git init&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Create dotNet Core API application

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dotnet new webapi -n ProjectWebApi&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Create Angular 5 application

&lt;ul&gt;
&lt;li&gt;Assumes Angular5 CLI is available already (see &lt;a href=&#34;https://angular.io/guide/quickstart&#34;&gt;https://angular.io/guide/quickstart&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ng new project-web-ui&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Customize build output path in &lt;code&gt;.angular-cli.json&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Set &lt;code&gt;outDir&lt;/code&gt; to &lt;code&gt;../ProjectWebApi/WWWRoot/&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;angular-5-cli-commands&#34;&gt;Angular 5 CLI commands&lt;/h1&gt;

&lt;h2 id=&#34;running-angular5-and-net-core-2-0-backend-service-localy-during-development&#34;&gt;Running Angular5 and .NET Core 2.0 backend service localy during development&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;First create &lt;code&gt;proxy.config.json&lt;/code&gt; file in the root of web site source code.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;{
  &lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;/api&amp;#34;&lt;/span&gt;: {
      &lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;target&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;http://localhost:56785&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;secure&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#00f&#34;&gt;false&lt;/span&gt;
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Update &lt;code&gt;/api&lt;/code&gt; to a virtual folder which should be proxified&lt;/li&gt;
&lt;li&gt;Update &lt;code&gt;target&lt;/code&gt; to point to API&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Run &lt;code&gt;ng serve --proxy-config proxy.config.json&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;running-karma-tests&#34;&gt;Running KARMA tests&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ng test&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;When testing components it may require &lt;code&gt;ng test --sourcemaps=false&lt;/code&gt; to avoid issues&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;building-angular5-website-which-will-be-deployed-to-a-virtual-folder&#34;&gt;Building Angular5 website which will be deployed to a virtual folder&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ng build --base-href &amp;quot;/alx/&amp;quot;&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;alx&lt;/code&gt; is the virtual folder on the server (updates &lt;code&gt;&amp;lt;base href/&amp;gt;&lt;/code&gt; tag
inside the &lt;code&gt;index.html&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;deployment&#34;&gt;Deployment&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;IIS requires dotNet core support installed

&lt;ul&gt;
&lt;li&gt;See &lt;a href=&#34;https://docs.microsoft.com/en-us/aspnet/core/host-and-deploy/iis/?tabs=aspnetcore2x&#34;&gt;https://docs.microsoft.com/en-us/aspnet/core/host-and-deploy/iis/?tabs=aspnetcore2x&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Pay special attention to &lt;strong&gt;.NET Core Windows Server Hosting bundle&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Other than that create appropriate Application Pool as described and deploy
the application.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Biggest challenge so far is that the WebAPI process is running all the time
and cannot be easily upgraded.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
