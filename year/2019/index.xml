<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>2019 on My personal notes on various topics</title>
    <link>https://voloda.bazilisek.net/year/2019/</link>
    <description>Recent content in 2019 on My personal notes on various topics</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>(c) 2010-2019 Vladimir Kloz</copyright>
    <lastBuildDate>Wed, 13 Nov 2019 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://voloda.bazilisek.net/year/2019/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>ASP.NET Core 2.2 to 3.0 migration</title>
      <link>https://voloda.bazilisek.net/2019/11/asp-net-core-2-2-to-3-0-migration/</link>
      <pubDate>Wed, 13 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://voloda.bazilisek.net/2019/11/asp-net-core-2-2-to-3-0-migration/</guid>
      <description>

&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Notes below are kind of switching between .NET Core &amp;amp; .NET Standard &amp;amp; ASP.NET Core as it makes sense. Those are all closely related although perhaps not really&amp;hellip;&lt;/li&gt;
&lt;li&gt;There is still some confusion on my part so some of the information below may not be fully accurate - I would hear back to learn.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;lessons-re-learned-asp-net-core-is-not-net-core&#34;&gt;Lessons (re-)learned - ASP.NET Core is not .NET Core&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;None&lt;/strong&gt; of the ASP.NET Core APIs is considered to be part of .NET Standard

&lt;ul&gt;
&lt;li&gt;It is obvious but it is easy to forget about it. Things like: &lt;code&gt;Microsoft.Extensions.Logging.Abstractions&lt;/code&gt;, &lt;code&gt;Microsoft.Extensions.DependencyInjection.Abstractions&lt;/code&gt; etc. are part of ASP.NET Core and thus are not covered by .NET Standard 2.0&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Things are not made simpler since ASP.NET Core has same major version as new .NET Core (3.0)&lt;/li&gt;
&lt;li&gt;ASP.NET Core 3.0 implements breaking changes (logging, service setup, &amp;hellip;) - intent is clearly stated by major version change&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;implications&#34;&gt;Implications&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Third party libraries which state that are .NET Standard 2.0 are not necessarily compatible with ASP.NET Core 3.0

&lt;ul&gt;
&lt;li&gt;The reason is that ASP.NET Core 3.0 allows safely reference .NET Standard 2.0 assemblies but upgrades references according to built-in versioning policies&lt;/li&gt;
&lt;li&gt;So in compile time things will pass while in runtime some of the libraries my start throwing runtime exception like missing methods etc. since those are now using ASP.NET Core 3.0 libraries instead of ASP.NET Core 2.2.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;There is a change in some of the areas - with older version of ASP.NET Core it was possible to easily write unit tests or expand functionality since majority of event internal things was exposed as public - I came across places which heavily moved towards the &lt;code&gt;internal&lt;/code&gt; implementation.&lt;/li&gt;
&lt;li&gt;The safest way how to avoid issues above seems to be re-target all the libraries to .NET Standard 2.1 and re-compile.

&lt;ul&gt;
&lt;li&gt;Suggestion in some ASP.NET Core forums is to rather re-target to ASP.NET Core 2.2&lt;/li&gt;
&lt;li&gt;This means that it will be never possible to consume such libraries in full .NET Framework&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;General suggestion for library creators is to stay with .NET Standard 2.0

&lt;ul&gt;
&lt;li&gt;Which implies that C# 8 features cannot be used&lt;/li&gt;
&lt;li&gt;Or to split and target two platforms utilizing old style &lt;code&gt;#if&lt;/code&gt; and/or project changes.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;links&#34;&gt;Links&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/dotnet/standard/net-standard&#34;&gt;https://docs.microsoft.com/en-us/dotnet/standard/net-standard&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Full .NET Framework will never support .NET Standard 2.1 but will be supported with Xamarin and Mono&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devblogs.microsoft.com/dotnet/announcing-net-standard-2-1/&#34;&gt;https://devblogs.microsoft.com/dotnet/announcing-net-standard-2-1/&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Full .NET Framework is going to stay on .NET Standard 2.0&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://devblogs.microsoft.com/dotnet/introducing-net-5/&#34;&gt;https://devblogs.microsoft.com/dotnet/introducing-net-5/&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Produce a single .NET runtime and framework that can be used everywhere and that has uniform runtime behaviors and developer experiences.&lt;/li&gt;
&lt;li&gt;Expand the capabilities of .NET by taking the best of .NET Core, .NET Framework, Xamarin and Mono.&lt;/li&gt;
&lt;li&gt;Build that product out of a single code-base that developers (Microsoft and the community) can work on and expand together and that improves all scenarios.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Event sourcing and command sourcing</title>
      <link>https://voloda.bazilisek.net/2019/10/event-sourcing-and-command-sourcing/</link>
      <pubDate>Wed, 23 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://voloda.bazilisek.net/2019/10/event-sourcing-and-command-sourcing/</guid>
      <description>

&lt;p&gt;Notes based on playing and researching the Event Sourcing &amp;amp; Command Sourcing.&lt;/p&gt;

&lt;p&gt;This is closely related to microservices if applied properly.&lt;/p&gt;

&lt;h1 id=&#34;event-sourcing-and-command-sourcing&#34;&gt;Event sourcing and command sourcing&lt;/h1&gt;

&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Good segregation of application logic in terms of data modification and querying

&lt;ul&gt;
&lt;li&gt;This should simplify reasoning about the application logic&lt;/li&gt;
&lt;li&gt;Since all modifications are just a stream of events it avoids side-effects people tend to put into read logic&lt;/li&gt;
&lt;li&gt;Also allows to have optimal models for each of above&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Improved scalability - write part is append-only so it reduces locking complexity&lt;/li&gt;
&lt;li&gt;If read model is updated asynchronously then not very well suited for complex screens where user can edit many fields and assumes upon save to get refreshed data&lt;/li&gt;
&lt;li&gt;Well suited for task oriented UI&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Commands&lt;/strong&gt; - requested actions to be performed on the model, should be named as verbs

&lt;ul&gt;
&lt;li&gt;Commands are immutable - they live just for short time of transfer from caller to command handler&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Events&lt;/strong&gt; - performed model state changes, should use past tense (something happened and it cannot be undone)

&lt;ul&gt;
&lt;li&gt;Events are immutable - past cannot be changed&lt;/li&gt;
&lt;li&gt;Stored in a sequential log which can be later used for analysis of what happened in the system&lt;/li&gt;
&lt;li&gt;Can be used later to update for example querying model&lt;/li&gt;
&lt;li&gt;Fixing a state change should be done by adding another event which reverts the previous operation&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;dealing-with-concurrency&#34;&gt;Dealing with concurrency&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Pretty simple:

&lt;ul&gt;
&lt;li&gt;Event can contain &amp;lsquo;version&amp;rsquo; of model which is being updated&lt;/li&gt;
&lt;li&gt;Event log then can have a unique constraint for each aggregate id and model version&lt;/li&gt;
&lt;li&gt;Assuming two or more concurrent actions updated the same aggregate on same version one of the updates will fail&lt;/li&gt;
&lt;li&gt;Command handler then can decide:

&lt;ul&gt;
&lt;li&gt;Retry the same operation with some merge logic&lt;/li&gt;
&lt;li&gt;Fail the operation&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;This constraint can be implemented in relation database as well as other services (like Google Firebase).&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;operations-which-require-multiple-aggregates&#34;&gt;Operations which require multiple aggregates&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;In monoliths usually a transaction covering multiple tables&lt;/li&gt;
&lt;li&gt;In microservices this would usually mean at least distributed transaction

&lt;ul&gt;
&lt;li&gt;Often this is just not possible since some systems simply do not support it or even worse - have just limited or no transactional support&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;This can be to some degree solved by &lt;a href=&#34;https://microservices.io/patterns/data/saga.html&#34;&gt;saga pattern&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;Either flow of events processed asynchronously as the individual services progress in processing&lt;/li&gt;
&lt;li&gt;Or performed from one place as a sequence of steps which subsequently update states&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;challenges&#34;&gt;Challenges&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Defining right aggregate

&lt;ul&gt;
&lt;li&gt;This is crucial since each aggregate then has own event log etc.&lt;/li&gt;
&lt;li&gt;Aggregate should never perform operations outside itself&lt;/li&gt;
&lt;li&gt;As result in relation database this wouldn&amp;rsquo;t need FK constraints&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;What belongs to command handler vs. event handler?

&lt;ul&gt;
&lt;li&gt;This seems to be sometimes a bit unclear and even various sources have various requirements - e.g. where belongs sending an email - to command handler or to event handler?&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Rebuilding model from events each time may be slow - some kind of caching may be needed - memory cache can be used for this.&lt;/li&gt;
&lt;li&gt;Dealing with structural changes of commands and events due to bugfixing etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;links&#34;&gt;Links&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://microservices.io/&#34;&gt;https://microservices.io/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cqrs.nu/&#34;&gt;https://cqrs.nu/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Google Cloud Builds - Commit to GitHub repository</title>
      <link>https://voloda.bazilisek.net/2019/10/google-cloud-builds-commit-to-github-repository/</link>
      <pubDate>Tue, 22 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://voloda.bazilisek.net/2019/10/google-cloud-builds-commit-to-github-repository/</guid>
      <description>

&lt;p&gt;Setting up a cloud builder task to commit back to a Github repository using &lt;code&gt;Deploy keys&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&#34;intro&#34;&gt;Intro&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Sometimes it is useful to be able perform write operations in github repositories (or access a private repository etc.)&lt;/li&gt;
&lt;li&gt;This requires setting up an account with permissions&lt;/li&gt;
&lt;li&gt;An alternative would be setting up a cloud builder with SSH key which will be authorized to access the repository&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Cloud builder task below generates an RSA key which will be part of the task and can be allowed to access repository&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Be aware that each key can be authorized to access a single repository only&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;Dockerfile&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-dockerfile&#34; data-lang=&#34;dockerfile&#34;&gt;&lt;span style=&#34;color:#00f&#34;&gt;FROM&lt;/span&gt;&lt;span style=&#34;color:#a31515&#34;&gt; gcr.io/cloud-builders/git&lt;/span&gt;&lt;span style=&#34;&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;CMD&lt;/span&gt;&lt;span style=&#34;color:#a31515&#34;&gt; [ &amp;#39;/bin/sh&amp;#39;, &amp;#39;-c&amp;#39; ]&lt;/span&gt;&lt;span style=&#34;&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;&#34;&gt;&lt;/span&gt;COPY known_hosts /root/.ssh/known_hosts&lt;span style=&#34;&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;RUN&lt;/span&gt; ssh-keygen -t rsa -N &lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; -f ~/.ssh/id_rsa&lt;span style=&#34;&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;RUN&lt;/span&gt; cat ~/.ssh/id_rsa.pub&lt;span style=&#34;&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;ENTRYPOINT&lt;/span&gt;&lt;span style=&#34;color:#a31515&#34;&gt; [&amp;#34;git&amp;#34;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;known_hosts&lt;/code&gt; (collocated with &lt;code&gt;Dockerfile&lt;/code&gt;)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-txt&#34; data-lang=&#34;txt&#34;&gt;github.com,192.30.253.113 ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ==&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;cloudbuild.yaml&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;steps:
- name: &lt;span style=&#34;color:#a31515&#34;&gt;&amp;#39;gcr.io/cloud-builders/docker&amp;#39;&lt;/span&gt;
args: [&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#39;build&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#a31515&#34;&gt;&amp;#39;--tag=gcr.io/$PROJECT_ID/github&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#a31515&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;]

images:
- &lt;span style=&#34;color:#a31515&#34;&gt;&amp;#39;gcr.io/$PROJECT_ID/github:latest&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Once you build your cloud builder check the log and look for the generated public key:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-txt&#34; data-lang=&#34;txt&#34;&gt;Step 5/6 : RUN cat ~/.ssh/id_rsa.pub
---&amp;gt; Running in 32c7423c4915
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC/XRz6pyjViympvwmj7Y2QWSO+ZeahAn3xlsJlmnY+3mODKXieHKnI6Zyt26MCrLpgZ30LhQ1m2WcVZJHGkmot+mYt70Lr1spD9AJ3RCaVOuphBsOhyKzRh9Qq6qtEBBiA+TnRYlRTxE51879/9WJXCbM6Bb27bUYRPRMWAAxeY+pF2zUjk5A/mgfHE/+OfHVeWkKlPjNIV+keZ8TlLvH51ntuTdwrC7rq3TFGkrkXJQ6tqNnlqaFORpJ6KiDkgCryqCByadZnJOsEbA1bFt9q2mpXVnyL6YjV8MuVf8XY+yYjs7xZCRtAMPZXtEcqv+S1JjTlDIOKX4BCeD/M4Ok3 root@cf525f31d11f&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Take the line starting with &lt;code&gt;ssh-rsa&lt;/code&gt; to clipboard and add it to your Github repository:&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&#34;https://voloda.bazilisek.net/img/mix/github_deploy_keys.jpg&#34; alt=&#34;Github Deploy Keys setup&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Be careful though - the secrets are now stored as a part of GCP project where the cloudbuilder task image is saved so if somebody gets access to your project or docker image she will get access to your Github repository&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;links&#34;&gt;Links&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://console.cloud.google.com/cloud-build/builds&#34;&gt;Google cloud builds&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://console.cloud.google.com/gcr/images/&#34;&gt;Google cloud container registry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cloud.google.com/cloud-build/&#34;&gt;Google cloud builds documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Google Cloud Builds - First Attempts To Build .NET Core and Angular</title>
      <link>https://voloda.bazilisek.net/2019/04/google-cloud-builds-first-attempts-to-build-dotnet-core-and-angular/</link>
      <pubDate>Mon, 08 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://voloda.bazilisek.net/2019/04/google-cloud-builds-first-attempts-to-build-dotnet-core-and-angular/</guid>
      <description>

&lt;p&gt;Experience with setting up first cloud build for .NET Core &amp;amp; Angular.&lt;/p&gt;

&lt;h1 id=&#34;intro&#34;&gt;Intro&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Read manuals carefully - you can test your build locally using Google Cloud SDK
&lt;strong&gt;but&lt;/strong&gt; it doesn&amp;rsquo;t work on Windows. So if you want to give it a try setup a Linux
machine for it.&lt;/li&gt;
&lt;li&gt;I strongly recommend to setup Google Cloud SDK on your Linux machine manually and
not thru a package manager - this may save you a lot of time since &lt;code&gt;gcloud components install&lt;/code&gt;
will work for you and thus examples can be followed easily.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Rule of thumb - it is simple! Really - it is simple!&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Individual cloud builders are just docker images which have
the entrypoint configured to the given tool - you can use them directly assuming that you
simply specify &lt;code&gt;entrypoint&lt;/code&gt; in your YAML (this is pretty useful for initial playing with the builds):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;steps:
- name: gcr.io/$PROJECT_ID/ng:v7
dir: &lt;span style=&#34;color:#a31515&#34;&gt;&amp;#39;./TestApp/ClientApp&amp;#39;&lt;/span&gt;
entrypoint: &lt;span style=&#34;color:#a31515&#34;&gt;&amp;#39;npm&amp;#39;&lt;/span&gt;
args: [
&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#39;ci&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#a31515&#34;&gt;&amp;#39;--unsafe-perm&amp;#39;&lt;/span&gt;
]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;angular-net-core-build-task-image&#34;&gt;Angular &amp;amp; .NET Core build task image&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Create a git repository in GCP or just fork this &lt;a href=&#34;https://github.com/voloda/CloudBuilderAngularDotNetCore&#34;&gt;GitHub repository&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;In &lt;a href=&#34;https://console.cloud.google.com/cloud-build/builds&#34;&gt;Google cloud console&lt;/a&gt; setup a build hook pointing to &lt;code&gt;cloudbuild.yaml&lt;/code&gt; in the repository&lt;/li&gt;
&lt;li&gt;Kick-off the build&lt;/li&gt;

&lt;li&gt;&lt;p&gt;This should prepare for you an image in your project container registry which can be used to build Angular 7 &amp;amp; .NET Core Application&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;Dockerfile&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-dockerfile&#34; data-lang=&#34;dockerfile&#34;&gt;&lt;span style=&#34;color:#00f&#34;&gt;FROM&lt;/span&gt;&lt;span style=&#34;color:#a31515&#34;&gt; microsoft/dotnet:sdk&lt;/span&gt;&lt;span style=&#34;&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;CMD&lt;/span&gt;&lt;span style=&#34;color:#a31515&#34;&gt; [ &amp;#39;/bin/sh&amp;#39;, &amp;#39;-c&amp;#39; ]&lt;/span&gt;&lt;span style=&#34;&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;RUN&lt;/span&gt; curl -sL https://deb.nodesource.com/setup_10.x | bash -&lt;span style=&#34;&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;RUN&lt;/span&gt; apt-get install -y nodejs&lt;span style=&#34;&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;RUN&lt;/span&gt; npm install -g @angular/cli@7.2.2 --unsafe-perms&lt;span style=&#34;&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;ENTRYPOINT&lt;/span&gt;&lt;span style=&#34;color:#a31515&#34;&gt; [&amp;#34;dotnet&amp;#34;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;cloudbuild.yaml&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;    
steps:
- name: gcr.io/cloud-builders/docker
args: [ &lt;span style=&#34;color:#a31515&#34;&gt;&amp;#39;build&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#a31515&#34;&gt;&amp;#39;-t&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#a31515&#34;&gt;&amp;#39;gcr.io/$PROJECT_ID/cloudbuilderangulardotnetcore:current&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#a31515&#34;&gt;&amp;#39;-f&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#a31515&#34;&gt;&amp;#39;Dockerfile&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#a31515&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt; ]

images:
- &lt;span style=&#34;color:#a31515&#34;&gt;&amp;#39;gcr.io/$PROJECT_ID/cloudbuilderangulardotnetcore:current&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;building-asp-net-core-angular-image-from-google-cloud-builds&#34;&gt;Building ASP.NET Core &amp;amp; Angular image from Google Cloud Builds&lt;/h1&gt;

&lt;h2 id=&#34;use-the-standard-dockerfile&#34;&gt;Use the standard Dockerfile&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;This is easiest approach&lt;/li&gt;
&lt;li&gt;Nice thing is that it can be used even locally and on Windows&lt;/li&gt;
&lt;li&gt;It is simply &lt;code&gt;docker build&lt;/code&gt; command - due to its caching mechanism &amp;amp; layering it is pretty efficient&lt;/li&gt;
&lt;li&gt;The disadvantage is that output artifacts are just docker images&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;Dockerfile&lt;/code&gt; can be simply combined with cloud build YAML so the resulting image
is pushed to container registry:&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;Dockerfile&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-dockerfile&#34; data-lang=&#34;dockerfile&#34;&gt;&lt;span style=&#34;color:#00f&#34;&gt;FROM&lt;/span&gt;&lt;span style=&#34;color:#a31515&#34;&gt; microsoft/dotnet:sdk AS build-env&lt;/span&gt;&lt;span style=&#34;&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;WORKDIR&lt;/span&gt;&lt;span style=&#34;color:#a31515&#34;&gt; /app&lt;/span&gt;&lt;span style=&#34;&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#008000&#34;&gt;# Copy csproj and restore as distinct layers&lt;/span&gt;&lt;span style=&#34;&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;&#34;&gt;&lt;/span&gt;COPY *.csproj ./&lt;span style=&#34;&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;RUN&lt;/span&gt; dotnet restore&lt;span style=&#34;&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#008000&#34;&gt;# Copy everything else and build&lt;/span&gt;&lt;span style=&#34;&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;&#34;&gt;&lt;/span&gt;COPY . ./&lt;span style=&#34;&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;RUN&lt;/span&gt; dotnet publish -c Release -o out&lt;span style=&#34;&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#008000&#34;&gt;# Build runtime image&lt;/span&gt;&lt;span style=&#34;&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;FROM&lt;/span&gt;&lt;span style=&#34;color:#a31515&#34;&gt; microsoft/dotnet:aspnetcore-runtime&lt;/span&gt;&lt;span style=&#34;&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;WORKDIR&lt;/span&gt;&lt;span style=&#34;color:#a31515&#34;&gt; /app&lt;/span&gt;&lt;span style=&#34;&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;&#34;&gt;&lt;/span&gt;COPY --from=build-env /app/out .&lt;span style=&#34;&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;ENTRYPOINT&lt;/span&gt;&lt;span style=&#34;color:#a31515&#34;&gt; [&amp;#34;dotnet&amp;#34;, &amp;#34;aspnetapp.dll&amp;#34;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;cloudbuild.yaml&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;steps:
- name: gcr.io/cloud-builders/docker
args: [ &lt;span style=&#34;color:#a31515&#34;&gt;&amp;#39;build&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#a31515&#34;&gt;&amp;#39;-t&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#a31515&#34;&gt;&amp;#39;gcr.io/$PROJECT_ID/testweb:current&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#a31515&#34;&gt;&amp;#39;-f&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#a31515&#34;&gt;&amp;#39;Dockerfile&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#a31515&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt; ]

images:
- &lt;span style=&#34;color:#a31515&#34;&gt;&amp;#39;gcr.io/$PROJECT_ID/testweb:current&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;use-cloud-build-with-steps&#34;&gt;Use cloud build with steps&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;This fully leverages cloud build features&lt;/li&gt;
&lt;li&gt;The main difference is that while this still uses Docker for builds it leverages &lt;code&gt;docker run&lt;/code&gt; command&lt;/li&gt;
&lt;li&gt;The source code is basically mounted to created container thru a volume located in &lt;code&gt;/workspace&lt;/code&gt; directory
which can be used to exchange content between individual steps&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The cloud build directly supports grabbing the artifacts from &lt;code&gt;/workspace&lt;/code&gt; so the build output is not necessarily only docker image&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;steps:
- name: gcr.io/cloud-builders/docker
args: [ &lt;span style=&#34;color:#a31515&#34;&gt;&amp;#39;build&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#a31515&#34;&gt;&amp;#39;-t&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#a31515&#34;&gt;&amp;#39;gcr.io/$PROJECT_ID/testweb:current&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#a31515&#34;&gt;&amp;#39;-f&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#a31515&#34;&gt;&amp;#39;Dockerfile&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#a31515&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt; ]

images:
- &lt;span style=&#34;color:#a31515&#34;&gt;&amp;#39;gcr.io/$PROJECT_ID/testweb:current&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Split the build into individual steps called explicitly:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;steps:

...
&lt;span style=&#34;color:#008000&#34;&gt;# Restore packages&lt;/span&gt;
- name: gcr.io/$PROJECT_ID/cloudbuilderangulardotnetcore:current
args: [
      &lt;span style=&#34;color:#a31515&#34;&gt;&amp;#39;restore&amp;#39;&lt;/span&gt;
    ]
&lt;span style=&#34;color:#008000&#34;&gt;# Build the project&lt;/span&gt;
- name: gcr.io/$PROJECT_ID/cloudbuilderangulardotnetcore:current
args: [
      &lt;span style=&#34;color:#a31515&#34;&gt;&amp;#39;build&amp;#39;&lt;/span&gt;,
      &lt;span style=&#34;color:#a31515&#34;&gt;&amp;#39;-c&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#a31515&#34;&gt;&amp;#39;Release&amp;#39;&lt;/span&gt;,
      &lt;span style=&#34;color:#a31515&#34;&gt;&amp;#39;--no-restore&amp;#39;&lt;/span&gt;
    ]

&lt;span style=&#34;color:#008000&#34;&gt;# Run tests&lt;/span&gt;
- name: gcr.io/$PROJECT_ID/cloudbuilderangulardotnetcore:current
args: [
      &lt;span style=&#34;color:#a31515&#34;&gt;&amp;#39;test&amp;#39;&lt;/span&gt;,
      &lt;span style=&#34;color:#a31515&#34;&gt;&amp;#39;-c&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#a31515&#34;&gt;&amp;#39;Release&amp;#39;&lt;/span&gt;,
      &lt;span style=&#34;color:#a31515&#34;&gt;&amp;#39;--no-restore&amp;#39;&lt;/span&gt;
    ]

&lt;span style=&#34;color:#008000&#34;&gt;# Publish build result&lt;/span&gt;
- name: gcr.io/$PROJECT_ID/cloudbuilderangulardotnetcore:current
args: [
      &lt;span style=&#34;color:#a31515&#34;&gt;&amp;#39;publish&amp;#39;&lt;/span&gt;,
      &lt;span style=&#34;color:#a31515&#34;&gt;&amp;#39;-c&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#a31515&#34;&gt;&amp;#39;Release&amp;#39;&lt;/span&gt;,
      &lt;span style=&#34;color:#a31515&#34;&gt;&amp;#39;--no-restore&amp;#39;&lt;/span&gt;,
      &lt;span style=&#34;color:#a31515&#34;&gt;&amp;#39;-o&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#a31515&#34;&gt;&amp;#39;/workspace/publish&amp;#39;&lt;/span&gt;
    ]
....&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;links&#34;&gt;Links&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://console.cloud.google.com/cloud-build/builds&#34;&gt;Google cloud builds&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://console.cloud.google.com/gcr/images/&#34;&gt;Google cloud container registry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cloud.google.com/cloud-build/&#34;&gt;Google cloud builds documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
