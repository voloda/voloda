<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>2014 on My personal notes</title>
    <link>http://voloda.bazilisek.net/year/2014/</link>
    <description>Recent content in 2014 on My personal notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 18 Dec 2014 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="http://voloda.bazilisek.net/year/2014/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>How to post markdown article on blogspot/blogger with enabled code syntax highlighting</title>
      <link>http://voloda.bazilisek.net/2014/12/how-to-post-markdown-article-on-blogspot-blogger-with-enabled-code-syntax-highlighting/</link>
      <pubDate>Thu, 18 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>http://voloda.bazilisek.net/2014/12/how-to-post-markdown-article-on-blogspot-blogger-with-enabled-code-syntax-highlighting/</guid>
      <description>

&lt;h1 id=&#34;how-to&#34;&gt;How-to&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Open &lt;a href=&#34;http://stackedit.io&#34;&gt;StackEdit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;In blogger create a new post and get postId from the URL&lt;/li&gt;
&lt;li&gt;Setup post permalink to match the title&lt;/li&gt;
&lt;li&gt;Using # synchronize the document with google drive&lt;/li&gt;
&lt;li&gt;Using # publish the article to blogspot&lt;/li&gt;
&lt;li&gt;As you keep editing simply synchronize/re-publish the article&lt;/li&gt;
&lt;li&gt;In order to enable syntax highlighting for the C#/XML or any other code edit the blogspot template and insert the following script reference between &lt;code&gt;&amp;lt;head&amp;gt;&amp;lt;/head&amp;gt;&lt;/code&gt; tags:
&lt;code&gt;&amp;lt;script src=&#39;https://google-code-prettify.googlecode.com/svn/loader/run_prettify.js&#39;/&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Use following at the top of markdown post to define whether the article is published, title and tags:
&lt;code&gt;
---
title: My article title
tags: tag1,tag2
published: true
---
&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Submit article URL to directories:

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.geekarticles.com/submit_link.php&#34;&gt;Geek articles&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;references&#34;&gt;References&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://stackedit.io&#34;&gt;StackEdit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blogspot.com&#34;&gt;Blogspot&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://google-code-prettify.googlecode.com&#34;&gt;Syntax highlighter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Visual Studio 2012 debugger does not break after attaching to C#/.NET process</title>
      <link>http://voloda.bazilisek.net/2014/12/visual-studio-2012-debugger-does-not-break-after-attaching-to-csharp-dotnet-process/</link>
      <pubDate>Thu, 18 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>http://voloda.bazilisek.net/2014/12/visual-studio-2012-debugger-does-not-break-after-attaching-to-csharp-dotnet-process/</guid>
      <description>&lt;p&gt;I had from time to time issue debug C#/.NET applications in Visual Studio 2012 after attaching Visual Studio 2012 debugger to a process.&lt;/p&gt;

&lt;p&gt;Symptoms were that the debugger attached to the process but neither &amp;lsquo;Break All&amp;rsquo; worked. The same applied for any preset breakpoint.&lt;/p&gt;

&lt;p&gt;For some time I thought that Visual Studio installation for somehow corrupted on my system but since I was always able to workaround it via &lt;code&gt;Debug.Assert()&lt;/code&gt; or &lt;code&gt;Debugger.Break()&lt;/code&gt; calls put directly into code I had never motivation to really look for a solution nor reinstall the Visual Studio.&lt;/p&gt;

&lt;p&gt;Today I really wanted to attach to a process to see what is going on inside and the issue happened again.&lt;/p&gt;

&lt;p&gt;After a bit of playing I realized that in the case that debugger works after attaching correctly the &amp;lsquo;Attach to Process&amp;rsquo; Visual Studio dialog looks like this (see &amp;lsquo;Attach to&amp;rsquo; field):
&lt;img src=&#34;http://voloda.bazilisek.net/img/visual-studio/visual_studio_debugger_does_recognize_process_type.png&#34; alt=&#34;visual_studio_debugger_does_recognize_process_type.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;For my process it didn&amp;rsquo;t work this time and &amp;lsquo;Attach to Process&amp;rsquo; dialog looked like this (again see &amp;lsquo;Attach to&amp;rsquo; field):
&lt;img src=&#34;http://voloda.bazilisek.net/img/visual-studio/visual_studio_debugger_does_not_recognize_process_type.png&#34; alt=&#34;visual_studio_debugger_does_not_recognize_process_type.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Apparently Visual Studio in some cases does not properly detect the type of the process and does not use correct debugger settings.&lt;/p&gt;

&lt;p&gt;In order to solve my issue I finally found the &amp;lsquo;Select&amp;hellip;&amp;rsquo; button following &amp;lsquo;Attach to&amp;rsquo; field where you can disable automatic detection of the process type and manually select a different one.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://voloda.bazilisek.net/img/visual-studio/visual_studio_debugger_does_not_recognize_process_select_code_type.png&#34; alt=&#34;visual_studio_debugger_does_not_recognize_process_select_code_type.png &#34; /&gt;&lt;/p&gt;

&lt;p&gt;After selecting &amp;lsquo;Manager (v4.5, 4.0)&amp;rsquo; and attaching debugger to process again everything worked well.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to release unmanaged library loaded into managed .NET code</title>
      <link>http://voloda.bazilisek.net/2014/12/how-to-release-unmanaged-library-loaded-into-managed-dotnet-code/</link>
      <pubDate>Wed, 03 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>http://voloda.bazilisek.net/2014/12/how-to-release-unmanaged-library-loaded-into-managed-dotnet-code/</guid>
      <description>

&lt;h1 id=&#34;motivation&#34;&gt;Motivation&lt;/h1&gt;

&lt;p&gt;I had found this article on how to release DLL library already loaded into the process using P-Invoke. It uses &lt;code&gt;LoadLibrary()&lt;/code&gt; and &lt;code&gt;FreeLibrary()&lt;/code&gt; WINAPI calls to achieve this.&lt;/p&gt;

&lt;p&gt;And what is wrong with it?&lt;/p&gt;

&lt;p&gt;It forces to unload ALL instances of the DLL library currently loaded within process. Which means, that in the case you have more than one instance of the class using these external functions ALL these will stop working!&lt;/p&gt;

&lt;p&gt;And that is not all - you cannot use this DLL in same application domain again after unloading.&lt;/p&gt;

&lt;h1 id=&#34;solution&#34;&gt;Solution&lt;/h1&gt;

&lt;p&gt;Solution is pretty simple one, but I have to say that it wasn&amp;rsquo;t very obvious to me at the beginning.
You can use P-Invoke to import following standard WinAPI functions for dynamical function loading:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;LoadLibrary()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;FreeLibrary()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GetProcAddress()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We will use following wrapping class:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#00f&#34;&gt;internal&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#2b91af&#34;&gt;UnsafeMethods&lt;/span&gt;
{
    [DllImport(&amp;#34;kernel32.dll&amp;#34;, SetLastError = true)]
    &lt;span style=&#34;color:#00f&#34;&gt;internal&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;extern&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; IntPtr LoadLibrary(&lt;span style=&#34;color:#2b91af&#34;&gt;string&lt;/span&gt; libraryName);
    [DllImport(&amp;#34;kernel32.dll&amp;#34;, SetLastError = true)]
    &lt;span style=&#34;color:#00f&#34;&gt;internal&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;extern&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#2b91af&#34;&gt;bool&lt;/span&gt; FreeLibrary(IntPtr hModule);
    [DllImport(&amp;#34;kernel32.dll&amp;#34;, SetLastError = true)]
    &lt;span style=&#34;color:#00f&#34;&gt;internal&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;extern&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; IntPtr GetProcAddress(IntPtr hModule, &lt;span style=&#34;color:#2b91af&#34;&gt;string&lt;/span&gt; procName);
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We also need signatures of imported functions - we will convert them into delegates (following ones come from sample project):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#008000&#34;&gt;// int multiply(int value1, int value2);
&lt;/span&gt;&lt;span style=&#34;color:#008000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;delegate&lt;/span&gt; &lt;span style=&#34;color:#2b91af&#34;&gt;int&lt;/span&gt; MultiplyDelegate(&lt;span style=&#34;color:#2b91af&#34;&gt;int&lt;/span&gt; value1, &lt;span style=&#34;color:#2b91af&#34;&gt;int&lt;/span&gt; value2);
&lt;span style=&#34;color:#008000&#34;&gt;// int str2int(const char *input);
&lt;/span&gt;&lt;span style=&#34;color:#008000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;delegate&lt;/span&gt; &lt;span style=&#34;color:#2b91af&#34;&gt;int&lt;/span&gt; Str2IntDelegate([MarshalAs(UnmanagedType.LPStr)]&lt;span style=&#34;color:#2b91af&#34;&gt;string&lt;/span&gt; source);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we can create implement our class calling external DLL functionality with &lt;code&gt;IDisposable&lt;/code&gt; interface so it will automatically release used DLL library when it will go out-of-scope or it will be finalized (in example project are two functions which we will publish as &lt;code&gt;Multiply()&lt;/code&gt; and &lt;code&gt;Str2Int()&lt;/code&gt;).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#00f&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#2b91af&#34;&gt;ExternalHelpers&lt;/span&gt;: IDisposable
{
    &lt;span style=&#34;color:#00f&#34;&gt;#region Private members
&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;private&lt;/span&gt; IntPtr _libraryHandle;
    &lt;span style=&#34;color:#00f&#34;&gt;private&lt;/span&gt; MultiplyDelegate _multiply;
    &lt;span style=&#34;color:#00f&#34;&gt;private&lt;/span&gt; Str2IntDelegate _str2Int;
    &lt;span style=&#34;color:#00f&#34;&gt;#endregion
&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;&lt;/span&gt;
    &lt;span style=&#34;color:#00f&#34;&gt;#region External functions delegates
&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#008000&#34;&gt;// int multiply(int value1, int value2);
&lt;/span&gt;&lt;span style=&#34;color:#008000&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;delegate&lt;/span&gt; &lt;span style=&#34;color:#2b91af&#34;&gt;int&lt;/span&gt; MultiplyDelegate(&lt;span style=&#34;color:#2b91af&#34;&gt;int&lt;/span&gt; value1, &lt;span style=&#34;color:#2b91af&#34;&gt;int&lt;/span&gt; value2);
    &lt;span style=&#34;color:#008000&#34;&gt;// int str2int(const char *input);
&lt;/span&gt;&lt;span style=&#34;color:#008000&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;delegate&lt;/span&gt; &lt;span style=&#34;color:#2b91af&#34;&gt;int&lt;/span&gt; Str2IntDelegate([MarshalAs(UnmanagedType.LPStr)]&lt;span style=&#34;color:#2b91af&#34;&gt;string&lt;/span&gt; source);
    &lt;span style=&#34;color:#00f&#34;&gt;#endregion
&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;&lt;/span&gt;
    &lt;span style=&#34;color:#00f&#34;&gt;public&lt;/span&gt; ExternalHelpers()
    {
        &lt;span style=&#34;color:#008000&#34;&gt;// dynamically load DLL using WinAPI
&lt;/span&gt;&lt;span style=&#34;color:#008000&#34;&gt;&lt;/span&gt;        _libraryHandle = UnsafeMethods.LoadLibrary(&lt;span style=&#34;color:#a31515&#34;&gt;@&amp;#34;testing.dll&amp;#34;&lt;/span&gt;);

        &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (_libraryHandle == IntPtr.Zero)
            Marshal.ThrowExceptionForHR(Marshal.GetHRForLastWin32Error());
        &lt;span style=&#34;color:#008000&#34;&gt;// import functions as delegates using GetProcAddress
&lt;/span&gt;&lt;span style=&#34;color:#008000&#34;&gt;&lt;/span&gt;        _multiply = LoadExternalFunction&amp;lt;MultiplyDelegate&amp;gt;(&lt;span style=&#34;color:#a31515&#34;&gt;@&amp;#34;multiply&amp;#34;&lt;/span&gt;);
        _str2Int = LoadExternalFunction&amp;lt;Str2IntDelegate&amp;gt;(&lt;span style=&#34;color:#a31515&#34;&gt;@&amp;#34;str2int&amp;#34;&lt;/span&gt;);
    }

    &lt;span style=&#34;color:#00f&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#2b91af&#34;&gt;int&lt;/span&gt; Multiply(&lt;span style=&#34;color:#2b91af&#34;&gt;int&lt;/span&gt; value1, &lt;span style=&#34;color:#2b91af&#34;&gt;int&lt;/span&gt; value2)
    {
        &lt;span style=&#34;color:#008000&#34;&gt;// call method using delegate
&lt;/span&gt;&lt;span style=&#34;color:#008000&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; _multiply(value1, value2);
    }

    &lt;span style=&#34;color:#00f&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#2b91af&#34;&gt;int&lt;/span&gt; Str2Int(&lt;span style=&#34;color:#2b91af&#34;&gt;string&lt;/span&gt; source)
    {
        &lt;span style=&#34;color:#008000&#34;&gt;// call method using delegate
&lt;/span&gt;&lt;span style=&#34;color:#008000&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; _str2Int(source);
    }

    &lt;span style=&#34;color:#00f&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; Dispose()
    {
        Dispose(&lt;span style=&#34;color:#00f&#34;&gt;true&lt;/span&gt;);

        GC.SuppressFinalize(&lt;span style=&#34;color:#00f&#34;&gt;this&lt;/span&gt;);
    }

    ~ExternalHelpers()
    {
        Dispose(&lt;span style=&#34;color:#00f&#34;&gt;false&lt;/span&gt;);
    }

    &lt;span style=&#34;color:#00f&#34;&gt;#region Private helper methods
&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#00f&#34;&gt;private&lt;/span&gt; T LoadExternalFunction&amp;lt;T&amp;gt;(&lt;span style=&#34;color:#2b91af&#34;&gt;string&lt;/span&gt; functionName)
        &lt;span style=&#34;color:#00f&#34;&gt;where&lt;/span&gt; T: &lt;span style=&#34;color:#00f&#34;&gt;class&lt;/span&gt;
    {
        Debug.Assert(!String.IsNullOrEmpty(functionName));
        &lt;span style=&#34;color:#008000&#34;&gt;// load function pointer
&lt;/span&gt;&lt;span style=&#34;color:#008000&#34;&gt;&lt;/span&gt;        IntPtr functionPointer = UnsafeMethods.GetProcAddress(_libraryHandle, functionName);

        &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (functionPointer == IntPtr.Zero)
            Marshal.ThrowExceptionForHR(Marshal.GetHRForLastWin32Error());
        &lt;span style=&#34;color:#008000&#34;&gt;// Marshal to requested delegate
&lt;/span&gt;&lt;span style=&#34;color:#008000&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; Marshal.GetDelegateForFunctionPointer(functionPointer, &lt;span style=&#34;color:#00f&#34;&gt;typeof&lt;/span&gt;(T)) &lt;span style=&#34;color:#00f&#34;&gt;as&lt;/span&gt; T;
    }

    &lt;span style=&#34;color:#00f&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; Dispose(&lt;span style=&#34;color:#2b91af&#34;&gt;bool&lt;/span&gt; disposing)
    {
        &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (disposing)
        {
            _multiply = &lt;span style=&#34;color:#00f&#34;&gt;null&lt;/span&gt;;
            _str2Int = &lt;span style=&#34;color:#00f&#34;&gt;null&lt;/span&gt;;
        }

        &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (_libraryHandle != IntPtr.Zero)
        {
            &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (!UnsafeMethods.FreeLibrary(_libraryHandle))
                Marshal.ThrowExceptionForHR(Marshal.GetHRForLastWin32Error());

            _libraryHandle = IntPtr.Zero;
        }
    }
    &lt;span style=&#34;color:#00f&#34;&gt;#endregion
&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;&lt;/span&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And finally - we can use it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#00f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; Main(&lt;span style=&#34;color:#2b91af&#34;&gt;string&lt;/span&gt;[] args)
{
    using(ExternalHelpers e = &lt;span style=&#34;color:#00f&#34;&gt;new&lt;/span&gt; ExternalHelpers())
    {
        &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#2b91af&#34;&gt;int&lt;/span&gt; value1 = 2;
        &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#2b91af&#34;&gt;int&lt;/span&gt; value2 = 3;
        &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#2b91af&#34;&gt;string&lt;/span&gt; strValue = &lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;345&amp;#34;&lt;/span&gt;;

        Console.WriteLine(&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;{0} * {1} = {2}&amp;#34;&lt;/span&gt;, value1, value2, e.Multiply(value1, value2));
        Console.WriteLine(&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;{0} =&amp;gt; {1}&amp;#34;&lt;/span&gt;, strValue, e.Str2Int(strValue));
    }

    Console.ReadKey();
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Looks easy? Yes it is :-)&lt;/p&gt;

&lt;h1 id=&#34;links&#34;&gt;Links&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://msdn.microsoft.com/&#34;&gt;MSDN&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Unity Registration Validator</title>
      <link>http://voloda.bazilisek.net/2014/11/unity-registration-validator/</link>
      <pubDate>Tue, 25 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>http://voloda.bazilisek.net/2014/11/unity-registration-validator/</guid>
      <description>

&lt;p&gt;Microsoft Unity Extension which verifies registrations between parent and child containers. This is mainly issue when you
accidently inject a dependency from a child container to the parent container while using ContainerControlledLifetimeManager (singleton).&lt;/p&gt;

&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;When using Microsoft Unity IoC container you may face some weird issues when dealing with &amp;lsquo;singletons&amp;rsquo; (ContainerControlledLifetimeManager) and child containers. It may or may not be what you expected.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s consider following classes:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#00f&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;interface&lt;/span&gt; IServiceDependency
{
}

&lt;span style=&#34;color:#00f&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;interface&lt;/span&gt; IService
{
}

&lt;span style=&#34;color:#00f&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#2b91af&#34;&gt;ServiceDependency&lt;/span&gt; : IServiceDependency
{
    &lt;span style=&#34;color:#00f&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;readonly&lt;/span&gt; &lt;span style=&#34;color:#2b91af&#34;&gt;string&lt;/span&gt; _dep1;

    &lt;span style=&#34;color:#00f&#34;&gt;public&lt;/span&gt; ServiceDependency(&lt;span style=&#34;color:#2b91af&#34;&gt;string&lt;/span&gt; dep1)
    {
        _dep1 = dep1;
    }
}

&lt;span style=&#34;color:#00f&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#2b91af&#34;&gt;Service&lt;/span&gt; : IService
{
    &lt;span style=&#34;color:#00f&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;readonly&lt;/span&gt; IServiceDependency _dependency;

    &lt;span style=&#34;color:#00f&#34;&gt;public&lt;/span&gt; Service(IServiceDependency dependency)
    {
        _dependency = dependency;
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now let&amp;rsquo;s setup some test case:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;[Test]
&lt;span style=&#34;color:#00f&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; ServiceResolutionViaTwoDifferentChildContainersShouldFail()
{
    &lt;span style=&#34;color:#2b91af&#34;&gt;var&lt;/span&gt; rootContainer = &lt;span style=&#34;color:#00f&#34;&gt;new&lt;/span&gt; UnityContainer();

    rootContainer.RegisterType&amp;lt;IService, Service&amp;gt;(&lt;span style=&#34;color:#00f&#34;&gt;new&lt;/span&gt; ContainerControlledLifetimeManager());
    &lt;span style=&#34;color:#2b91af&#34;&gt;var&lt;/span&gt; childContainer = rootContainer.CreateChildContainer();
    &lt;span style=&#34;color:#2b91af&#34;&gt;var&lt;/span&gt; childContainer2 = rootContainer.CreateChildContainer();

    childContainer.RegisterInstance&amp;lt;IServiceDependency&amp;gt;(&lt;span style=&#34;color:#00f&#34;&gt;new&lt;/span&gt; ServiceDependency(&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;Dep1&amp;#34;&lt;/span&gt;));
    childContainer2.RegisterInstance&amp;lt;IServiceDependency&amp;gt;(&lt;span style=&#34;color:#00f&#34;&gt;new&lt;/span&gt; ServiceDependency(&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;Dep2&amp;#34;&lt;/span&gt;));

    &lt;span style=&#34;color:#2b91af&#34;&gt;var&lt;/span&gt; childContainerResult1 = childContainer.Resolve&amp;lt;IService&amp;gt;();
    &lt;span style=&#34;color:#2b91af&#34;&gt;var&lt;/span&gt; childContainerResult2 = childContainer.Resolve&amp;lt;IService&amp;gt;();

    &lt;span style=&#34;color:#2b91af&#34;&gt;var&lt;/span&gt; childContainer2Result1 = childContainer.Resolve&amp;lt;IService&amp;gt;();
    &lt;span style=&#34;color:#2b91af&#34;&gt;var&lt;/span&gt; childContainer2Result2 = childContainer.Resolve&amp;lt;IService&amp;gt;();

    Assert.AreEqual(childContainerResult1, childContainerResult2);
    Assert.AreEqual(childContainer2Result1, childContainer2Result2);

    Assert.AreEqual(childContainer2Result1, childContainerResult1);
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;This actually will pass all the assertions.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#34;let-s-analyze-it-a-bit&#34;&gt;Let&amp;rsquo;s analyze it a bit:&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Let&amp;rsquo;s step thru the test case in debugger.&lt;/li&gt;
&lt;li&gt;Setup some watches:

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;((ServiceDependency)((Service)childContainerResult1)._dependency)._dep1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;((ServiceDependency)((Service)childContainer2Result1)._dependency)._dep1&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;You can see that both of them point to &lt;code&gt;Dep1&lt;/code&gt;.

&lt;ul&gt;
&lt;li&gt;Is that what you really wanted?&lt;/li&gt;
&lt;li&gt;Consider the following case:&lt;/li&gt;
&lt;li&gt;You disposed &lt;code&gt;childContainer&lt;/code&gt; and your &lt;code&gt;ServiceDependency&lt;/code&gt; is disposable registered as &lt;code&gt;ContainerControlledLifetimeManager&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;At this point you have invalid instance of &lt;code&gt;IService&lt;/code&gt;&lt;/strong&gt; (it has injected disposed ServiceDependency).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;This is most likely a side effect of unwanted changes and you want to avoid it&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;And this is exactly what is this extension trying to solve&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;By enabling this extension the build operation will fail&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;how-to-enable-extension&#34;&gt;How to enable extension&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Reference the &lt;code&gt;UnityRegistrationValidator.dll&lt;/code&gt; in your project.&lt;/li&gt;
&lt;li&gt;Call the registration below.

&lt;ul&gt;
&lt;li&gt;The extension is available as a &lt;a href=&#34;https://www.nuget.org/packages/UnityRegistrationValidator&#34;&gt;&lt;strong&gt;Nuget package&lt;/strong&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#2b91af&#34;&gt;var&lt;/span&gt; rootContainer = &lt;span style=&#34;color:#00f&#34;&gt;new&lt;/span&gt; UnityContainer();
rootContainer.AddNewExtension&amp;lt;EnsureRegistrationDepthOrderExtension&amp;gt;();&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&#34;following-rules-are-enforced-after-registering-extension&#34;&gt;Following rules are enforced after registering extension&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;For each registration is tracked depth in containers (starting the container in which resolve starts).&lt;/li&gt;
&lt;li&gt;If you register an object which

&lt;ul&gt;
&lt;li&gt;has dependency resolvable only inside the child container&lt;/li&gt;
&lt;li&gt;and has ContainerControlledLifetimeManager()&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;the resolve will fail.&lt;/li&gt;
&lt;li&gt;If you do this without the extension the resolve will succeed but the dependencies were most likely resolved in unexpected way (unless you really know what are you doing).&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;This extension allows you to validate the expected behavior.&lt;/li&gt;
&lt;li&gt;Since it may have performance impact (it needs to track all the registrations as well as build operations) it may have negative performance impact.&lt;/li&gt;
&lt;li&gt;This extension is intended to help you ensure expected behavior - but you have to always consider your circumstanes.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;You are using this extension on your own risk :-).&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;references&#34;&gt;References&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.nuget.org/packages/UnityRegistrationValidator&#34;&gt;https://www.nuget.org/packages/UnityRegistrationValidator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/voloda/UnityRegistrationValidator&#34;&gt;https://github.com/voloda/UnityRegistrationValidator&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>DbKeeperNet - How to seed ASP.NET users and roles</title>
      <link>http://voloda.bazilisek.net/2014/11/dbkeepernet-how-to-seed-aspdotnet-users-and-roles/</link>
      <pubDate>Mon, 24 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>http://voloda.bazilisek.net/2014/11/dbkeepernet-how-to-seed-aspdotnet-users-and-roles/</guid>
      <description>

&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;It is a common task that as a part of database setup you need to seed some default user accounts and roles into the database as a part of setup.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.codeproject.com/Articles/42091/DBKeeperNet-Keeps-Your-DB-Schema-Up-to-date&#34;&gt;DbKeeperNet&lt;/a&gt; is an opensource .NET/C# framework which helps you manage database schema for your database performing various types of upgrade steps. DbKeeperNet is designed with support for various database types in mind. Currently it supports most common databases: &lt;em&gt;&lt;strong&gt;MSSQL, SQLite, Firebird, MySQL&lt;/strong&gt;&lt;/em&gt;, Oracle. Since the whole framework is extensible adding support of a new database type is just a simple task.&lt;/p&gt;

&lt;p&gt;It is just matter of few minutes to get it set up in your project and have in-place infrastructure which will ensure proper upgrade path for your database schema on all installations for your application.&lt;/p&gt;

&lt;p&gt;In its recent version &lt;a href=&#34;http://www.codeproject.com/Articles/42091/DBKeeperNet-Keeps-Your-DB-Schema-Up-to-date&#34;&gt;DbKeeperNet&lt;/a&gt;&amp;nbsp;also support seeding of the ASP.NET membership and roles. With respect to overall design - this is supported on any database which implemented its membership providers and makes them available to the .NET infrastructure.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Please keep in mind that any seeded account with pre-seeded password should change the seeded password ASAP.&lt;/strong&gt;&lt;/p&gt;

&lt;h1 id=&#34;sample-task&#34;&gt;Sample task&lt;/h1&gt;

&lt;p&gt;Let&amp;rsquo;s consider the following set of operations you would perform in your database during the time as your application evolves (of course this can be mixed with any other database schema change like adding a table):&lt;/p&gt;

&lt;h2 id=&#34;upgrade-to-version-1-00&#34;&gt;Upgrade to version 1.00&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;If running on MSSQL setup the membership schema&lt;/li&gt;
&lt;li&gt;Create role TestRole1&lt;/li&gt;
&lt;li&gt;Create role TestRole2&lt;/li&gt;
&lt;li&gt;Create user TestUser1 assigned to TestRole1 and TestRole2&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;upgrade-to-version-1-01&#34;&gt;Upgrade to version 1.01&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Create user TestUser2 assigned to TestRole1&lt;/li&gt;
&lt;li&gt;Delete user TestUser1&lt;/li&gt;
&lt;li&gt;Delete TestRole2&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;upgrade-script&#34;&gt;Upgrade script&lt;/h1&gt;

&lt;p&gt;Part of this article is a console application demo project using the script below and referencing DbKeeperNet as a &lt;a href=&#34;https://www.nuget.org/packages/DbKeeperNet/&#34;&gt;Nuget package&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The demo project is created for the MSSQL but it can be easily adopted for any other database just by changing setup in App.Config
    *   The MSSQL specific step here is necessary since the DB schema creation script requires to be executed within a separated transaction and each of the steps needs to be commited

&lt;ul&gt;
&lt;li&gt;For example MySQL providers seed the required schema on its own upon the first usage of membership providers.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;It can be easily adopted and used in a web application - you simply have to plan for its initial execution.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://www.codeproject.com/Articles/42091/DBKeeperNet-Keeps-Your-DB-Schema-Up-to-date&#34;&gt;DbKeeperNet&lt;/a&gt; is using an XML validated against the XSD schema to define a database upgrade. Below you can find an example database upgrade script to achieve above steps (this is comming directly from the example):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#00f&#34;&gt;&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;utf-8&amp;#34;?&amp;gt;&lt;/span&gt;
&amp;lt;upd:Updates xmlns:upd=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;http://code.google.com/p/dbkeepernet/Updates-1.0.xsd&amp;#34;&lt;/span&gt; xmlns:xsi=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34;&lt;/span&gt; AssemblyName=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;DbKeeperNet.SimpleDemo&amp;#34;&lt;/span&gt; xsi:schemaLocation=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;http://code.google.com/p/dbkeepernet/Updates-1.0.xsd ../../DbKeeperNet.Engine/Resources/Updates-1.0.xsd&amp;#34;&lt;/span&gt;&amp;gt;
  &lt;span style=&#34;color:#008000&#34;&gt;&amp;lt;!-- Default way how to check whether to execute update step or not --&amp;gt;&lt;/span&gt;
  &amp;lt;DefaultPreconditions&amp;gt;
    &lt;span style=&#34;color:#008000&#34;&gt;&amp;lt;!-- We will use step information saving strategy --&amp;gt;&lt;/span&gt;
    &amp;lt;Precondition FriendlyName=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;Update step executed&amp;#34;&lt;/span&gt; Precondition=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;StepNotExecuted&amp;#34;&lt;/span&gt;/&amp;gt;
  &amp;lt;/DefaultPreconditions&amp;gt;
  &amp;lt;Update Version=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;1.00&amp;#34;&lt;/span&gt;&amp;gt;
    &lt;span style=&#34;color:#008000&#34;&gt;&amp;lt;!--
&lt;/span&gt;&lt;span style=&#34;color:#008000&#34;&gt;    This update step is needed to properly inject MSSQL membership schema into the database.
&lt;/span&gt;&lt;span style=&#34;color:#008000&#34;&gt;    The challenge here is that the schema setup must be executed in separated transaction.
&lt;/span&gt;&lt;span style=&#34;color:#008000&#34;&gt;    
&lt;/span&gt;&lt;span style=&#34;color:#008000&#34;&gt;    For other membership providers this is usually handled automatically upon the first usage
&lt;/span&gt;&lt;span style=&#34;color:#008000&#34;&gt;    (like for MySql)
&lt;/span&gt;&lt;span style=&#34;color:#008000&#34;&gt;    --&amp;gt;&lt;/span&gt;
    &amp;lt;UpdateStep xsi:type=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;upd:CustomUpdateStepType&amp;#34;&lt;/span&gt; Id=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt; Type=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;DbKeeperNet.Engine.CustomUpdateSteps.MsSqlStepWithoutExplicitTransaction, DbKeeperNet.Engine&amp;#34;&lt;/span&gt;  FriendlyName=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;Setting up database schema for membership and roles&amp;#34;&lt;/span&gt;&amp;gt;
      &amp;lt;Preconditions&amp;gt;
        &amp;lt;Precondition FriendlyName=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;Update step executed&amp;#34;&lt;/span&gt; Precondition=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;StepNotExecuted&amp;#34;&lt;/span&gt;/&amp;gt;
        &amp;lt;Precondition FriendlyName=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;Database is MSSQL&amp;#34;&lt;/span&gt; Precondition=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;DbType&amp;#34;&lt;/span&gt;&amp;gt;
          &amp;lt;Param&amp;gt;MSSQL&amp;lt;/Param&amp;gt;
        &amp;lt;/Precondition&amp;gt;
      &amp;lt;/Preconditions&amp;gt;
      &amp;lt;Param&amp;gt;DbKeeperNet.Extensions.MsSqlMembershipAndRolesSetup&amp;lt;/Param&amp;gt;
      &amp;lt;Param&amp;gt;DbKeeperNet.Extensions.MsSqlMembershipAndRolesSetup.MsSqlMembershipAndRolesSetup.sql&amp;lt;/Param&amp;gt;
    &amp;lt;/UpdateStep&amp;gt;
    &lt;span style=&#34;color:#008000&#34;&gt;&amp;lt;!-- Create some seeded roles --&amp;gt;&lt;/span&gt;
    &amp;lt;UpdateStep xsi:type=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;upd:AspNetRoleCreateUpdateStepType&amp;#34;&lt;/span&gt; FriendlyName=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;Create role TestRole1&amp;#34;&lt;/span&gt; Id=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;2&amp;#34;&lt;/span&gt; RoleName=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;TestRole1&amp;#34;&lt;/span&gt;/&amp;gt;
    &amp;lt;UpdateStep xsi:type=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;upd:AspNetRoleCreateUpdateStepType&amp;#34;&lt;/span&gt; Id=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;3&amp;#34;&lt;/span&gt; RoleName=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;TestRole2&amp;#34;&lt;/span&gt;/&amp;gt;
    &lt;span style=&#34;color:#008000&#34;&gt;&amp;lt;!-- Seed an account and associate it with roles --&amp;gt;&lt;/span&gt;
    &amp;lt;UpdateStep xsi:type=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;upd:AspNetAccountCreateUpdateStepType&amp;#34;&lt;/span&gt; Id=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;4&amp;#34;&lt;/span&gt; UserName=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;TestUser1&amp;#34;&lt;/span&gt; Mail=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;testuser1@domain.com&amp;#34;&lt;/span&gt; Password=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;SeededPassword&amp;#34;&lt;/span&gt;&amp;gt;
      &amp;lt;Role&amp;gt;TestRole1&amp;lt;/Role&amp;gt;
      &amp;lt;Role&amp;gt;TestRole2&amp;lt;/Role&amp;gt;
    &amp;lt;/UpdateStep&amp;gt;
  &amp;lt;/Update&amp;gt;
  &amp;lt;Update Version=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;1.01&amp;#34;&lt;/span&gt;&amp;gt;
    &amp;lt;UpdateStep xsi:type=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;upd:AspNetAccountCreateUpdateStepType&amp;#34;&lt;/span&gt; Id=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt; UserName=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;TestUser2&amp;#34;&lt;/span&gt; Mail=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;testuser2@domain.com&amp;#34;&lt;/span&gt; Password=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;SeededPassword2&amp;#34;&lt;/span&gt;&amp;gt;
      &amp;lt;Role&amp;gt;TestRole1&amp;lt;/Role&amp;gt;
    &amp;lt;/UpdateStep&amp;gt;
    &lt;span style=&#34;color:#008000&#34;&gt;&amp;lt;!-- Delete the seeded role --&amp;gt;&lt;/span&gt;
    &amp;lt;UpdateStep xsi:type=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;upd:AspNetRoleDeleteUpdateStepType&amp;#34;&lt;/span&gt; Id=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;2&amp;#34;&lt;/span&gt; RoleName=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;TestRole2&amp;#34;&lt;/span&gt;/&amp;gt;
    &lt;span style=&#34;color:#008000&#34;&gt;&amp;lt;!-- Delete one of the seeded accounts --&amp;gt;&lt;/span&gt;
    &amp;lt;UpdateStep xsi:type=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;upd:AspNetAccountDeleteUpdateStepType&amp;#34;&lt;/span&gt; Id=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;3&amp;#34;&lt;/span&gt; UserName=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;TestUser1&amp;#34;&lt;/span&gt;/&amp;gt;
  &amp;lt;/Update&amp;gt;
&amp;lt;/upd:Updates&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now let&amp;rsquo;s setup the C# portion which executes the script:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#2b91af&#34;&gt;string&lt;/span&gt; connString = &lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt;; &lt;span style=&#34;color:#008000&#34;&gt;// MsSql connection   
&lt;/span&gt;&lt;span style=&#34;color:#008000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;using&lt;/span&gt; (UpdateContext context = &lt;span style=&#34;color:#00f&#34;&gt;new&lt;/span&gt; UpdateContext())
{
    context.LoadExtensions();
    context.InitializeDatabaseService(connString);

    Updater updater = &lt;span style=&#34;color:#00f&#34;&gt;new&lt;/span&gt; Updater(context);
    updater.ExecuteXmlFromConfig();
}
Console.WriteLine(&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;Can login as TestUser2: &amp;#34;&lt;/span&gt; + Membership.Provider.ValidateUser(&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;Testuser2&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;SeededPassword2&amp;#34;&lt;/span&gt;));
Console.WriteLine(&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;Can login as TestUser2: &amp;#34;&lt;/span&gt; + Membership.Provider.ValidateUser(&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;testuser2&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;InvalidPassword&amp;#34;&lt;/span&gt;));
Console.WriteLine(&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;Is user testuser2 in role testrole1: &amp;#34;&lt;/span&gt; + Roles.Provider.IsUserInRole(&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;testuser2&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;testrole1&amp;#34;&lt;/span&gt;));
Console.WriteLine(&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;Is user testuser2 in role testrole2: &amp;#34;&lt;/span&gt; + Roles.Provider.IsUserInRole(&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;testuser2&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;testrole2&amp;#34;&lt;/span&gt;));&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And appropriate App.Config portion:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#00f&#34;&gt;&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;utf-8&amp;#34;?&amp;gt;&lt;/span&gt;
&amp;lt;configuration&amp;gt;
  &amp;lt;configSections&amp;gt;
    &amp;lt;section name=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;dbkeeper.net&amp;#34;&lt;/span&gt; type=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;DbKeeperNet.Engine.DbKeeperNetConfigurationSection,DbKeeperNet.Engine&amp;#34;&lt;/span&gt;/&amp;gt;
  &amp;lt;/configSections&amp;gt;
  &amp;lt;dbkeeper.net loggingService=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;fx&amp;#34;&lt;/span&gt;&amp;gt;
    &amp;lt;updateScripts&amp;gt;
&lt;span style=&#34;color:#008000&#34;&gt;&amp;lt;!-- This is the location of the DB Upgrade script - we use an embedded resource --&amp;gt;&lt;/span&gt;
      &amp;lt;add provider=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;asm&amp;#34;&lt;/span&gt; location=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;DbKeeperNet.AspNetMembershipDemo.DatabaseSetup.xml,DbKeeperNet.AspNetMembershipDemo&amp;#34;&lt;/span&gt; /&amp;gt;
    &amp;lt;/updateScripts&amp;gt;
    &amp;lt;databaseServiceMappings&amp;gt;
      &amp;lt;add connectString=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt; databaseService=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;MsSql&amp;#34;&lt;/span&gt; /&amp;gt;
    &amp;lt;/databaseServiceMappings&amp;gt;
  &amp;lt;/dbkeeper.net&amp;gt;
  &amp;lt;connectionStrings&amp;gt;
    &lt;span style=&#34;color:#008000&#34;&gt;&amp;lt;!-- Change this to correct absolute path for the demo or to an actual database --&amp;gt;&lt;/span&gt;
    &amp;lt;add name=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt; connectionString=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;Data Source=.\SQLEXPRESS;AttachDbFilename=&amp;#39;C:\Users\voloda\MyRoot\Development\GIT\DbKeeperNet\DbKeeperNet\Demos\DbKeeperNet.AspNetMembershipDemo\bin\Debug\DbKeeperNetAspNetMembershipDemo.mdf&amp;#39;;Integrated Security=True;Connect Timeout=30;User Instance=True;Initial catalog=DbKeeperNetAspNetMembershipDemo&amp;#34;&lt;/span&gt; providerName=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;System.Data.SqlClient&amp;#34;&lt;/span&gt;/&amp;gt;
  &amp;lt;/connectionStrings&amp;gt;
&lt;span style=&#34;color:#008000&#34;&gt;&amp;lt;!-- Let&amp;#39;s enable MSSQL membership providers --&amp;gt;&lt;/span&gt;
  &amp;lt;system.web&amp;gt;
    &amp;lt;membership defaultProvider=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;AspNetSqlMembershipProvider&amp;#34;&lt;/span&gt;&amp;gt;
      &amp;lt;providers&amp;gt;
        &amp;lt;clear/&amp;gt;
        &amp;lt;add name=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;AspNetSqlMembershipProvider&amp;#34;&lt;/span&gt; type=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;System.Web.Security.SqlMembershipProvider, System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a&amp;#34;&lt;/span&gt; connectionStringName=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt; enablePasswordRetrieval=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;false&amp;#34;&lt;/span&gt; enablePasswordReset=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt; requiresQuestionAndAnswer=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;false&amp;#34;&lt;/span&gt; requiresUniqueEmail=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;false&amp;#34;&lt;/span&gt; passwordFormat=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;Hashed&amp;#34;&lt;/span&gt; maxInvalidPasswordAttempts=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;5&amp;#34;&lt;/span&gt; minRequiredPasswordLength=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;6&amp;#34;&lt;/span&gt; minRequiredNonalphanumericCharacters=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt; passwordAttemptWindow=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;10&amp;#34;&lt;/span&gt; passwordStrengthRegularExpression=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; applicationName=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;/&amp;gt;
      &amp;lt;/providers&amp;gt;
    &amp;lt;/membership&amp;gt;
    &amp;lt;roleManager enabled=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt; defaultProvider=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;AspNetSqlRoleProvider&amp;#34;&lt;/span&gt;&amp;gt;
      &amp;lt;providers&amp;gt;
        &amp;lt;clear/&amp;gt;
        &amp;lt;add connectionStringName=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt; applicationName=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt; name=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;AspNetSqlRoleProvider&amp;#34;&lt;/span&gt; type=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;System.Web.Security.SqlRoleProvider, System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a&amp;#34;&lt;/span&gt;/&amp;gt;
      &amp;lt;/providers&amp;gt;
    &amp;lt;/roleManager&amp;gt;
    &amp;lt;profile enabled=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;false&amp;#34;&lt;/span&gt;&amp;gt;
      &amp;lt;providers&amp;gt;
        &amp;lt;clear/&amp;gt;
      &amp;lt;/providers&amp;gt;
    &amp;lt;/profile&amp;gt;
  &amp;lt;/system.web&amp;gt;
&amp;lt;/configuration&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&#34;references&#34;&gt;References&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://drive.google.com/file/d/0B27zqy23aL3BblVFNGJPdF9XVXM/view?usp=sharing&#34;&gt;Demo project download&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://github.com/DbKeeperNet/DbKeeperNet&#34;&gt;DbKeeperNet&lt;/a&gt; project (contains also some demo projects)&lt;/li&gt;
&lt;li&gt;DbKeeperNet &lt;a href=&#34;http://www.codeproject.com/Articles/42091/DBKeeperNet-Keeps-Your-DB-Schema-Up-to-date&#34;&gt;article&lt;/a&gt; on Codeproject&lt;/li&gt;
&lt;li&gt;Nuget packages

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.nuget.org/packages/DbKeeperNet/&#34;&gt;https://www.nuget.org/packages/DbKeeperNet/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.nuget.org/packages/DbKeeperNet.Extensions.MsSqlMembershipAndRolesSetup/&#34;&gt;https://www.nuget.org/packages/DbKeeperNet.Extensions.MsSqlMembershipAndRolesSetup/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;history&#34;&gt;History&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Initial version&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
