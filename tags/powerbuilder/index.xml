<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>powerbuilder on My personal notes</title>
    <link>http://voloda.bazilisek.net/tags/powerbuilder/</link>
    <description>Recent content in powerbuilder on My personal notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 15 May 2010 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="http://voloda.bazilisek.net/tags/powerbuilder/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Using CVS as source control for Sybase PowerBuilder</title>
      <link>http://voloda.bazilisek.net/2010/05/using-cvs-as-source-control-for-sybase-powerbuilder/</link>
      <pubDate>Sat, 15 May 2010 00:00:00 +0000</pubDate>
      
      <guid>http://voloda.bazilisek.net/2010/05/using-cvs-as-source-control-for-sybase-powerbuilder/</guid>
      <description>

&lt;p&gt;This article in short describes, how to use CVS for Powerbuilder. This solution we are using for about 6 years and it works very good.&lt;/p&gt;

&lt;h1 id=&#34;pbl-problems&#34;&gt;PBL problems&lt;/h1&gt;

&lt;p&gt;The main difficulty of the Sybase Power Builder is in PBL libraries. PBL libraries are binary libraries containing both - sources and precompiled sources. This solution causes many problems:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;PBLs are also very inclinable to faults (in Power Builder 7 it was not very surprissing that after fullrebuild failure were PBLs completely broken).&lt;/li&gt;
&lt;li&gt;Object sources saved in PBLs are not easily comparable.&lt;/li&gt;
&lt;li&gt;Also built-in support for inefficience (sources are checked-out to temporary PBL library, offline access is not very comfortable etc).&lt;/li&gt;
&lt;li&gt;In the case of multiple developers working on the same project this causes many problems with sources synchronization (you can use many utilities, but it was always hell after one week track all changes and put them together - it tooks for about half a day per week and it was quiet often, that some changes were lost).&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;solution&#34;&gt;Solution&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Use CVS as source control (use can use both *nix or Windows solution).&lt;/li&gt;
&lt;li&gt;Use TortoiseCVS (or any other free CVS GUI clients) for access to sources.&lt;/li&gt;
&lt;li&gt;Use Winmerge or any other free utility for sources differencies comparison.&lt;/li&gt;
&lt;li&gt;Export all sources into CVS project source tree (the best way is to export every PBL library into the separate directory in the CVS source tree).&lt;/li&gt;
&lt;li&gt;On building machine use PowerGen for project compilation and PBLs restore. In each build you can take your PBLs from the scratch (PowerGen can resolve all dependecies between objects and import them back into PBLs in the correct order).&lt;/li&gt;
&lt;li&gt;Every developer takes fresh PBLs after every build.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;editing-sources&#34;&gt;Editing sources&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Every developer can take fresh PBLs generated by PowerGen after build.&lt;/li&gt;
&lt;li&gt;Before change perform Update command on existing object.&lt;/li&gt;
&lt;li&gt;Import this object from CVS sandbox into your work PBL (replacing existing one).&lt;/li&gt;
&lt;li&gt;Perform any required changes.&lt;/li&gt;
&lt;li&gt;Export modified object from working PBL to the CVS sandbox.&lt;/li&gt;
&lt;li&gt;Execute Commit command on the exported object in CVS sandbox, provide proper comment and send it to the CVS source control.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;benefits&#34;&gt;Benefits&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;All sources are stored in plain text (including datawindows).&lt;/li&gt;
&lt;li&gt;All changes are simply trackable (from Power Builder 9 (?8?) this works much better, because in previous versions Power Builder changes order of methods on every save) - at least you know who and why made the change.&lt;/li&gt;
&lt;li&gt;You can simply resolve any conflicts (no more hell with sharing and synchronizing PBLs between developers).&lt;/li&gt;
&lt;li&gt;PBLs cann&amp;rsquo;t contain any old errors from rebuilding etc.&lt;/li&gt;
&lt;li&gt;You can also connect additional actions to every souce file commit/checkout/tag and automatically connect those into other company systems.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can also use tags and branches for tracking your builds.&lt;/p&gt;

&lt;h1 id=&#34;links&#34;&gt;Links&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.tortoisecvs.org/&#34;&gt;TortoiseCVS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://winmerge.org/&#34;&gt;WinMerge&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://en.wikipedia.org/wiki/PowerBuilder&#34;&gt;Sybase Power Builder on Wiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.ecrane.com/&#34;&gt;PowerGen&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Using SVN as source control for Sybase PowerBuilder</title>
      <link>http://voloda.bazilisek.net/2010/05/using-svn-as-source-control-for-sybase-powerbuilder/</link>
      <pubDate>Sat, 15 May 2010 00:00:00 +0000</pubDate>
      
      <guid>http://voloda.bazilisek.net/2010/05/using-svn-as-source-control-for-sybase-powerbuilder/</guid>
      <description>

&lt;p&gt;This article in short describes an idea how to use SVN for Powerbuilder to improve development process. This solution is based on previously used CVS (described in another &lt;a href=&#34;http://voloda.bazilisek.net/2010/05/using-cvs-as-source-control-for-sybase-powerbuilder/&#34;&gt;article&lt;/a&gt;).&lt;br /&gt;
CVS we were are using for about 6 years and it was working perfectly.&lt;br /&gt;
But currently we have to change hardware and operating system it was running on, so we decided to move forward and use a bit better but still free solution - SVN running on Windows.&lt;/p&gt;

&lt;h1 id=&#34;pbl-problems&#34;&gt;PBL problems&lt;/h1&gt;

&lt;p&gt;The main difficulty of the Sybase Power Builder is in PBL libraries. PBL libraries are binary libraries containing both - sources and precompiled sources.&lt;br /&gt;
This solution causes many problems:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;PBLs are also very inclinable to faults (in Power Builder 7 it was not very surprising that after fullrebuild failure were PBLs completely broken).&lt;/li&gt;
&lt;li&gt;Object sources saved in PBLs are not easily comparable.&lt;/li&gt;
&lt;li&gt;Also built-in support for inefficiency (sources are checked-out to temporary PBL library, offline access is not very comfortable etc.).&lt;/li&gt;
&lt;li&gt;In the case of multiple developers working on the same project this causes many problems with sources synchronization (you can use many utilities, but it was always hell after one week track all changes and put them together - it took for about half a day per week and it was quiet often, that some changes were lost).&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;solution&#34;&gt;Solution&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Use SVN as source control (you can use both *nix or Windows platform).&lt;/li&gt;
&lt;li&gt;Use TortoiseSVN (or any other free SVN GUI clients) for access to sources.&lt;/li&gt;
&lt;li&gt;Use Winmerge or any other free utility for sources differencies comparison.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Export all sources into SVN project source tree (the best way is to export every PBL library into the separate directory in the SVN source tree).&lt;/li&gt;
&lt;li&gt;On building machine use PowerGen for project compilation and PBLs restore. In each build you can take your PBLs from the scratch (PowerGen can resolve all dependecies between objects and import them back into PBLs in the correct order).&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Every developer takes fresh PBLs after every build.&lt;/li&gt;
&lt;li&gt;Use existing Windows Domain authentication for access to SVN server.&lt;/li&gt;
&lt;li&gt;Integrate with current project management system.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;svn-server-setup-on-windows&#34;&gt;SVN server setup on Windows&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Download &lt;a href=&#34;http://www.apache.org/&#34;&gt;Apache 2.2&lt;/a&gt; installation MSI and install it (any examples will reffer to the default location)&lt;/li&gt;
&lt;li&gt;Install module &lt;a href=&#34;http://sourceforge.net/projects/mod-auth-sspi&#34;&gt;mod_auth_sspi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Download and install &lt;a href=&#34;http://www.blogger.com/post-edit.g?blogID=2152854310850949660&amp;amp;postID=7977943162963394741&#34;&gt;SVN&lt;/a&gt;. You have to choose correct version for Apache 2.2. I suggest to use MSI installation package, because it will setup all required paths etc.&lt;/li&gt;
&lt;li&gt;Setup new SVN repository (&lt;code&gt;svnadmin create c:/svnroot&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Restart computer, if necessary.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;apache-2-2-example-configuration&#34;&gt;Apache 2.2 example configuration&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;LoadModule dav_svn_module modules/mod_dav_svn.so
LoadModule authz_svn_module modules/mod_authz_svn.so
LoadModule sspi_auth_module modules/mod_auth_sspi.so

&amp;lt;location svn=&amp;quot;&amp;quot;&amp;gt;
   DAV svn
   SVNPath c:/svnroot

   AuthName &amp;quot;SVN Access&amp;quot;
   AuthType SSPI
   SSPIAuth on
   SSPIAuthoritative on
   SSPIOfferBasic on
   SSPIDomain ourdom.ourcompany
   require group &amp;quot;ourdom\development&amp;quot;
&amp;lt;/location&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;svn-repository-organization&#34;&gt;SVN repository organization&lt;/h1&gt;

&lt;p&gt;The SVN repository is organized a bit differently than in CVS. You can definitely find more details on Google. Below are only some details.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Each project consist of three subfolders, no sources should be commited directly under project name folder.&lt;/li&gt;
&lt;li&gt;branching code means that you made a repository copy to a branch folder.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;trunk&lt;/strong&gt; folder - contains sources of the main branch.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;branches&lt;/strong&gt; folder - contains branch folders for branch copies.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;tags&lt;/strong&gt; folder - contains branch folders for tag copies.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;sample-svn-repository-structure&#34;&gt;Sample SVN repository structure&amp;gt;&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;MyProject
  +-- trunk
  +-- branches
     +-- fixes-1.3
     +-- fixes-1.5
  +-- tags
     +-- build-1.3.1
     +-- build-1.3.2
     +-- build-1.5.1
     +-- build-1.6.1
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;editing-sources&#34;&gt;Editing sources&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Every developer can take fresh PBLs generated by PowerGen after build.&lt;/li&gt;
&lt;li&gt;Before change perform Update command on existing object.&lt;/li&gt;
&lt;li&gt;Import this object from SVN sandbox into your work PBL (replacing existing one).&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;Perform any required changes.&lt;/li&gt;
&lt;li&gt;Export modified object from working PBL to the SVN sandbox.&lt;/li&gt;
&lt;li&gt;Execute Commit command on the exported object in SVN sandbox, provide proper comment and send it to the SVN source control.&lt;/li&gt;
&lt;li&gt;You can also (and I strongly suggest this) perform commit on the entire SVN sandbox - this will send all modified files at once as single transaction. In history you can later see all files checked in as single commit.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;benefits&#34;&gt;Benefits&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;All sources are stored in plain text (including datawindows).&lt;/li&gt;
&lt;li&gt;All changes are simply trackable (from Power Builder 9 (?8?) this works much better, because in previous versions Power Builder changes order of methods on every save) - at least you know who and why made the change.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;You can simply resolve any conflicts (no more hell with sharing and synchronizing PBLs between developers).&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;PBLs can&amp;rsquo;t contain any old errors from rebuilding etc.&lt;/li&gt;
&lt;li&gt;You can also connect additional actions to every souce file commit/checkout/tag and automatically connect those into other company systems.&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;You can also use tags and branches for tracking your builds.&lt;/li&gt;
&lt;li&gt;SVN checkins are tracked as transactions, in history you can directly see all files related to the commit.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;project-management-system-integration&#34;&gt;Project Management System Integration&lt;/h1&gt;

&lt;p&gt;I found project CaptainHook on SourceForge which allows exactly what I wanted - creation of SVN server hooks using .NET code. So I made two simple plugins to it:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;One which disallows commiting changes to the tag folder.&lt;/li&gt;
&lt;li&gt;Second which tooks commit messages formatted same way as in CVS which exports information to the proprietaty project management system.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;cvs-to-svn-migration&#34;&gt;CVS to SVN migration&lt;/h1&gt;

&lt;p&gt;There are plenty of tools available for the repository migration from CVS to SVN. We have migrated a repository which had almost 1GB in CVS without any problems to our new SVN source control including tags and branches including the whole history of changes. Migration was running for about 12 hours.&lt;/p&gt;

&lt;h1 id=&#34;links&#34;&gt;Links&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.tortoisesvn.org/&#34;&gt;TortoiseSVN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://winmerge.org/&#34;&gt;WinMerge&lt;/a&gt;&lt;br /&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://en.wikipedia.org/wiki/PowerBuilder&#34;&gt;Sybase Power Builder on Wiki&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.ecrane.com/&#34;&gt;PowerGen&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://voloda.bazilisek.net/2010/06/using-cvs-as-source-control-with-sybase.html&#34;&gt;CVS and PowerBuilder&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://sourceforge.net/projects/captainhook/&#34;&gt;CaptainHook&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://www.apache.org/&#34;&gt;Apache&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;a href=&#34;http://sourceforge.net/projects/mod-auth-sspi&#34;&gt;mod_auth_sspi&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
