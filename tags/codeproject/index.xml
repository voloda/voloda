<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Codeproject on My personal notes</title>
    <link>http://voloda.bazilisek.net/tags/codeproject/</link>
    <description>Recent content in Codeproject on My personal notes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 03 Sep 2018 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="http://voloda.bazilisek.net/tags/codeproject/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>DbKeeperNet 3 - an alternative to perform database upgrade (migrations) with support of .NET Standard 2.0</title>
      <link>http://voloda.bazilisek.net/2018/09/dbkeepernet-3-an-alternative-to-perform-database-upgrade-migrations-with-support-of-dotnet-standard-2.0/</link>
      <pubDate>Mon, 03 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>http://voloda.bazilisek.net/2018/09/dbkeepernet-3-an-alternative-to-perform-database-upgrade-migrations-with-support-of-dotnet-standard-2.0/</guid>
      <description>

&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;Each project using database access solves how to distribute database schema and how to keep it up-to-date after upgrades. I was solving this problem multiple times, so I decided to write a common, easy to use, and freely available library. The result of this is the &lt;strong&gt;DbKeeperNet&lt;/strong&gt; library which is pure ADO.NET framework (no dependency on Entity Framework).&lt;/p&gt;

&lt;p&gt;This article will briefly show how to use &lt;strong&gt;DbKeeperNet&lt;/strong&gt; library to fulfill this task. The library is designed as extensible and with planned support to any database engine.&lt;/p&gt;

&lt;p&gt;It is basically a simple alternative to Entity Framework database migrations for projects which do not use EF.&lt;/p&gt;

&lt;h1 id=&#34;supported-features&#34;&gt;Supported Features&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;.NET Standard 2.0

&lt;ul&gt;
&lt;li&gt;Supports .NET Core 2.0+&lt;/li&gt;
&lt;li&gt;Supports .NET Framework 4.6.1+&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Very simple usage.&lt;/li&gt;
&lt;li&gt;Database commands are kept in a simple, structured XML file.&lt;/li&gt;
&lt;li&gt;Each upgrade step is executed in a separate transaction (if supported by the database service). In the case of failure, all further steps are prohibited.&lt;/li&gt;
&lt;li&gt;Rich set of built-in preconditions used for evaluation whether update should or shouldn&amp;rsquo;t be executed.&lt;/li&gt;
&lt;li&gt;Support for unlimited and customizable list of database engines.&lt;/li&gt;
&lt;li&gt;In single update, a script may be an alternative to SQL commands, for all database engine types if needed.&lt;/li&gt;
&lt;li&gt;Support for custom preconditions.&lt;/li&gt;
&lt;li&gt;Support for custom in-code upgrade steps (allows complex data transformations to be done in code instead of SQL).&lt;/li&gt;
&lt;li&gt;DbKeeperNet provides deep logging of what is currently happening. Diagnostic output may be redirected through the standard .NET &lt;code&gt;System.Diagnostics.Trace&lt;/code&gt; class or the &lt;code&gt;System.Diagnostics.TraceSource&lt;/code&gt; class, or to a custom plug-in, allowing integration to an already existing application diagnostics framework.&lt;/li&gt;
&lt;li&gt;XML update script structure is strictly defined by the XSD schema which can be used in any XML editor with auto-completion (intellisense).&lt;/li&gt;
&lt;li&gt;Support for MySQL Connect .NET.&lt;/li&gt;
&lt;li&gt;Support for PostrgreSQL.&lt;/li&gt;
&lt;li&gt;Support for SQLite.&lt;/li&gt;
&lt;li&gt;Support for Microsoft SQL server.&lt;/li&gt;
&lt;li&gt;Support for Firebird.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;background&#34;&gt;Background&lt;/h1&gt;

&lt;p&gt;There are two basic principles on how to get your application&amp;rsquo;s database schema up-to-date:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Before each change, check directly in the database whether a change was already made or not (such as ask the database whether a table already exists or not).&lt;/li&gt;
&lt;li&gt;Have a kind of database schema versioning table and record the current schema version.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;DbKeeperNet supports both these principles; however, I suggest to use the second one.&lt;/p&gt;

&lt;p&gt;DbKeeperNet&amp;rsquo;s design for this second principle is in a unique identifier for each update step. The database service implementation simply keeps track of these already executed steps (concrete implementation is strongly dependent on the used database service). This allows you to very simply search the database and check which steps were already executed.&lt;/p&gt;

&lt;h1 id=&#34;using-dbkeepernet&#34;&gt;Using DbKeeperNet&lt;/h1&gt;

&lt;p&gt;The code snippets below are taken from the &lt;em&gt;CoreConsoleApp&lt;/em&gt; project which is part of the source control. If you want to directly execute
the demo project it should work against the SQLite database.&lt;/p&gt;

&lt;p&gt;For other database types you need to adjust connection string and setup appropriate database engine using the correct extension reference:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;DbKeeperNet.Extensions.Mysql&lt;/code&gt;  and its &lt;code&gt;UseMysql()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DbKeeperNet.Extensions.Firebird&lt;/code&gt;  and its &lt;code&gt;UseFirebird()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DbKeeperNet.Extensions.Pgsql&lt;/code&gt;  and its &lt;code&gt;UsePgsql()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DbKeeperNet.Extensions.SQLite&lt;/code&gt;  and its &lt;code&gt;UseSQLite()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DbKeeperNet.Extensions.SqlServer&lt;/code&gt;  and its &lt;code&gt;UseSqlServer()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For more complex scenarios, you can check the &lt;em&gt;ComplexDemo&lt;/em&gt; project (there is an example of a custom step implementation, split XML scripts, etc.).&lt;/p&gt;

&lt;p&gt;My favorite way to implement an upgrade script is by using an XML file stored as an embedded resource in an assembly. So, let&amp;rsquo;s prepare a simple upgrade script with an alternative statement for two different database engines (you can find it in the &lt;em&gt;CoreConsoleApp&lt;/em&gt; demo project as the file &lt;em&gt;DatabaseUpgrade.xml&lt;/em&gt;
which contains also alternative database statements):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#00f&#34;&gt;&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;utf-8&amp;#34; ?&amp;gt;&lt;/span&gt;
&amp;lt;upd:Updates xmlns:upd=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;http://code.google.com/p/dbkeepernet/Updates-1.0.xsd&amp;#34;&lt;/span&gt;
                    xmlns:xsi=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34;&lt;/span&gt;
             xsi:schemaLocation=
        &lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;http://code.google.com/p/dbkeepernet/Updates-1.0.xsd Updates-1.0.xsd&amp;#34;&lt;/span&gt;
                AssemblyName=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;DbKeeperNet.SimpleDemo&amp;#34;&lt;/span&gt;&amp;gt;
  &lt;span style=&#34;color:#008000&#34;&gt;&amp;lt;!-- Default way how to check whether to execute update step or not --&amp;gt;&lt;/span&gt;
  &amp;lt;DefaultPreconditions&amp;gt;
    &lt;span style=&#34;color:#008000&#34;&gt;&amp;lt;!-- We will use step information saving strategy --&amp;gt;&lt;/span&gt;
    &amp;lt;Precondition FriendlyName=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;Update step executed&amp;#34;&lt;/span&gt; 
                Precondition=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;StepNotExecuted&amp;#34;&lt;/span&gt;/&amp;gt;
  &amp;lt;/DefaultPreconditions&amp;gt;
  
  &amp;lt;Update Version=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;1.00&amp;#34;&lt;/span&gt;&amp;gt;
    &amp;lt;UpdateStep xsi:type=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;upd:UpdateDbStepType&amp;#34;&lt;/span&gt; 
    FriendlyName=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;Create table DbKeeperNet_SimpleDemo&amp;#34;&lt;/span&gt; Id=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt;&amp;gt;
      &lt;span style=&#34;color:#008000&#34;&gt;&amp;lt;!-- DbType attribute may be omitted - it will result in default value all
&lt;/span&gt;&lt;span style=&#34;color:#008000&#34;&gt;           which means all database types --&amp;gt;&lt;/span&gt;
      &amp;lt;AlternativeStatement DbType=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;MsSql&amp;#34;&lt;/span&gt;&amp;gt;
        &lt;span style=&#34;color:#00f&#34;&gt;&amp;lt;![CDATA[
&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;          CREATE TABLE DbKeeperNet_SimpleDemo
&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;          (
&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;          id int identity(1, 1) not null,
&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;          name nvarchar(32),
&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;          constraint PK_DbKeeperNet_SimpleDemo primary key clustered (id)
&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;          )
&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;        ]]&amp;gt;&lt;/span&gt;
      &amp;lt;/AlternativeStatement&amp;gt;
    &amp;lt;/UpdateStep&amp;gt;
    &amp;lt;UpdateStep xsi:type=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;upd:UpdateDbStepType&amp;#34;&lt;/span&gt; 
    FriendlyName=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;Fill table DbKeeperNet_SimpleDemo&amp;#34;&lt;/span&gt; Id=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;2&amp;#34;&lt;/span&gt;&amp;gt;
      &amp;lt;AlternativeStatement DbType=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;MsSql&amp;#34;&lt;/span&gt;&amp;gt;
        &lt;span style=&#34;color:#00f&#34;&gt;&amp;lt;![CDATA[
&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;          insert into DbKeeperNet_SimpleDemo(name) values(&amp;#39;First value&amp;#39;);
&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;          insert into DbKeeperNet_SimpleDemo(name) values(&amp;#39;Second value&amp;#39;);
&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;        ]]&amp;gt;&lt;/span&gt;
      &amp;lt;/AlternativeStatement&amp;gt;
    &amp;lt;/UpdateStep&amp;gt;
  &amp;lt;/Update&amp;gt;
&amp;lt;/upd:Updates&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, we will implement the necessary steps for the code execution:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#008000&#34;&gt;// Perform all configured database updates
&lt;/span&gt;&lt;span style=&#34;color:#008000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#2b91af&#34;&gt;string&lt;/span&gt; connectionString = &lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;Data Source=fullframeworkdemo.db3&amp;#34;&lt;/span&gt;;

&lt;span style=&#34;color:#2b91af&#34;&gt;var&lt;/span&gt; serviceCollection = &lt;span style=&#34;color:#00f&#34;&gt;new&lt;/span&gt; ServiceCollection();
serviceCollection.AddDbKeeperNet(c =&amp;gt;
{
    c
    .UseSQLite(connectionString)
    .AddEmbeddedResourceScript(&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;FullFrameworkConsoleApp.DatabaseUpgrade.xml,FullFrameworkConsoleApp&amp;#34;&lt;/span&gt;);
});
serviceCollection.AddLogging(c =&amp;gt; { c.AddConsole(); });

&lt;span style=&#34;color:#2b91af&#34;&gt;var&lt;/span&gt; serviceProvider = serviceCollection.BuildServiceProvider(&lt;span style=&#34;color:#00f&#34;&gt;true&lt;/span&gt;);

&lt;span style=&#34;color:#00f&#34;&gt;using&lt;/span&gt; (&lt;span style=&#34;color:#2b91af&#34;&gt;var&lt;/span&gt; scope = serviceProvider.CreateScope())
{
    &lt;span style=&#34;color:#2b91af&#34;&gt;var&lt;/span&gt; upgrader = scope.ServiceProvider.GetService&amp;lt;IDatabaseUpdater&amp;gt;();
    upgrader.ExecuteUpgrade();
}

&lt;span style=&#34;color:#008000&#34;&gt;// the above line is last required line for installation
&lt;/span&gt;&lt;span style=&#34;color:#008000&#34;&gt;// And now just print all inserted rows on console
&lt;/span&gt;&lt;span style=&#34;color:#008000&#34;&gt;// (just for demonstration purpose)
&lt;/span&gt;&lt;span style=&#34;color:#008000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;using&lt;/span&gt; (&lt;span style=&#34;color:#2b91af&#34;&gt;var&lt;/span&gt; c = &lt;span style=&#34;color:#00f&#34;&gt;new&lt;/span&gt; SqliteConnection(connectionString))
{
    c.Open();

    DbCommand cmd = c.CreateCommand();
    cmd.CommandText = &lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;select * from DbKeeperNet_SimpleDemo&amp;#34;&lt;/span&gt;;
    DbDataReader reader = cmd.ExecuteReader();
    &lt;span style=&#34;color:#00f&#34;&gt;while&lt;/span&gt; (reader.Read())
        Console.WriteLine(&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;{0}: {1}&amp;#34;&lt;/span&gt;, reader[0], reader[1]);
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And that is all - all database changes are executed automatically, only in the case that they were not already executed.&lt;/p&gt;

&lt;h1 id=&#34;changes-from-previous-releases&#34;&gt;Changes from previous releases&lt;/h1&gt;

&lt;p&gt;The XML is backward compatible so you just need to update the way how the database upgrade is invoked. This will give you flexibility of new versions
of the .NET framework including .NET Core 2.1.&lt;/p&gt;

&lt;h1 id=&#34;demo-projects&#34;&gt;Demo projects&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/DbKeeperNet/DbKeeperNet/tree/master/demos/ASPNETCore&#34;&gt;ASP.NET Core demo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/DbKeeperNet/DbKeeperNet/tree/master/demos/ASPNet&#34;&gt;ASP.NET MVC demo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/DbKeeperNet/DbKeeperNet/tree/master/demos/CoreConsoleApp&#34;&gt;.NET Core Console Application demo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/DbKeeperNet/DbKeeperNet/tree/master/demos/FullFrameworkConsoleApp&#34;&gt;.NET Framework 4.6.1 demo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;writing-database-update-scripts&#34;&gt;Writing Database Update Scripts&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;All scripts are executed in the same order as they were registered&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;Assembly&lt;/code&gt; attribute of the &lt;code&gt;Updates&lt;/code&gt; element is in fact a namespace in which each &lt;code&gt;Version&lt;/code&gt; and &lt;code&gt;Step&lt;/code&gt; must be unique. If you would logically divide a single script into multiple files, you can use the same value in all the scripts.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;Version&lt;/code&gt; attribute of the &lt;code&gt;Update&lt;/code&gt; element is intended to be used as a marker of database schema version. I suggest using a unique value for each distributed build changing the database schema (this value can be the same as the assembly version).&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;Step&lt;/code&gt; attribute of the &lt;code&gt;UpdateStep&lt;/code&gt; element should be unique inside each update version.&lt;/li&gt;
&lt;li&gt;Never change the &lt;code&gt;AssemblyName&lt;/code&gt;, &lt;code&gt;Version&lt;/code&gt;, and &lt;code&gt;Step&lt;/code&gt; steps after you deploy the application, unless you are absolutely sure what you are doing.&amp;nbsp;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;project-references&#34;&gt;Project references&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://github.com/DbKeeperNet/DbKeeperNet&#34;&gt;http://github.com/DbKeeperNet/DbKeeperNet&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gitter.im/dbkeepernet/Lobby&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/gitterHQ/gitter.png&#34; alt=&#34;Gitter char&#34; /&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;This article shows only the basics from a set of supported functions. More information and examples of upgrade scripts can be find in the DbKeeperNet source files or in the unit tests.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Unity Registration Validator</title>
      <link>http://voloda.bazilisek.net/2014/11/unity-registration-validator/</link>
      <pubDate>Tue, 25 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>http://voloda.bazilisek.net/2014/11/unity-registration-validator/</guid>
      <description>

&lt;p&gt;Microsoft Unity Extension which verifies registrations between parent and child containers. This is mainly issue when you
accidently inject a dependency from a child container to the parent container while using ContainerControlledLifetimeManager (singleton).&lt;/p&gt;

&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;When using Microsoft Unity IoC container you may face some weird issues when dealing with &amp;lsquo;singletons&amp;rsquo; (ContainerControlledLifetimeManager) and child containers. It may or may not be what you expected.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s consider following classes:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#00f&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;interface&lt;/span&gt; IServiceDependency
{
}

&lt;span style=&#34;color:#00f&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;interface&lt;/span&gt; IService
{
}

&lt;span style=&#34;color:#00f&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#2b91af&#34;&gt;ServiceDependency&lt;/span&gt; : IServiceDependency
{
    &lt;span style=&#34;color:#00f&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;readonly&lt;/span&gt; &lt;span style=&#34;color:#2b91af&#34;&gt;string&lt;/span&gt; _dep1;

    &lt;span style=&#34;color:#00f&#34;&gt;public&lt;/span&gt; ServiceDependency(&lt;span style=&#34;color:#2b91af&#34;&gt;string&lt;/span&gt; dep1)
    {
        _dep1 = dep1;
    }
}

&lt;span style=&#34;color:#00f&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#2b91af&#34;&gt;Service&lt;/span&gt; : IService
{
    &lt;span style=&#34;color:#00f&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;readonly&lt;/span&gt; IServiceDependency _dependency;

    &lt;span style=&#34;color:#00f&#34;&gt;public&lt;/span&gt; Service(IServiceDependency dependency)
    {
        _dependency = dependency;
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now let&amp;rsquo;s setup some test case:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;[Test]
&lt;span style=&#34;color:#00f&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; ServiceResolutionViaTwoDifferentChildContainersShouldFail()
{
    &lt;span style=&#34;color:#2b91af&#34;&gt;var&lt;/span&gt; rootContainer = &lt;span style=&#34;color:#00f&#34;&gt;new&lt;/span&gt; UnityContainer();

    rootContainer.RegisterType&amp;lt;IService, Service&amp;gt;(&lt;span style=&#34;color:#00f&#34;&gt;new&lt;/span&gt; ContainerControlledLifetimeManager());
    &lt;span style=&#34;color:#2b91af&#34;&gt;var&lt;/span&gt; childContainer = rootContainer.CreateChildContainer();
    &lt;span style=&#34;color:#2b91af&#34;&gt;var&lt;/span&gt; childContainer2 = rootContainer.CreateChildContainer();

    childContainer.RegisterInstance&amp;lt;IServiceDependency&amp;gt;(&lt;span style=&#34;color:#00f&#34;&gt;new&lt;/span&gt; ServiceDependency(&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;Dep1&amp;#34;&lt;/span&gt;));
    childContainer2.RegisterInstance&amp;lt;IServiceDependency&amp;gt;(&lt;span style=&#34;color:#00f&#34;&gt;new&lt;/span&gt; ServiceDependency(&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;Dep2&amp;#34;&lt;/span&gt;));

    &lt;span style=&#34;color:#2b91af&#34;&gt;var&lt;/span&gt; childContainerResult1 = childContainer.Resolve&amp;lt;IService&amp;gt;();
    &lt;span style=&#34;color:#2b91af&#34;&gt;var&lt;/span&gt; childContainerResult2 = childContainer.Resolve&amp;lt;IService&amp;gt;();

    &lt;span style=&#34;color:#2b91af&#34;&gt;var&lt;/span&gt; childContainer2Result1 = childContainer.Resolve&amp;lt;IService&amp;gt;();
    &lt;span style=&#34;color:#2b91af&#34;&gt;var&lt;/span&gt; childContainer2Result2 = childContainer.Resolve&amp;lt;IService&amp;gt;();

    Assert.AreEqual(childContainerResult1, childContainerResult2);
    Assert.AreEqual(childContainer2Result1, childContainer2Result2);

    Assert.AreEqual(childContainer2Result1, childContainerResult1);
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;This actually will pass all the assertions.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#34;let-s-analyze-it-a-bit&#34;&gt;Let&amp;rsquo;s analyze it a bit:&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Let&amp;rsquo;s step thru the test case in debugger.&lt;/li&gt;
&lt;li&gt;Setup some watches:

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;((ServiceDependency)((Service)childContainerResult1)._dependency)._dep1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;((ServiceDependency)((Service)childContainer2Result1)._dependency)._dep1&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;You can see that both of them point to &lt;code&gt;Dep1&lt;/code&gt;.

&lt;ul&gt;
&lt;li&gt;Is that what you really wanted?&lt;/li&gt;
&lt;li&gt;Consider the following case:&lt;/li&gt;
&lt;li&gt;You disposed &lt;code&gt;childContainer&lt;/code&gt; and your &lt;code&gt;ServiceDependency&lt;/code&gt; is disposable registered as &lt;code&gt;ContainerControlledLifetimeManager&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;At this point you have invalid instance of &lt;code&gt;IService&lt;/code&gt;&lt;/strong&gt; (it has injected disposed ServiceDependency).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;This is most likely a side effect of unwanted changes and you want to avoid it&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;And this is exactly what is this extension trying to solve&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;By enabling this extension the build operation will fail&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;how-to-enable-extension&#34;&gt;How to enable extension&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Reference the &lt;code&gt;UnityRegistrationValidator.dll&lt;/code&gt; in your project.&lt;/li&gt;
&lt;li&gt;Call the registration below.

&lt;ul&gt;
&lt;li&gt;The extension is available as a &lt;a href=&#34;https://www.nuget.org/packages/UnityRegistrationValidator&#34;&gt;&lt;strong&gt;Nuget package&lt;/strong&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#2b91af&#34;&gt;var&lt;/span&gt; rootContainer = &lt;span style=&#34;color:#00f&#34;&gt;new&lt;/span&gt; UnityContainer();
rootContainer.AddNewExtension&amp;lt;EnsureRegistrationDepthOrderExtension&amp;gt;();&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&#34;following-rules-are-enforced-after-registering-extension&#34;&gt;Following rules are enforced after registering extension&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;For each registration is tracked depth in containers (starting the container in which resolve starts).&lt;/li&gt;
&lt;li&gt;If you register an object which

&lt;ul&gt;
&lt;li&gt;has dependency resolvable only inside the child container&lt;/li&gt;
&lt;li&gt;and has ContainerControlledLifetimeManager()&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;the resolve will fail.&lt;/li&gt;
&lt;li&gt;If you do this without the extension the resolve will succeed but the dependencies were most likely resolved in unexpected way (unless you really know what are you doing).&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;This extension allows you to validate the expected behavior.&lt;/li&gt;
&lt;li&gt;Since it may have performance impact (it needs to track all the registrations as well as build operations) it may have negative performance impact.&lt;/li&gt;
&lt;li&gt;This extension is intended to help you ensure expected behavior - but you have to always consider your circumstanes.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;You are using this extension on your own risk :-).&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;references&#34;&gt;References&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.nuget.org/packages/UnityRegistrationValidator&#34;&gt;https://www.nuget.org/packages/UnityRegistrationValidator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/voloda/UnityRegistrationValidator&#34;&gt;https://github.com/voloda/UnityRegistrationValidator&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>DbKeeperNet - How to seed ASP.NET users and roles</title>
      <link>http://voloda.bazilisek.net/2014/11/dbkeepernet-how-to-seed-aspdotnet-users-and-roles/</link>
      <pubDate>Mon, 24 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>http://voloda.bazilisek.net/2014/11/dbkeepernet-how-to-seed-aspdotnet-users-and-roles/</guid>
      <description>

&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;It is a common task that as a part of database setup you need to seed some default user accounts and roles into the database as a part of setup.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.codeproject.com/Articles/42091/DBKeeperNet-Keeps-Your-DB-Schema-Up-to-date&#34;&gt;DbKeeperNet&lt;/a&gt; is an opensource .NET/C# framework which helps you manage database schema for your database performing various types of upgrade steps. DbKeeperNet is designed with support for various database types in mind. Currently it supports most common databases: &lt;em&gt;&lt;strong&gt;MSSQL, SQLite, Firebird, MySQL&lt;/strong&gt;&lt;/em&gt;, Oracle. Since the whole framework is extensible adding support of a new database type is just a simple task.&lt;/p&gt;

&lt;p&gt;It is just matter of few minutes to get it set up in your project and have in-place infrastructure which will ensure proper upgrade path for your database schema on all installations for your application.&lt;/p&gt;

&lt;p&gt;In its recent version &lt;a href=&#34;http://www.codeproject.com/Articles/42091/DBKeeperNet-Keeps-Your-DB-Schema-Up-to-date&#34;&gt;DbKeeperNet&lt;/a&gt;&amp;nbsp;also support seeding of the ASP.NET membership and roles. With respect to overall design - this is supported on any database which implemented its membership providers and makes them available to the .NET infrastructure.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Please keep in mind that any seeded account with pre-seeded password should change the seeded password ASAP.&lt;/strong&gt;&lt;/p&gt;

&lt;h1 id=&#34;sample-task&#34;&gt;Sample task&lt;/h1&gt;

&lt;p&gt;Let&amp;rsquo;s consider the following set of operations you would perform in your database during the time as your application evolves (of course this can be mixed with any other database schema change like adding a table):&lt;/p&gt;

&lt;h2 id=&#34;upgrade-to-version-1-00&#34;&gt;Upgrade to version 1.00&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;If running on MSSQL setup the membership schema&lt;/li&gt;
&lt;li&gt;Create role TestRole1&lt;/li&gt;
&lt;li&gt;Create role TestRole2&lt;/li&gt;
&lt;li&gt;Create user TestUser1 assigned to TestRole1 and TestRole2&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;upgrade-to-version-1-01&#34;&gt;Upgrade to version 1.01&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Create user TestUser2 assigned to TestRole1&lt;/li&gt;
&lt;li&gt;Delete user TestUser1&lt;/li&gt;
&lt;li&gt;Delete TestRole2&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;upgrade-script&#34;&gt;Upgrade script&lt;/h1&gt;

&lt;p&gt;Part of this article is a console application demo project using the script below and referencing DbKeeperNet as a &lt;a href=&#34;https://www.nuget.org/packages/DbKeeperNet/&#34;&gt;Nuget package&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The demo project is created for the MSSQL but it can be easily adopted for any other database just by changing setup in App.Config
    *   The MSSQL specific step here is necessary since the DB schema creation script requires to be executed within a separated transaction and each of the steps needs to be commited

&lt;ul&gt;
&lt;li&gt;For example MySQL providers seed the required schema on its own upon the first usage of membership providers.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;It can be easily adopted and used in a web application - you simply have to plan for its initial execution.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://www.codeproject.com/Articles/42091/DBKeeperNet-Keeps-Your-DB-Schema-Up-to-date&#34;&gt;DbKeeperNet&lt;/a&gt; is using an XML validated against the XSD schema to define a database upgrade. Below you can find an example database upgrade script to achieve above steps (this is comming directly from the example):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#00f&#34;&gt;&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;utf-8&amp;#34;?&amp;gt;&lt;/span&gt;
&amp;lt;upd:Updates xmlns:upd=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;http://code.google.com/p/dbkeepernet/Updates-1.0.xsd&amp;#34;&lt;/span&gt; xmlns:xsi=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34;&lt;/span&gt; AssemblyName=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;DbKeeperNet.SimpleDemo&amp;#34;&lt;/span&gt; xsi:schemaLocation=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;http://code.google.com/p/dbkeepernet/Updates-1.0.xsd ../../DbKeeperNet.Engine/Resources/Updates-1.0.xsd&amp;#34;&lt;/span&gt;&amp;gt;
  &lt;span style=&#34;color:#008000&#34;&gt;&amp;lt;!-- Default way how to check whether to execute update step or not --&amp;gt;&lt;/span&gt;
  &amp;lt;DefaultPreconditions&amp;gt;
    &lt;span style=&#34;color:#008000&#34;&gt;&amp;lt;!-- We will use step information saving strategy --&amp;gt;&lt;/span&gt;
    &amp;lt;Precondition FriendlyName=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;Update step executed&amp;#34;&lt;/span&gt; Precondition=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;StepNotExecuted&amp;#34;&lt;/span&gt;/&amp;gt;
  &amp;lt;/DefaultPreconditions&amp;gt;
  &amp;lt;Update Version=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;1.00&amp;#34;&lt;/span&gt;&amp;gt;
    &lt;span style=&#34;color:#008000&#34;&gt;&amp;lt;!--
&lt;/span&gt;&lt;span style=&#34;color:#008000&#34;&gt;    This update step is needed to properly inject MSSQL membership schema into the database.
&lt;/span&gt;&lt;span style=&#34;color:#008000&#34;&gt;    The challenge here is that the schema setup must be executed in separated transaction.
&lt;/span&gt;&lt;span style=&#34;color:#008000&#34;&gt;    
&lt;/span&gt;&lt;span style=&#34;color:#008000&#34;&gt;    For other membership providers this is usually handled automatically upon the first usage
&lt;/span&gt;&lt;span style=&#34;color:#008000&#34;&gt;    (like for MySql)
&lt;/span&gt;&lt;span style=&#34;color:#008000&#34;&gt;    --&amp;gt;&lt;/span&gt;
    &amp;lt;UpdateStep xsi:type=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;upd:CustomUpdateStepType&amp;#34;&lt;/span&gt; Id=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt; Type=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;DbKeeperNet.Engine.CustomUpdateSteps.MsSqlStepWithoutExplicitTransaction, DbKeeperNet.Engine&amp;#34;&lt;/span&gt;  FriendlyName=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;Setting up database schema for membership and roles&amp;#34;&lt;/span&gt;&amp;gt;
      &amp;lt;Preconditions&amp;gt;
        &amp;lt;Precondition FriendlyName=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;Update step executed&amp;#34;&lt;/span&gt; Precondition=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;StepNotExecuted&amp;#34;&lt;/span&gt;/&amp;gt;
        &amp;lt;Precondition FriendlyName=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;Database is MSSQL&amp;#34;&lt;/span&gt; Precondition=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;DbType&amp;#34;&lt;/span&gt;&amp;gt;
          &amp;lt;Param&amp;gt;MSSQL&amp;lt;/Param&amp;gt;
        &amp;lt;/Precondition&amp;gt;
      &amp;lt;/Preconditions&amp;gt;
      &amp;lt;Param&amp;gt;DbKeeperNet.Extensions.MsSqlMembershipAndRolesSetup&amp;lt;/Param&amp;gt;
      &amp;lt;Param&amp;gt;DbKeeperNet.Extensions.MsSqlMembershipAndRolesSetup.MsSqlMembershipAndRolesSetup.sql&amp;lt;/Param&amp;gt;
    &amp;lt;/UpdateStep&amp;gt;
    &lt;span style=&#34;color:#008000&#34;&gt;&amp;lt;!-- Create some seeded roles --&amp;gt;&lt;/span&gt;
    &amp;lt;UpdateStep xsi:type=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;upd:AspNetRoleCreateUpdateStepType&amp;#34;&lt;/span&gt; FriendlyName=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;Create role TestRole1&amp;#34;&lt;/span&gt; Id=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;2&amp;#34;&lt;/span&gt; RoleName=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;TestRole1&amp;#34;&lt;/span&gt;/&amp;gt;
    &amp;lt;UpdateStep xsi:type=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;upd:AspNetRoleCreateUpdateStepType&amp;#34;&lt;/span&gt; Id=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;3&amp;#34;&lt;/span&gt; RoleName=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;TestRole2&amp;#34;&lt;/span&gt;/&amp;gt;
    &lt;span style=&#34;color:#008000&#34;&gt;&amp;lt;!-- Seed an account and associate it with roles --&amp;gt;&lt;/span&gt;
    &amp;lt;UpdateStep xsi:type=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;upd:AspNetAccountCreateUpdateStepType&amp;#34;&lt;/span&gt; Id=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;4&amp;#34;&lt;/span&gt; UserName=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;TestUser1&amp;#34;&lt;/span&gt; Mail=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;testuser1@domain.com&amp;#34;&lt;/span&gt; Password=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;SeededPassword&amp;#34;&lt;/span&gt;&amp;gt;
      &amp;lt;Role&amp;gt;TestRole1&amp;lt;/Role&amp;gt;
      &amp;lt;Role&amp;gt;TestRole2&amp;lt;/Role&amp;gt;
    &amp;lt;/UpdateStep&amp;gt;
  &amp;lt;/Update&amp;gt;
  &amp;lt;Update Version=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;1.01&amp;#34;&lt;/span&gt;&amp;gt;
    &amp;lt;UpdateStep xsi:type=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;upd:AspNetAccountCreateUpdateStepType&amp;#34;&lt;/span&gt; Id=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt; UserName=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;TestUser2&amp;#34;&lt;/span&gt; Mail=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;testuser2@domain.com&amp;#34;&lt;/span&gt; Password=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;SeededPassword2&amp;#34;&lt;/span&gt;&amp;gt;
      &amp;lt;Role&amp;gt;TestRole1&amp;lt;/Role&amp;gt;
    &amp;lt;/UpdateStep&amp;gt;
    &lt;span style=&#34;color:#008000&#34;&gt;&amp;lt;!-- Delete the seeded role --&amp;gt;&lt;/span&gt;
    &amp;lt;UpdateStep xsi:type=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;upd:AspNetRoleDeleteUpdateStepType&amp;#34;&lt;/span&gt; Id=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;2&amp;#34;&lt;/span&gt; RoleName=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;TestRole2&amp;#34;&lt;/span&gt;/&amp;gt;
    &lt;span style=&#34;color:#008000&#34;&gt;&amp;lt;!-- Delete one of the seeded accounts --&amp;gt;&lt;/span&gt;
    &amp;lt;UpdateStep xsi:type=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;upd:AspNetAccountDeleteUpdateStepType&amp;#34;&lt;/span&gt; Id=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;3&amp;#34;&lt;/span&gt; UserName=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;TestUser1&amp;#34;&lt;/span&gt;/&amp;gt;
  &amp;lt;/Update&amp;gt;
&amp;lt;/upd:Updates&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now let&amp;rsquo;s setup the C# portion which executes the script:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#2b91af&#34;&gt;string&lt;/span&gt; connString = &lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt;; &lt;span style=&#34;color:#008000&#34;&gt;// MsSql connection   
&lt;/span&gt;&lt;span style=&#34;color:#008000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;using&lt;/span&gt; (UpdateContext context = &lt;span style=&#34;color:#00f&#34;&gt;new&lt;/span&gt; UpdateContext())
{
    context.LoadExtensions();
    context.InitializeDatabaseService(connString);

    Updater updater = &lt;span style=&#34;color:#00f&#34;&gt;new&lt;/span&gt; Updater(context);
    updater.ExecuteXmlFromConfig();
}
Console.WriteLine(&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;Can login as TestUser2: &amp;#34;&lt;/span&gt; + Membership.Provider.ValidateUser(&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;Testuser2&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;SeededPassword2&amp;#34;&lt;/span&gt;));
Console.WriteLine(&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;Can login as TestUser2: &amp;#34;&lt;/span&gt; + Membership.Provider.ValidateUser(&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;testuser2&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;InvalidPassword&amp;#34;&lt;/span&gt;));
Console.WriteLine(&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;Is user testuser2 in role testrole1: &amp;#34;&lt;/span&gt; + Roles.Provider.IsUserInRole(&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;testuser2&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;testrole1&amp;#34;&lt;/span&gt;));
Console.WriteLine(&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;Is user testuser2 in role testrole2: &amp;#34;&lt;/span&gt; + Roles.Provider.IsUserInRole(&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;testuser2&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;testrole2&amp;#34;&lt;/span&gt;));&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And appropriate App.Config portion:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#00f&#34;&gt;&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;utf-8&amp;#34;?&amp;gt;&lt;/span&gt;
&amp;lt;configuration&amp;gt;
  &amp;lt;configSections&amp;gt;
    &amp;lt;section name=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;dbkeeper.net&amp;#34;&lt;/span&gt; type=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;DbKeeperNet.Engine.DbKeeperNetConfigurationSection,DbKeeperNet.Engine&amp;#34;&lt;/span&gt;/&amp;gt;
  &amp;lt;/configSections&amp;gt;
  &amp;lt;dbkeeper.net loggingService=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;fx&amp;#34;&lt;/span&gt;&amp;gt;
    &amp;lt;updateScripts&amp;gt;
&lt;span style=&#34;color:#008000&#34;&gt;&amp;lt;!-- This is the location of the DB Upgrade script - we use an embedded resource --&amp;gt;&lt;/span&gt;
      &amp;lt;add provider=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;asm&amp;#34;&lt;/span&gt; location=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;DbKeeperNet.AspNetMembershipDemo.DatabaseSetup.xml,DbKeeperNet.AspNetMembershipDemo&amp;#34;&lt;/span&gt; /&amp;gt;
    &amp;lt;/updateScripts&amp;gt;
    &amp;lt;databaseServiceMappings&amp;gt;
      &amp;lt;add connectString=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt; databaseService=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;MsSql&amp;#34;&lt;/span&gt; /&amp;gt;
    &amp;lt;/databaseServiceMappings&amp;gt;
  &amp;lt;/dbkeeper.net&amp;gt;
  &amp;lt;connectionStrings&amp;gt;
    &lt;span style=&#34;color:#008000&#34;&gt;&amp;lt;!-- Change this to correct absolute path for the demo or to an actual database --&amp;gt;&lt;/span&gt;
    &amp;lt;add name=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt; connectionString=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;Data Source=.\SQLEXPRESS;AttachDbFilename=&amp;#39;C:\Users\voloda\MyRoot\Development\GIT\DbKeeperNet\DbKeeperNet\Demos\DbKeeperNet.AspNetMembershipDemo\bin\Debug\DbKeeperNetAspNetMembershipDemo.mdf&amp;#39;;Integrated Security=True;Connect Timeout=30;User Instance=True;Initial catalog=DbKeeperNetAspNetMembershipDemo&amp;#34;&lt;/span&gt; providerName=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;System.Data.SqlClient&amp;#34;&lt;/span&gt;/&amp;gt;
  &amp;lt;/connectionStrings&amp;gt;
&lt;span style=&#34;color:#008000&#34;&gt;&amp;lt;!-- Let&amp;#39;s enable MSSQL membership providers --&amp;gt;&lt;/span&gt;
  &amp;lt;system.web&amp;gt;
    &amp;lt;membership defaultProvider=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;AspNetSqlMembershipProvider&amp;#34;&lt;/span&gt;&amp;gt;
      &amp;lt;providers&amp;gt;
        &amp;lt;clear/&amp;gt;
        &amp;lt;add name=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;AspNetSqlMembershipProvider&amp;#34;&lt;/span&gt; type=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;System.Web.Security.SqlMembershipProvider, System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a&amp;#34;&lt;/span&gt; connectionStringName=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt; enablePasswordRetrieval=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;false&amp;#34;&lt;/span&gt; enablePasswordReset=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt; requiresQuestionAndAnswer=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;false&amp;#34;&lt;/span&gt; requiresUniqueEmail=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;false&amp;#34;&lt;/span&gt; passwordFormat=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;Hashed&amp;#34;&lt;/span&gt; maxInvalidPasswordAttempts=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;5&amp;#34;&lt;/span&gt; minRequiredPasswordLength=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;6&amp;#34;&lt;/span&gt; minRequiredNonalphanumericCharacters=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt; passwordAttemptWindow=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;10&amp;#34;&lt;/span&gt; passwordStrengthRegularExpression=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; applicationName=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;/&amp;gt;
      &amp;lt;/providers&amp;gt;
    &amp;lt;/membership&amp;gt;
    &amp;lt;roleManager enabled=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt; defaultProvider=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;AspNetSqlRoleProvider&amp;#34;&lt;/span&gt;&amp;gt;
      &amp;lt;providers&amp;gt;
        &amp;lt;clear/&amp;gt;
        &amp;lt;add connectionStringName=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt; applicationName=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt; name=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;AspNetSqlRoleProvider&amp;#34;&lt;/span&gt; type=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;System.Web.Security.SqlRoleProvider, System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a&amp;#34;&lt;/span&gt;/&amp;gt;
      &amp;lt;/providers&amp;gt;
    &amp;lt;/roleManager&amp;gt;
    &amp;lt;profile enabled=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;false&amp;#34;&lt;/span&gt;&amp;gt;
      &amp;lt;providers&amp;gt;
        &amp;lt;clear/&amp;gt;
      &amp;lt;/providers&amp;gt;
    &amp;lt;/profile&amp;gt;
  &amp;lt;/system.web&amp;gt;
&amp;lt;/configuration&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&#34;references&#34;&gt;References&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://drive.google.com/file/d/0B27zqy23aL3BblVFNGJPdF9XVXM/view?usp=sharing&#34;&gt;Demo project download&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://github.com/DbKeeperNet/DbKeeperNet&#34;&gt;DbKeeperNet&lt;/a&gt; project (contains also some demo projects)&lt;/li&gt;
&lt;li&gt;DbKeeperNet &lt;a href=&#34;http://www.codeproject.com/Articles/42091/DBKeeperNet-Keeps-Your-DB-Schema-Up-to-date&#34;&gt;article&lt;/a&gt; on Codeproject&lt;/li&gt;
&lt;li&gt;Nuget packages

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.nuget.org/packages/DbKeeperNet/&#34;&gt;https://www.nuget.org/packages/DbKeeperNet/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.nuget.org/packages/DbKeeperNet.Extensions.MsSqlMembershipAndRolesSetup/&#34;&gt;https://www.nuget.org/packages/DbKeeperNet.Extensions.MsSqlMembershipAndRolesSetup/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;history&#34;&gt;History&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Initial version&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
