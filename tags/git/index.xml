<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>git on My personal notes on various topics</title>
    <link>https://voloda.bazilisek.net/tags/git/</link>
    <description>Recent content in git on My personal notes on various topics</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>(c) 2010-2019 Vladimir Kloz</copyright>
    <lastBuildDate>Thu, 23 Nov 2017 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://voloda.bazilisek.net/tags/git/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Handling detailed code reviews in GIT</title>
      <link>https://voloda.bazilisek.net/2017/11/handling-detailed-code-reviews-in-git/</link>
      <pubDate>Thu, 23 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://voloda.bazilisek.net/2017/11/handling-detailed-code-reviews-in-git/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;Pull Requests are sometimes not sufficient - they allow to see changes,
perhaps you can even see that a test build passed but these do not allow
for actual functional testing or even navigating thru the code.&lt;/li&gt;
&lt;li&gt;Some times it is convenient to see all the changes in staging area
(similar to TFS unshelve functionality) so functional test can be done
and code can be reviewed more deeply.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Below steps allow to achieve the same state as for TFS unshelve - you end-up
with code checked out and staged in GIT:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Fetch remote changes

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git fetch origin&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Checkout target branch

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git checkout TargetBranchName&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Do dry merge (without commit)

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git merge --no-commit --no-ff origin/ReviewedBranchName&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now you can do the detailed code review, put comments into PR, do testing,
navigate thru references usign Resharper in Visual Studio etc.&lt;/p&gt;

&lt;p&gt;Once done just abort the merge:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git merge --abort&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Jenkinsfile and git authentication on Windows</title>
      <link>https://voloda.bazilisek.net/2017/11/jenkinsfile-and-git-authentication-on-windows/</link>
      <pubDate>Mon, 20 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://voloda.bazilisek.net/2017/11/jenkinsfile-and-git-authentication-on-windows/</guid>
      <description>

&lt;p&gt;In this post are my notes on how to get working &lt;code&gt;git&lt;/code&gt; commands from &lt;code&gt;Jenkinsfile&lt;/code&gt;
running on Windows build agents.&lt;/p&gt;

&lt;h1 id=&#34;password-authentication&#34;&gt;Password authentication&lt;/h1&gt;

&lt;h2 id=&#34;setting-up-username-and-password-in-jenkins-server&#34;&gt;Setting up username and password in Jenkins server&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;First in Jenkins server add a new &lt;code&gt;Credentials&lt;/code&gt; entry of type &lt;code&gt;Username with password&lt;/code&gt;:
&lt;img src=&#34;https://voloda.bazilisek.net/img/jenkins/jenkins_username_and_password.png&#34; alt=&#34;Jenkins username and password&#34; /&gt;.&lt;/li&gt;
&lt;li&gt;Set ID to &lt;code&gt;repo_auth&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;This is later referenced in &lt;code&gt;Jenkinsfile&lt;/code&gt; step &lt;code&gt;withCredentials&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Set &lt;code&gt;Username&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Set &lt;code&gt;Password&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;sample-jenkinsfile&#34;&gt;Sample Jenkinsfile&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Now the system is ready to use above information from &lt;code&gt;Jenkinsfile&lt;/code&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Build script then does following:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Fetches username and password into environment variables&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Invokes any &lt;code&gt;git&lt;/code&gt; command which requires authentication&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pipeline {
agent { label &#39;vs2017&#39; }

environment {
RELEASE_NUMBER = &#39;1.0&#39;
VERSION_NUMBER = VersionNumber(versionNumberString: &#39;1.0.${BUILDS_ALL_TIME}.0&#39;)
}

stages {
stage(&#39;Compile&#39;){
steps {
echo &#39;Compiling&#39;

bat &amp;quot;\&amp;quot;${tool name: &#39;Default&#39;, type: &#39;msbuild&#39;}\\msbuild.exe\&amp;quot; \&amp;quot;build.msbuild\&amp;quot; /p:BuildNumber=${VERSION_NUMBER}&amp;quot;
}
}
stage(&#39;Tagging&#39;) {
steps {
withCredentials([usernamePassword(credentialsId: &#39;repo_auth&#39;, passwordVariable: &#39;GIT_PASSWORD&#39;, usernameVariable: &#39;GIT_USERNAME&#39;)]) {
  bat &amp;quot;git tag &#39;build-${VERSION_NUMBER}&#39;&amp;quot;
  bat &amp;quot;git push http://${GIT_USERNAME}:${GIT_PASSWORD}@repourl.com/test.git --tags&amp;quot;
}
}
}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;ssh-key-authentication-github&#34;&gt;SSH key authentication (Github)&lt;/h1&gt;

&lt;h2 id=&#34;setting-up-known-hosts-in-jenkins-server&#34;&gt;Setting up known hosts in Jenkins server&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;First in Jenkins server add a new &lt;code&gt;Credentials&lt;/code&gt; entry of type &lt;code&gt;Secret text&lt;/code&gt;
&lt;img src=&#34;https://voloda.bazilisek.net/img/jenkins/jenkins_ssh_known_hosts.png&#34; alt=&#34;Jenkins SSH known hosts&#34; /&gt;.&lt;/li&gt;
&lt;li&gt;Set ID to &lt;code&gt;github-knownhosts&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;This is later referenced in &lt;code&gt;Jenkinsfile&lt;/code&gt; step &lt;code&gt;withCredentials&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Set the content of &lt;code&gt;known_hosts&lt;/code&gt; file as value&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;setting-up-the-ssh-key-in-jenkins-server&#34;&gt;Setting up the SSH key in Jenkins server&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Now in Jenkins server add a new &lt;code&gt;Credentials&lt;/code&gt; entry of type &lt;code&gt;SSH Username with private key&lt;/code&gt;
&lt;img src=&#34;https://voloda.bazilisek.net/img/jenkins/jenkins_ssh_key.png&#34; alt=&#34;Jenkins SSH username with private key&#34; /&gt;.&lt;/li&gt;
&lt;li&gt;Set ID to &lt;code&gt;github&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;This is later referenced in &lt;code&gt;Jenkinsfile&lt;/code&gt; step &lt;code&gt;withCredentials&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;sample-jenkinsfile-1&#34;&gt;Sample Jenkinsfile&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Now the system is ready to use above information from &lt;code&gt;Jenkinsfile&lt;/code&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Build script then does following (I am using these from docker build agents
so the build agent always starts from scratch):&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Populates &lt;code&gt;id_rsa&lt;/code&gt; key with received keyFileVariable&lt;/li&gt;
&lt;li&gt;Populates &lt;code&gt;known_hosts&lt;/code&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Invokes any &lt;code&gt;git&lt;/code&gt; command which requires authentication&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pipeline {
agent {label &#39;machine&#39;}

environment {
RELEASE_NUMBER = &#39;1.0&#39;
VERSION_NUMBER = VersionNumber(versionNumberString: &#39;1.0.${BUILDS_ALL_TIME}.0&#39;)
}

stages {
stage(&#39;Build&#39;) {
steps {
bat &amp;quot;powershell.exe -NonInteractive -ExecutionPolicy Bypass -Command \&amp;quot;\$ErrorActionPreference=&#39;Stop&#39;;[Console]::OutputEncoding=[System.Text.Encoding]::UTF8;.\\build.ps1;EXIT \$global:LastExitCode\&amp;quot;&amp;quot;
}
}
stage(&#39;Publish on Github&#39;) {
steps {
withCredentials([
  string(credentialsId: &#39;github-knownhosts&#39;, variable: &#39;KNOWN_HOSTS&#39;),
  sshUserPrivateKey(credentialsId: &#39;github&#39;, keyFileVariable: &#39;RSA_KEY&#39;, usernameVariable: &#39;SSH_USER&#39;)
]) {
  bat &amp;quot;mkdir ${USERPROFILE}\\.ssh&amp;quot;
  bat &amp;quot;copy ${RSA_KEY} ${USERPROFILE}\\.ssh\\id_rsa&amp;quot;
  bat &amp;quot;echo ${KNOWN_HOSTS} &amp;gt; ${USERPROFILE}\\.ssh\\known_hosts&amp;quot;

  bat &amp;quot;git tag &#39;build-${VERSION_NUMBER}&#39;&amp;quot;
  bat &amp;quot;git push ${SSH_USER}@github.com:/project/repo.git --tags&amp;quot;
}
}
}
}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
