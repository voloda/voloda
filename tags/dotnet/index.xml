<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>dotNET on My personal notes on various topics</title>
    <link>https://voloda.bazilisek.net/tags/dotnet/</link>
    <description>Recent content in dotNET on My personal notes on various topics</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>(c) 2010-2019 Vladimir Kloz</copyright>
    <lastBuildDate>Mon, 03 Sep 2018 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://voloda.bazilisek.net/tags/dotnet/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>DbKeeperNet 3 - an alternative to perform database upgrade (migrations) with support of .NET Standard 2.0</title>
      <link>https://voloda.bazilisek.net/2018/09/dbkeepernet-3-an-alternative-to-perform-database-upgrade-migrations-with-support-of-dotnet-standard-2.0/</link>
      <pubDate>Mon, 03 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://voloda.bazilisek.net/2018/09/dbkeepernet-3-an-alternative-to-perform-database-upgrade-migrations-with-support-of-dotnet-standard-2.0/</guid>
      <description>

&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;Each project using database access solves how to distribute database schema and how to keep it up-to-date after upgrades. I was solving this problem multiple times, so I decided to write a common, easy to use, and freely available library. The result of this is the &lt;strong&gt;DbKeeperNet&lt;/strong&gt; library which is pure ADO.NET framework (no dependency on Entity Framework).&lt;/p&gt;

&lt;p&gt;This article will briefly show how to use &lt;strong&gt;DbKeeperNet&lt;/strong&gt; library to fulfill this task. The library is designed as extensible and with planned support to any database engine.&lt;/p&gt;

&lt;p&gt;It is basically a simple alternative to Entity Framework database migrations for projects which do not use EF.&lt;/p&gt;

&lt;h1 id=&#34;supported-features&#34;&gt;Supported Features&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;.NET Standard 2.0

&lt;ul&gt;
&lt;li&gt;Supports .NET Core 2.0+&lt;/li&gt;
&lt;li&gt;Supports .NET Framework 4.6.1+&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Very simple usage.&lt;/li&gt;
&lt;li&gt;Database commands are kept in a simple, structured XML file.&lt;/li&gt;
&lt;li&gt;Each upgrade step is executed in a separate transaction (if supported by the database service). In the case of failure, all further steps are prohibited.&lt;/li&gt;
&lt;li&gt;Rich set of built-in preconditions used for evaluation whether update should or shouldn&amp;rsquo;t be executed.&lt;/li&gt;
&lt;li&gt;Support for unlimited and customizable list of database engines.&lt;/li&gt;
&lt;li&gt;In single update, a script may be an alternative to SQL commands, for all database engine types if needed.&lt;/li&gt;
&lt;li&gt;Support for custom preconditions.&lt;/li&gt;
&lt;li&gt;Support for custom in-code upgrade steps (allows complex data transformations to be done in code instead of SQL).&lt;/li&gt;
&lt;li&gt;DbKeeperNet provides deep logging of what is currently happening. Diagnostic output may be redirected through the standard .NET &lt;code&gt;System.Diagnostics.Trace&lt;/code&gt; class or the &lt;code&gt;System.Diagnostics.TraceSource&lt;/code&gt; class, or to a custom plug-in, allowing integration to an already existing application diagnostics framework.&lt;/li&gt;
&lt;li&gt;XML update script structure is strictly defined by the XSD schema which can be used in any XML editor with auto-completion (intellisense).&lt;/li&gt;
&lt;li&gt;Support for MySQL Connect .NET.&lt;/li&gt;
&lt;li&gt;Support for PostrgreSQL.&lt;/li&gt;
&lt;li&gt;Support for SQLite.&lt;/li&gt;
&lt;li&gt;Support for Microsoft SQL server.&lt;/li&gt;
&lt;li&gt;Support for Firebird.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;background&#34;&gt;Background&lt;/h1&gt;

&lt;p&gt;There are two basic principles on how to get your application&amp;rsquo;s database schema up-to-date:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Before each change, check directly in the database whether a change was already made or not (such as ask the database whether a table already exists or not).&lt;/li&gt;
&lt;li&gt;Have a kind of database schema versioning table and record the current schema version.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;DbKeeperNet supports both these principles; however, I suggest to use the second one.&lt;/p&gt;

&lt;p&gt;DbKeeperNet&amp;rsquo;s design for this second principle is in a unique identifier for each update step. The database service implementation simply keeps track of these already executed steps (concrete implementation is strongly dependent on the used database service). This allows you to very simply search the database and check which steps were already executed.&lt;/p&gt;

&lt;h1 id=&#34;using-dbkeepernet&#34;&gt;Using DbKeeperNet&lt;/h1&gt;

&lt;p&gt;The code snippets below are taken from the &lt;em&gt;CoreConsoleApp&lt;/em&gt; project which is part of the source control. If you want to directly execute
the demo project it should work against the SQLite database.&lt;/p&gt;

&lt;p&gt;For other database types you need to adjust connection string and setup appropriate database engine using the correct extension reference:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;DbKeeperNet.Extensions.Mysql&lt;/code&gt;  and its &lt;code&gt;UseMysql()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DbKeeperNet.Extensions.Firebird&lt;/code&gt;  and its &lt;code&gt;UseFirebird()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DbKeeperNet.Extensions.Pgsql&lt;/code&gt;  and its &lt;code&gt;UsePgsql()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DbKeeperNet.Extensions.SQLite&lt;/code&gt;  and its &lt;code&gt;UseSQLite()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DbKeeperNet.Extensions.SqlServer&lt;/code&gt;  and its &lt;code&gt;UseSqlServer()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For more complex scenarios, you can check the &lt;em&gt;ComplexDemo&lt;/em&gt; project (there is an example of a custom step implementation, split XML scripts, etc.).&lt;/p&gt;

&lt;p&gt;My favorite way to implement an upgrade script is by using an XML file stored as an embedded resource in an assembly. So, let&amp;rsquo;s prepare a simple upgrade script with an alternative statement for two different database engines (you can find it in the &lt;em&gt;CoreConsoleApp&lt;/em&gt; demo project as the file &lt;em&gt;DatabaseUpgrade.xml&lt;/em&gt;
which contains also alternative database statements):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#00f&#34;&gt;&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;utf-8&amp;#34; ?&amp;gt;&lt;/span&gt;
&amp;lt;upd:Updates xmlns:upd=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;http://code.google.com/p/dbkeepernet/Updates-1.0.xsd&amp;#34;&lt;/span&gt;
                    xmlns:xsi=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34;&lt;/span&gt;
             xsi:schemaLocation=
        &lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;http://code.google.com/p/dbkeepernet/Updates-1.0.xsd Updates-1.0.xsd&amp;#34;&lt;/span&gt;
                AssemblyName=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;DbKeeperNet.SimpleDemo&amp;#34;&lt;/span&gt;&amp;gt;
  &lt;span style=&#34;color:#008000&#34;&gt;&amp;lt;!-- Default way how to check whether to execute update step or not --&amp;gt;&lt;/span&gt;
  &amp;lt;DefaultPreconditions&amp;gt;
    &lt;span style=&#34;color:#008000&#34;&gt;&amp;lt;!-- We will use step information saving strategy --&amp;gt;&lt;/span&gt;
    &amp;lt;Precondition FriendlyName=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;Update step executed&amp;#34;&lt;/span&gt; 
                Precondition=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;StepNotExecuted&amp;#34;&lt;/span&gt;/&amp;gt;
  &amp;lt;/DefaultPreconditions&amp;gt;
  
  &amp;lt;Update Version=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;1.00&amp;#34;&lt;/span&gt;&amp;gt;
    &amp;lt;UpdateStep xsi:type=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;upd:UpdateDbStepType&amp;#34;&lt;/span&gt; 
    FriendlyName=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;Create table DbKeeperNet_SimpleDemo&amp;#34;&lt;/span&gt; Id=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt;&amp;gt;
      &lt;span style=&#34;color:#008000&#34;&gt;&amp;lt;!-- DbType attribute may be omitted - it will result in default value all
&lt;/span&gt;&lt;span style=&#34;color:#008000&#34;&gt;           which means all database types --&amp;gt;&lt;/span&gt;
      &amp;lt;AlternativeStatement DbType=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;MsSql&amp;#34;&lt;/span&gt;&amp;gt;
        &lt;span style=&#34;color:#00f&#34;&gt;&amp;lt;![CDATA[
&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;          CREATE TABLE DbKeeperNet_SimpleDemo
&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;          (
&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;          id int identity(1, 1) not null,
&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;          name nvarchar(32),
&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;          constraint PK_DbKeeperNet_SimpleDemo primary key clustered (id)
&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;          )
&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;        ]]&amp;gt;&lt;/span&gt;
      &amp;lt;/AlternativeStatement&amp;gt;
    &amp;lt;/UpdateStep&amp;gt;
    &amp;lt;UpdateStep xsi:type=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;upd:UpdateDbStepType&amp;#34;&lt;/span&gt; 
    FriendlyName=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;Fill table DbKeeperNet_SimpleDemo&amp;#34;&lt;/span&gt; Id=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;2&amp;#34;&lt;/span&gt;&amp;gt;
      &amp;lt;AlternativeStatement DbType=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;MsSql&amp;#34;&lt;/span&gt;&amp;gt;
        &lt;span style=&#34;color:#00f&#34;&gt;&amp;lt;![CDATA[
&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;          insert into DbKeeperNet_SimpleDemo(name) values(&amp;#39;First value&amp;#39;);
&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;          insert into DbKeeperNet_SimpleDemo(name) values(&amp;#39;Second value&amp;#39;);
&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;        ]]&amp;gt;&lt;/span&gt;
      &amp;lt;/AlternativeStatement&amp;gt;
    &amp;lt;/UpdateStep&amp;gt;
  &amp;lt;/Update&amp;gt;
&amp;lt;/upd:Updates&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, we will implement the necessary steps for the code execution:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#008000&#34;&gt;// Perform all configured database updates
&lt;/span&gt;&lt;span style=&#34;color:#008000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#2b91af&#34;&gt;string&lt;/span&gt; connectionString = &lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;Data Source=fullframeworkdemo.db3&amp;#34;&lt;/span&gt;;

&lt;span style=&#34;color:#2b91af&#34;&gt;var&lt;/span&gt; serviceCollection = &lt;span style=&#34;color:#00f&#34;&gt;new&lt;/span&gt; ServiceCollection();
serviceCollection.AddDbKeeperNet(c =&amp;gt;
{
    c
    .UseSQLite(connectionString)
    .AddEmbeddedResourceScript(&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;FullFrameworkConsoleApp.DatabaseUpgrade.xml,FullFrameworkConsoleApp&amp;#34;&lt;/span&gt;);
});
serviceCollection.AddLogging(c =&amp;gt; { c.AddConsole(); });

&lt;span style=&#34;color:#2b91af&#34;&gt;var&lt;/span&gt; serviceProvider = serviceCollection.BuildServiceProvider(&lt;span style=&#34;color:#00f&#34;&gt;true&lt;/span&gt;);

&lt;span style=&#34;color:#00f&#34;&gt;using&lt;/span&gt; (&lt;span style=&#34;color:#2b91af&#34;&gt;var&lt;/span&gt; scope = serviceProvider.CreateScope())
{
    &lt;span style=&#34;color:#2b91af&#34;&gt;var&lt;/span&gt; upgrader = scope.ServiceProvider.GetService&amp;lt;IDatabaseUpdater&amp;gt;();
    upgrader.ExecuteUpgrade();
}

&lt;span style=&#34;color:#008000&#34;&gt;// the above line is last required line for installation
&lt;/span&gt;&lt;span style=&#34;color:#008000&#34;&gt;// And now just print all inserted rows on console
&lt;/span&gt;&lt;span style=&#34;color:#008000&#34;&gt;// (just for demonstration purpose)
&lt;/span&gt;&lt;span style=&#34;color:#008000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;using&lt;/span&gt; (&lt;span style=&#34;color:#2b91af&#34;&gt;var&lt;/span&gt; c = &lt;span style=&#34;color:#00f&#34;&gt;new&lt;/span&gt; SqliteConnection(connectionString))
{
    c.Open();

    DbCommand cmd = c.CreateCommand();
    cmd.CommandText = &lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;select * from DbKeeperNet_SimpleDemo&amp;#34;&lt;/span&gt;;
    DbDataReader reader = cmd.ExecuteReader();
    &lt;span style=&#34;color:#00f&#34;&gt;while&lt;/span&gt; (reader.Read())
        Console.WriteLine(&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;{0}: {1}&amp;#34;&lt;/span&gt;, reader[0], reader[1]);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And that is all - all database changes are executed automatically, only in the case that they were not already executed.&lt;/p&gt;

&lt;h1 id=&#34;changes-from-previous-releases&#34;&gt;Changes from previous releases&lt;/h1&gt;

&lt;p&gt;The XML is backward compatible so you just need to update the way how the database upgrade is invoked. This will give you flexibility of new versions
of the .NET framework including .NET Core 2.1.&lt;/p&gt;

&lt;h1 id=&#34;demo-projects&#34;&gt;Demo projects&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/DbKeeperNet/DbKeeperNet/tree/master/demos/ASPNETCore&#34;&gt;ASP.NET Core demo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/DbKeeperNet/DbKeeperNet/tree/master/demos/ASPNet&#34;&gt;ASP.NET MVC demo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/DbKeeperNet/DbKeeperNet/tree/master/demos/CoreConsoleApp&#34;&gt;.NET Core Console Application demo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/DbKeeperNet/DbKeeperNet/tree/master/demos/FullFrameworkConsoleApp&#34;&gt;.NET Framework 4.6.1 demo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;writing-database-update-scripts&#34;&gt;Writing Database Update Scripts&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;All scripts are executed in the same order as they were registered&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;Assembly&lt;/code&gt; attribute of the &lt;code&gt;Updates&lt;/code&gt; element is in fact a namespace in which each &lt;code&gt;Version&lt;/code&gt; and &lt;code&gt;Step&lt;/code&gt; must be unique. If you would logically divide a single script into multiple files, you can use the same value in all the scripts.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;Version&lt;/code&gt; attribute of the &lt;code&gt;Update&lt;/code&gt; element is intended to be used as a marker of database schema version. I suggest using a unique value for each distributed build changing the database schema (this value can be the same as the assembly version).&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;Step&lt;/code&gt; attribute of the &lt;code&gt;UpdateStep&lt;/code&gt; element should be unique inside each update version.&lt;/li&gt;
&lt;li&gt;Never change the &lt;code&gt;AssemblyName&lt;/code&gt;, &lt;code&gt;Version&lt;/code&gt;, and &lt;code&gt;Step&lt;/code&gt; steps after you deploy the application, unless you are absolutely sure what you are doing.&amp;nbsp;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;project-references&#34;&gt;Project references&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://github.com/DbKeeperNet/DbKeeperNet&#34;&gt;http://github.com/DbKeeperNet/DbKeeperNet&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gitter.im/dbkeepernet/Lobby&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/gitterHQ/gitter.png&#34; alt=&#34;Gitter char&#34; /&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;This article shows only the basics from a set of supported functions. More information and examples of upgrade scripts can be find in the DbKeeperNet source files or in the unit tests.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Is it good idea to throw an exception in .NET C# constructor?</title>
      <link>https://voloda.bazilisek.net/2017/12/is-it-good-idea-to-throw-an-exception-in-dotnet-csharp-constructor/</link>
      <pubDate>Mon, 11 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>https://voloda.bazilisek.net/2017/12/is-it-good-idea-to-throw-an-exception-in-dotnet-csharp-constructor/</guid>
      <description>

&lt;p&gt;I got reminded recently about two cases why it may be actually a bad idea to
do a complex initialization in a class constructor in C#.&lt;/p&gt;

&lt;p&gt;All the code samples below are written just for the purpose of this post but
are based on real code I either written or came across at some point.&lt;/p&gt;

&lt;h1 id=&#34;case-1-instance-resolved-via-an-ioc-container&#34;&gt;Case 1 - instance resolved via an IoC container&lt;/h1&gt;

&lt;p&gt;Recently I was facing an issue that application started but remained non-functional.&lt;/p&gt;

&lt;p&gt;I quickly found following stack trace in the log file.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Unity.Exceptions.ResolutionFailedException: Resolution of the dependency failed, type = &#39;IMyDataReader&#39;, name = &#39;(none)&#39;.
Exception occurred while: Calling constructor MyDataReader().
Exception is: AggregateException - One or more errors occurred.
-----------------------------------------------
At the time of the exception, the container was:
  Resolving MyDataReader,(none) (mapped from IMyDataReader, (none))
  Calling constructor MyDataReader()
 ---&amp;gt; System.AggregateException: One or more errors occurred. ---&amp;gt; System.Net.Http.HttpRequestException: An error occurred while sending the request. ---&amp;gt; System.Net.WebException: Unable to connect to the remote server ---&amp;gt; System.Net.Sockets.SocketException: No connection could be made because the target machine actively refused it 127.0.0.1:1234
   at System.Net.Sockets.Socket.EndConnect(IAsyncResult asyncResult)
   at System.Net.ServicePoint.ConnectSocketInternal(Boolean connectFailure, Socket s4, Socket s6, Socket&amp;amp; socket, IPAddress&amp;amp; address, ConnectSocketState state, IAsyncResult asyncResult, Exception&amp;amp; exception)
   --- End of inner exception stack trace ---
   at System.Net.HttpWebRequest.EndGetResponse(IAsyncResult asyncResult)
   at System.Net.Http.HttpClientHandler.GetResponseCallback(IAsyncResult ar)
   --- End of inner exception stack trace ---
   --- End of inner exception stack trace ---
   at System.Threading.Tasks.Task`1.GetResultCore(Boolean waitCompletionNotification)
   at MyDataReader..ctor() in C:\Users\vladi\Documents\code\UnityInitializer\UnityInitializer.Tests\RootContainerSetupTest.cs:line 117
   at lambda_method(Closure , IBuilderContext )
   at Unity.ObjectBuilder.BuildPlan.DynamicMethod.DynamicBuildPlanGenerationContext.&amp;lt;&amp;gt;c__DisplayClass16_0.&amp;lt;GetBuildMethod&amp;gt;b__0(IBuilderContext context) in C:\projects\unity\Container\src\ObjectBuilder\BuildPlan\DynamicMethod\DynamicBuildPlanGenerationContext.cs:line 134
   at Unity.ObjectBuilder.Strategies.BuildPlanStrategy.PreBuildUp(IBuilderContext context) in C:\projects\unity\Container\src\ObjectBuilder\Strategies\BuildPlanStrategy.cs:line 36
   at Unity.Container.StrategyChain.BuildUp(IBuilderContext builderContext) in C:\projects\unity\Container\src\Container\StrategyChain.cs:line 54
   at Unity.Policy.BuildPlanPolicyExtensions.ExecuteBuildUp(IBuildPlanPolicy policy, IBuilderContext context) in C:\projects\unity\Abstractions\src\Policy\IBuildPlanPolicy.cs:line 36
   at Unity.UnityContainer.BuildUp(Type typeToBuild, Object existing, String name, ResolverOverride[] resolverOverrides) in C:\projects\unity\Container\src\UnityContainer.cs:line 203
   --- End of inner exception stack trace ---
   at Unity.UnityContainer.BuildUp(Type typeToBuild, Object existing, String name, ResolverOverride[] resolverOverrides) in C:\projects\unity\Container\src\UnityContainer.cs:line 215
   at Unity.UnityContainer.Resolve(Type type, String name, ResolverOverride[] resolverOverrides) in C:\projects\unity\Container\src\UnityContainer.cs:line 163
   at Unity.UnityContainerExtensions.Resolve[T](IUnityContainer container, ResolverOverride[] overrides) in C:\projects\unity\Abstractions\src\Utility\UnityContainerExtensions.cs:line 469
   at T.TT() in C:\Users\vladi\Documents\code\UnityInitializer\UnityInitializer.Tests\RootContainerSetupTest.cs:line 97
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see - the log is pretty cryptic. The source in the end led to
following piece of code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#00f&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#2b91af&#34;&gt;MyDataReader&lt;/span&gt; : IMyDataReader
{
    &lt;span style=&#34;color:#2b91af&#34;&gt;string&lt;/span&gt; _name;
    &lt;span style=&#34;color:#00f&#34;&gt;public&lt;/span&gt; MyDataReader()
    {
        &lt;span style=&#34;color:#2b91af&#34;&gt;var&lt;/span&gt; http = &lt;span style=&#34;color:#00f&#34;&gt;new&lt;/span&gt; HttpClient();
        _name = http.GetStringAsync(&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;http://localhost:1234&amp;#34;&lt;/span&gt;).Result;
    }

    &lt;span style=&#34;color:#00f&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#2b91af&#34;&gt;string&lt;/span&gt; Name { &lt;span style=&#34;color:#00f&#34;&gt;get&lt;/span&gt; { &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; _name; } }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The above idea is pretty clear - load the data from local data service and since
those cannot change just cache them.&lt;/p&gt;

&lt;p&gt;The assumption was that the service is always running (this was, due to the
design, actually a good one - my system just didn&amp;rsquo;t have expected setup yet).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;So what is wrong here?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Well - in this particular case the bad part actually was that the class was registered
in Microsoft Unity IoC container.&lt;/p&gt;

&lt;p&gt;As result upon an instance resolution which is the action running the constructor,
the actual place which throws the exception gets quite hidden and non-obvious
since container doesn&amp;rsquo;t know why the class couldn&amp;rsquo;t be constructed.&lt;/p&gt;

&lt;p&gt;Ultimately the support doesn&amp;rsquo;t have basically any chances to find out the issue
and fix it (which may be just starting the missing service).&lt;/p&gt;

&lt;h2 id=&#34;solution&#34;&gt;Solution&lt;/h2&gt;

&lt;p&gt;In this particular case pretty simple - leave the class initialize and lazy
load the actual data later like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#00f&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#2b91af&#34;&gt;MyDataReader&lt;/span&gt; : IMyDataReader
{
    Lazy&amp;lt;&lt;span style=&#34;color:#2b91af&#34;&gt;string&lt;/span&gt;&amp;gt; _name;
    &lt;span style=&#34;color:#00f&#34;&gt;public&lt;/span&gt; MyDataReader()
    {
        _name = &lt;span style=&#34;color:#00f&#34;&gt;new&lt;/span&gt; Lazy&amp;lt;&lt;span style=&#34;color:#2b91af&#34;&gt;string&lt;/span&gt;&amp;gt;(() =&amp;gt;
        {
            &lt;span style=&#34;color:#2b91af&#34;&gt;var&lt;/span&gt; http = &lt;span style=&#34;color:#00f&#34;&gt;new&lt;/span&gt; HttpClient();
            &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; http.GetStringAsync(&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;http://localhost:1234&amp;#34;&lt;/span&gt;).Result;
        });
    }

    &lt;span style=&#34;color:#00f&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#2b91af&#34;&gt;string&lt;/span&gt; Name { &lt;span style=&#34;color:#00f&#34;&gt;get&lt;/span&gt; { &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; _name.Value; } }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Which leads to much more readable log - and more importantly - &lt;strong&gt;the beginning
of the message points quickly to actual issue&lt;/strong&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;System.AggregateException: One or more errors occurred. ---&amp;gt; System.Net.Http.HttpRequestException: An error occurred while sending the request. ---&amp;gt; System.Net.WebException: Unable to connect to the remote server ---&amp;gt; System.Net.Sockets.SocketException: No connection could be made because the target machine actively refused it 127.0.0.1:1234
   at System.Net.Sockets.Socket.EndConnect(IAsyncResult asyncResult)
   at System.Net.ServicePoint.ConnectSocketInternal(Boolean connectFailure, Socket s4, Socket s6, Socket&amp;amp; socket, IPAddress&amp;amp; address, ConnectSocketState state, IAsyncResult asyncResult, Exception&amp;amp; exception)
   --- End of inner exception stack trace ---
   at System.Net.HttpWebRequest.EndGetResponse(IAsyncResult asyncResult)
   at System.Net.Http.HttpClientHandler.GetResponseCallback(IAsyncResult ar)
   --- End of inner exception stack trace ---
   --- End of inner exception stack trace ---
   at System.Threading.Tasks.Task`1.GetResultCore(Boolean waitCompletionNotification)
   at MyDataReader.&amp;lt;&amp;gt;c.&amp;lt;.ctor&amp;gt;b__1_0() in C:\Users\vladi\Documents\code\UnityInitializer\UnityInitializer.Tests\RootContainerSetupTest.cs:line 119
   at System.Lazy`1.CreateValue()
   at System.Lazy`1.LazyInitValue()
   at MyDataReader.get_Name() in C:\Users\vladi\Documents\code\UnityInitializer\UnityInitializer.Tests\RootContainerSetupTest.cs:line 123
   at T.TT() in C:\Users\vladi\Documents\code\UnityInitializer\UnityInitializer.Tests\RootContainerSetupTest.cs:line 97
---&amp;gt; (Inner Exception #0) System.Net.Http.HttpRequestException: An error occurred while sending the request. ---&amp;gt; System.Net.WebException: Unable to connect to the remote server ---&amp;gt; System.Net.Sockets.SocketException: No connection could be made because the target machine actively refused it 127.0.0.1:1234
   at System.Net.Sockets.Socket.EndConnect(IAsyncResult asyncResult)
   at System.Net.ServicePoint.ConnectSocketInternal(Boolean connectFailure, Socket s4, Socket s6, Socket&amp;amp; socket, IPAddress&amp;amp; address, ConnectSocketState state, IAsyncResult asyncResult, Exception&amp;amp; exception)
   --- End of inner exception stack trace ---
   at System.Net.HttpWebRequest.EndGetResponse(IAsyncResult asyncResult)
   at System.Net.Http.HttpClientHandler.GetResponseCallback(IAsyncResult ar)
   --- End of inner exception stack trace ---&amp;lt;---/
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;case-2-working-with-unmanaged-resources&#34;&gt;Case 2 - working with unmanaged resources&lt;/h1&gt;

&lt;p&gt;There is one more interesting scenario to be considered - initializing
unmanaged/disposable resources within the class constructor.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#00f&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; Main()
{
    &lt;span style=&#34;color:#00f&#34;&gt;try&lt;/span&gt;
    {
        &lt;span style=&#34;color:#00f&#34;&gt;using&lt;/span&gt; (&lt;span style=&#34;color:#2b91af&#34;&gt;var&lt;/span&gt; r = &lt;span style=&#34;color:#00f&#34;&gt;new&lt;/span&gt; FReader())
        {

        }
    }
    &lt;span style=&#34;color:#00f&#34;&gt;catch&lt;/span&gt; (Exception ex)
    {
        Console.WriteLine(ex);
    }

    &lt;span style=&#34;color:#00f&#34;&gt;try&lt;/span&gt;
    {
        &lt;span style=&#34;color:#00f&#34;&gt;using&lt;/span&gt; (&lt;span style=&#34;color:#2b91af&#34;&gt;var&lt;/span&gt; r = &lt;span style=&#34;color:#00f&#34;&gt;new&lt;/span&gt; FReader())
        {

        }
    }
    &lt;span style=&#34;color:#00f&#34;&gt;catch&lt;/span&gt; (Exception ex)
    {
        Console.WriteLine(ex);
    }
}

&lt;span style=&#34;color:#00f&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#2b91af&#34;&gt;FReader&lt;/span&gt; : IDisposable
{
    &lt;span style=&#34;color:#00f&#34;&gt;private&lt;/span&gt; Stream _input;

    &lt;span style=&#34;color:#00f&#34;&gt;public&lt;/span&gt; FReader()
    {
        _input = File.Open(&lt;span style=&#34;color:#a31515&#34;&gt;@&amp;#34;C:\windows-version.txt&amp;#34;&lt;/span&gt;, FileMode.Open, FileAccess.Read, FileShare.None);

        &lt;span style=&#34;color:#2b91af&#34;&gt;var&lt;/span&gt; content = _input.ReadByte();

        &lt;span style=&#34;color:#00f&#34;&gt;switch&lt;/span&gt; (content)
        {
            &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#a31515&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;:
            &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#a31515&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;:
                &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;
            &lt;span style=&#34;color:#00f&#34;&gt;default&lt;/span&gt;:
                &lt;span style=&#34;color:#00f&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;new&lt;/span&gt; InvalidOperationException(&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;Unexpected input&amp;#34;&lt;/span&gt;);
        }
    }

    &lt;span style=&#34;color:#00f&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; Dispose()
    {
        _input.Dispose();
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The class seems to be pretty robust, right? It disposes the file properly so
behaves nicely.&lt;/p&gt;

&lt;p&gt;Nothing wrong, at least for the first look.&lt;/p&gt;

&lt;p&gt;But let&amp;rsquo;s look into exceptions being thrown.&lt;/p&gt;

&lt;h2 id=&#34;first-instantiation&#34;&gt;First instantiation&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;System.InvalidOperationException: Unexpected input
   at X.FReader..ctor() in C:\Users\vladi\Documents\code\UnityInitializer\UnityInitializer.Tests\RootContainerSetupTest.cs:line 176
   at X.Main() in C:\Users\vladi\Documents\code\UnityInitializer\UnityInitializer.Tests\RootContainerSetupTest.cs:line 135
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;second-instantiation&#34;&gt;Second instantiation&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;System.IO.IOException: The process cannot access the file &#39;C:\windows-version.txt&#39; because it is being used by another process.
   at System.IO.__Error.WinIOError(Int32 errorCode, String maybeFullPath)
   at System.IO.FileStream.Init(String path, FileMode mode, FileAccess access, Int32 rights, Boolean useRights, FileShare share, Int32 bufferSize, FileOptions options, SECURITY_ATTRIBUTES secAttrs, String msgPath, Boolean bFromProxy, Boolean useLongPath, Boolean checkHost)
   at System.IO.FileStream..ctor(String path, FileMode mode, FileAccess access, FileShare share)
   at System.IO.File.Open(String path, FileMode mode, FileAccess access, FileShare share)
   at X.FReader..ctor() in C:\Users\vladi\Documents\code\UnityInitializer\UnityInitializer.Tests\RootContainerSetupTest.cs:line 164
   at X.Main() in C:\Users\vladi\Documents\code\UnityInitializer\UnityInitializer.Tests\RootContainerSetupTest.cs:line 147
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see for the second case - the file is still locked! So it didn&amp;rsquo;t dispose.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;So what is wrong here?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;In the constructor there is an assumption that the file must have a certain structure.&lt;/p&gt;

&lt;p&gt;But what if the file is invalid?&lt;/p&gt;

&lt;p&gt;It will throw an exception in constructor. Hmm - still good?&lt;/p&gt;

&lt;p&gt;It depends!&lt;/p&gt;

&lt;p&gt;As the exception is thrown - the above level assignment within the &lt;code&gt;using&lt;/code&gt;
statement will never happen here.&lt;/p&gt;

&lt;p&gt;As result - the &lt;code&gt;Dispose()&lt;/code&gt; method will never be called.&lt;/p&gt;

&lt;p&gt;Which means that the resource (in our case file) remains active. The above is
not actually 100% correct all the time.&lt;/p&gt;

&lt;p&gt;Depending on the resource type (for example some unmanaged resource with
finalizer) - you may observe that the resource got at some point cleaned up
during garbage collection.&lt;/p&gt;

&lt;h2 id=&#34;solution-1&#34;&gt;Solution&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;You may consider something like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#00f&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#2b91af&#34;&gt;FReader&lt;/span&gt; : IDisposable
{
   &lt;span style=&#34;color:#00f&#34;&gt;private&lt;/span&gt; Stream _input;

   &lt;span style=&#34;color:#00f&#34;&gt;public&lt;/span&gt; FReader()
   {
       _input = File.Open(&lt;span style=&#34;color:#a31515&#34;&gt;@&amp;#34;C:\windows-version.txt&amp;#34;&lt;/span&gt;, FileMode.Open, FileAccess.Read, FileShare.None);

       &lt;span style=&#34;color:#00f&#34;&gt;try&lt;/span&gt;
       {
           &lt;span style=&#34;color:#2b91af&#34;&gt;var&lt;/span&gt; content = _input.ReadByte();

           &lt;span style=&#34;color:#00f&#34;&gt;switch&lt;/span&gt; (content)
           {
               &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#a31515&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;:
               &lt;span style=&#34;color:#00f&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#a31515&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;:
                   &lt;span style=&#34;color:#00f&#34;&gt;break&lt;/span&gt;;
               &lt;span style=&#34;color:#00f&#34;&gt;default&lt;/span&gt;:
                   &lt;span style=&#34;color:#00f&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;new&lt;/span&gt; InvalidOperationException(&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;Unexpected input&amp;#34;&lt;/span&gt;);
           }
       }
       &lt;span style=&#34;color:#00f&#34;&gt;catch&lt;/span&gt; (Exception ex)
       {
           _input.Dispose();
           _input = &lt;span style=&#34;color:#00f&#34;&gt;null&lt;/span&gt;;
       }
   }

   &lt;span style=&#34;color:#00f&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; Dispose()
   {
       _input.Dispose();
   }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But you will probably very quickly realize that with slightly more complex
   initialization this will become nightmare.
   Also - the object will not be actually properly constructed.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Much easier will actually be avoiding such stuff in constructor and leave
it for later - similar to the first case.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;Always keep in mind what the impact of complex logic within constructor might
be.&lt;/p&gt;

&lt;p&gt;You may shoot yourself and observe really weird non-deterministic issues or
repeating support cases because of unreadable log files.&lt;/p&gt;

&lt;p&gt;For me personally - avoiding the complex logic during the object construction is the
preferred way of coding.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Introducing .NET C# Inversion Of Control and Microsoft Unity Hands-On Lab</title>
      <link>https://voloda.bazilisek.net/2015/03/introducing-dotnet-csharp-inversion-of-control-and-microsoft-unity-hands-on-lab/</link>
      <pubDate>Mon, 16 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://voloda.bazilisek.net/2015/03/introducing-dotnet-csharp-inversion-of-control-and-microsoft-unity-hands-on-lab/</guid>
      <description>

&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;During past few months we introduced and heavily extended usage of &lt;em&gt;Microsoft Unity IoC container&lt;/em&gt; in our code base as a part of the effort to make the code more loosely coupled.&lt;/p&gt;

&lt;p&gt;As a result of those changes we now even more than before also rely on &lt;em&gt;Inversion Of Control&lt;/em&gt; or more specifically &lt;em&gt;Dependency Injection&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Thus both &lt;em&gt;Microsoft Unity&lt;/em&gt; and &lt;em&gt;IoC/DI&lt;/em&gt; are now crucial part of our toolbox. In order to bring everybody on our team up-to-speed as well as to have training material for newbies we decided to create a simple training material which should help us.&lt;/p&gt;

&lt;p&gt;After brief discussion within the team we agreed that the best way how to handle it would be to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Collect some solid resources describing the IoC/DI.

&lt;ul&gt;
&lt;li&gt;Martin Fowler is obviously first choice - though differences between IoC and DI are better explained in different resources :-).&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Provide hands-on lab project which will cover all the specifics for:

&lt;ul&gt;
&lt;li&gt;Inversion Of Control/Dependency injection.&lt;/li&gt;
&lt;li&gt;Microsoft Unity Container.&lt;/li&gt;
&lt;li&gt;Will serve as a self-training material.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;We will publish it on Github under MIT license.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;target-audience&#34;&gt;Target audience&lt;/h1&gt;

&lt;p&gt;.NET Software developers/engineers and architects who:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Would and are willing to learn about IoC/DI.&lt;/li&gt;
&lt;li&gt;Are familiar IoC/DI but would learn about Microsoft Unity IoC container.&lt;/li&gt;
&lt;li&gt;Would learn about possible challenges which usage of the MS Unity can bring.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;training-materials&#34;&gt;Training materials&lt;/h1&gt;

&lt;p&gt;With my colleagues we prepared set of projects which allows everybody to play with all the stuff on reasonably sized projects.&lt;/p&gt;

&lt;p&gt;Brief introduction can be found &lt;a href=&#34;https://github.com/IoCHowTo/IoCTasks/blob/master/README.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;github-projects&#34;&gt;Github projects&lt;/h2&gt;

&lt;p&gt;If you are either familiar with Github or if you would use this as an opportunity to learn more about it you can just fork/clone repositories below.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/IoCHowTo/IoCTasks&#34;&gt;https://github.com/IoCHowTo/IoCTasks&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;This repository contains initial Readme.md file with references as well as brief introduction.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/IoCHowTo/IoCTasksSolutions&#34;&gt;https://github.com/IoCHowTo/IoCTasksSolutions&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;This repository contains individual sample solutions for each project above.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;direct-access&#34;&gt;Direct access&lt;/h2&gt;

&lt;p&gt;In the case that you do not like Git/Github you can use direct links below to get the latest version of training projects as well as sample solutions in form of ZIP packages:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/IoCHowTo/IoCTasks/archive/master.zip&#34;&gt;https://github.com/IoCHowTo/IoCTasks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/IoCHowTo/IoCTasksSolutions/archive/master.zip&#34;&gt;https://github.com/IoCHowTo/IoCTasksSolutions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;contributions&#34;&gt;Contributions&lt;/h1&gt;

&lt;p&gt;If you will find something which needs to be fixed or if you have some interesting sample task just send it as a Github pull request - we accept contributions under MIT license.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Thanks to everybody who already contributed with his time either in form of code or even advice :-).&lt;/strong&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Debugging T-SQL Stored Procedure Invoked From NUnit Tests In Visual Studio 2013 Debugger</title>
      <link>https://voloda.bazilisek.net/2015/03/debugging-t-sql-stored-procedure-invoked-from-nunit-tests-in-visual-studio-2013-debugger/</link>
      <pubDate>Tue, 10 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>https://voloda.bazilisek.net/2015/03/debugging-t-sql-stored-procedure-invoked-from-nunit-tests-in-visual-studio-2013-debugger/</guid>
      <description>

&lt;p&gt;Recently I had to write quite a few interesting stored procedures for MSSQL server which are covered by unit tests invoked as a part of continuous integration build in &lt;strong&gt;Team City&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Setting up the data and parameters for stored procedure takes some time and there are many scenarios thus I started looking for a ways:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;How to debug stored procedures using the existing infrastructure without necessity to extract everything out and use separated debugger in the &lt;strong&gt;SQL Server Management Studio&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;How to stub some of the data so the complex parts of queries can be easily verified.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the end I got working debugging with following setup:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Stored procedures written in T-SQL for MSSQL.&lt;/li&gt;
&lt;li&gt;Each stored procedure is covered by unit tests written in NUnit.

&lt;ul&gt;
&lt;li&gt;Thanks to tip of my colleague MSSQL guru &lt;em&gt;Lubos&lt;/em&gt; I was able quickly setup SQL Server snapshots to be able revert the database quickly to its initial state.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Lubos&lt;/em&gt; also proposed very simple way on how to &lt;strong&gt;stub&lt;/strong&gt; some data in procedures.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;In order to be able quickly check what is going on inside the stored procedure use the Visual Studio 2013 debugger including the ability to step into the stored procedure.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;using-stubs-for-data-used-inside-stored-procedures&#34;&gt;Using stubs for data used inside stored procedures&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Motivation here is that it is not always simple enough or even practical setup all the required data directly in the database.

&lt;ul&gt;
&lt;li&gt;Downside obviously is that since you are about to alter the stored procedure you have to be very careful.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;My colleague proposed a very simple way for this purpose which seems to work:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Before running tests take a database snapshot so you can easily revert back.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Inside procedures use some markers which can be quickly identified and the content between them can be replaced - for example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;[Stub1]
&lt;span style=&#34;color:#00f&#34;&gt;SELECT&lt;/span&gt; * &lt;span style=&#34;color:#00f&#34;&gt;FROM&lt;/span&gt; [MyInvoices]
[#Stub1]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Next before you execute the stored procedure you fetch its source and replace the code
between markers with select from data stub (for example temporary table):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;[Stub1]
&lt;span style=&#34;color:#00f&#34;&gt;SELECT&lt;/span&gt; * &lt;span style=&#34;color:#00f&#34;&gt;FROM&lt;/span&gt; #MyInvoices
[#Stub1] &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Before you exercise the stored procedure you simply populate content of #MyInvoices temporary table and run it.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;how-to-enable-t-sql-debugging-in-visual-studio-2013&#34;&gt;How to enable T-SQL debugging in Visual Studio 2013&lt;/h1&gt;

&lt;p&gt;This was the most tricky part of the whole procedure and it may be specific to my setup (MSSQL 2008 R2, VS2013).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;As a prerequisite the &lt;em&gt;Application debugging&lt;/em&gt; and &lt;em&gt;SQL/CLR debugging&lt;/em&gt; must be enabled for the SQL Server in the &lt;em&gt;SQL Server Object Explorer&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;There are two ways how to get to &lt;em&gt;SQL Server Object Explorer&lt;/em&gt;:

&lt;ul&gt;
&lt;li&gt;Directly open &lt;em&gt;SQL Server Object Explorer&lt;/em&gt; via Visual Studio menu &lt;em&gt;VIEW&lt;/em&gt;:
&lt;img src=&#34;https://voloda.bazilisek.net/img/sqldebugging/visual_studio_2013_open_sql_server_object_explorer.png&#34; alt=&#34;Open SQL Server Object Explorer in VS 2013 menu&#34; /&gt;&lt;/li&gt;
&lt;li&gt;Alternatively use &lt;em&gt;Server Explorer&lt;/em&gt;:

&lt;ul&gt;
&lt;li&gt;Firstly add a connection to your database&lt;/li&gt;
&lt;li&gt;Then right click using mouse on registered database and select &lt;em&gt;Browse in SQL Server Object Explorer&lt;/em&gt;:
&lt;img src=&#34;https://voloda.bazilisek.net/img/sqldebugging/visual_studio_2013_open_sql_server_object_explorer_from_server_explorer.jpg&#34; alt=&#34;Open SQL Server Object Explorer from Server Explorer in VS2013&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Once you get into the &lt;em&gt;SQL Server Object Explorer&lt;/em&gt; enable both debugging options as visible on picture below:
 &lt;img src=&#34;https://voloda.bazilisek.net/img/sqldebugging/visual_studio_2013_enable_sql_debugging_in_sql_server_object_explorer.png&#34; alt=&#34;Enable debugging in SQL Server Object Explorer from VS2013&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;running-tests&#34;&gt;Running tests&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Running tests just for verification purposes is very simple and basically any NUnit runner can be used.&lt;/li&gt;
&lt;li&gt;In our case for the standard purpose serves very well Jetbrains Resharper.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;debugging-tests&#34;&gt;Debugging tests&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Unfortunately this didn&amp;rsquo;t work with built-in R# test runner.&lt;/li&gt;
&lt;li&gt;Instead I use &lt;strong&gt;NUnit-x86.exe&lt;/strong&gt; runner (I simply needed to force the process bitness to 32bits but I suppose that &lt;strong&gt;NUnit.exe&lt;/strong&gt; will work as well):

&lt;ul&gt;
&lt;li&gt;Load test assembly into NUnit runner.&lt;/li&gt;
&lt;li&gt;Attach Visual Studio 2013 debugger to running process.&lt;/li&gt;
&lt;li&gt;Important part here is to have enabled both - &lt;strong&gt;Managed code&lt;/strong&gt; and &lt;strong&gt;T-SQL&lt;/strong&gt; code debugging prior to attaching to he &lt;strong&gt;NUnit-x86.exe&lt;/strong&gt; process:
&lt;img src=&#34;https://voloda.bazilisek.net/img/sqldebugging/visual_studio_2013_attach_debugger_with_t_sql_debugging.jpg&#34; alt=&#34;Attaching to NUnit with enabled T-SQL debugging&#34; /&gt;&lt;/li&gt;
&lt;li&gt;Now set a .breakpoint in .NET code just around the code which is responsible for invocation of the stored procedure you are interested in, for example &lt;code&gt;SqlDbCommand.Execute()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Run unit test from the NUnit runner and have it hit the breakpoint in Visual Studio.&lt;/li&gt;
&lt;li&gt;Now from the _&lt;strong&gt;SQL Server Object Explorer&lt;/strong&gt; open the body of stored procedure (just double-click on it),&lt;/li&gt;
&lt;li&gt;Set a breakpoint inside the procedure.&lt;/li&gt;
&lt;li&gt;And step thru the .NET code which is about to invoke the procedure.&lt;/li&gt;
&lt;li&gt;If everything works well for you you are now inside the stored procedure and you can debug it.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;watching-data-inside-the-stored-procedure&#34;&gt;Watching data inside the stored procedure&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;You can easily watch content of any variable inside the stored procedure.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;I found very simple trick which can be used to watch also content of temporary tables and table variables.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;At the place you would check the content add following statement (obviously adjusted for correct table/variable name):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#00f&#34;&gt;DECLARE&lt;/span&gt; @v XML = (&lt;span style=&#34;color:#00f&#34;&gt;SELECT&lt;/span&gt; * &lt;span style=&#34;color:#00f&#34;&gt;FROM&lt;/span&gt; #&lt;span style=&#34;color:#00f&#34;&gt;Parameters&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;FOR&lt;/span&gt; XML AUTO, ROOT(&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#39;MyRoot&amp;#39;&lt;/span&gt;))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Once you will hit the statement in the debugger you can easily watch the content of &lt;code&gt;@v&lt;/code&gt; and visualize it for example via &lt;em&gt;XML Visualizer&lt;/em&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Visual Studio 2012 debugger does not break after attaching to C#/.NET process</title>
      <link>https://voloda.bazilisek.net/2014/12/visual-studio-2012-debugger-does-not-break-after-attaching-to-csharp-dotnet-process/</link>
      <pubDate>Thu, 18 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>https://voloda.bazilisek.net/2014/12/visual-studio-2012-debugger-does-not-break-after-attaching-to-csharp-dotnet-process/</guid>
      <description>&lt;p&gt;I had from time to time issue debug C#/.NET applications in Visual Studio 2012 after attaching Visual Studio 2012 debugger to a process.&lt;/p&gt;

&lt;p&gt;Symptoms were that the debugger attached to the process but neither &amp;lsquo;Break All&amp;rsquo; worked. The same applied for any preset breakpoint.&lt;/p&gt;

&lt;p&gt;For some time I thought that Visual Studio installation for somehow corrupted on my system but since I was always able to workaround it via &lt;code&gt;Debug.Assert()&lt;/code&gt; or &lt;code&gt;Debugger.Break()&lt;/code&gt; calls put directly into code I had never motivation to really look for a solution nor reinstall the Visual Studio.&lt;/p&gt;

&lt;p&gt;Today I really wanted to attach to a process to see what is going on inside and the issue happened again.&lt;/p&gt;

&lt;p&gt;After a bit of playing I realized that in the case that debugger works after attaching correctly the &amp;lsquo;Attach to Process&amp;rsquo; Visual Studio dialog looks like this (see &amp;lsquo;Attach to&amp;rsquo; field):
&lt;img src=&#34;https://voloda.bazilisek.net/img/visual-studio/visual_studio_debugger_does_recognize_process_type.png&#34; alt=&#34;visual_studio_debugger_does_recognize_process_type.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;For my process it didn&amp;rsquo;t work this time and &amp;lsquo;Attach to Process&amp;rsquo; dialog looked like this (again see &amp;lsquo;Attach to&amp;rsquo; field):
&lt;img src=&#34;https://voloda.bazilisek.net/img/visual-studio/visual_studio_debugger_does_not_recognize_process_type.png&#34; alt=&#34;visual_studio_debugger_does_not_recognize_process_type.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Apparently Visual Studio in some cases does not properly detect the type of the process and does not use correct debugger settings.&lt;/p&gt;

&lt;p&gt;In order to solve my issue I finally found the &amp;lsquo;Select&amp;hellip;&amp;rsquo; button following &amp;lsquo;Attach to&amp;rsquo; field where you can disable automatic detection of the process type and manually select a different one.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://voloda.bazilisek.net/img/visual-studio/visual_studio_debugger_does_not_recognize_process_select_code_type.png&#34; alt=&#34;visual_studio_debugger_does_not_recognize_process_select_code_type.png &#34; /&gt;&lt;/p&gt;

&lt;p&gt;After selecting &amp;lsquo;Manager (v4.5, 4.0)&amp;rsquo; and attaching debugger to process again everything worked well.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to release unmanaged library loaded into managed .NET code</title>
      <link>https://voloda.bazilisek.net/2014/12/how-to-release-unmanaged-library-loaded-into-managed-dotnet-code/</link>
      <pubDate>Wed, 03 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>https://voloda.bazilisek.net/2014/12/how-to-release-unmanaged-library-loaded-into-managed-dotnet-code/</guid>
      <description>

&lt;h1 id=&#34;motivation&#34;&gt;Motivation&lt;/h1&gt;

&lt;p&gt;I had found this article on how to release DLL library already loaded into the process using P-Invoke. It uses &lt;code&gt;LoadLibrary()&lt;/code&gt; and &lt;code&gt;FreeLibrary()&lt;/code&gt; WINAPI calls to achieve this.&lt;/p&gt;

&lt;p&gt;And what is wrong with it?&lt;/p&gt;

&lt;p&gt;It forces to unload ALL instances of the DLL library currently loaded within process. Which means, that in the case you have more than one instance of the class using these external functions ALL these will stop working!&lt;/p&gt;

&lt;p&gt;And that is not all - you cannot use this DLL in same application domain again after unloading.&lt;/p&gt;

&lt;h1 id=&#34;solution&#34;&gt;Solution&lt;/h1&gt;

&lt;p&gt;Solution is pretty simple one, but I have to say that it wasn&amp;rsquo;t very obvious to me at the beginning.
You can use P-Invoke to import following standard WinAPI functions for dynamical function loading:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-LoadLibrary()```&#34; data-lang=&#34;LoadLibrary()```&#34;&gt;* ```FreeLibrary()```
* ```GetProcAddress()```

We will use following wrapping class:&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;csharp&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;internal static class UnsafeMethods
{
    [DllImport(&amp;ldquo;kernel32.dll&amp;rdquo;, SetLastError = true)]
    internal extern static IntPtr LoadLibrary(string libraryName);
    [DllImport(&amp;ldquo;kernel32.dll&amp;rdquo;, SetLastError = true)]
    internal extern static bool FreeLibrary(IntPtr hModule);
    [DllImport(&amp;ldquo;kernel32.dll&amp;rdquo;, SetLastError = true)]
    internal extern static IntPtr GetProcAddress(IntPtr hModule, string procName);
}&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;We also need signatures of imported functions - we will convert them into delegates (following ones come from sample project):
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;csharp
// int multiply(int value1, int value2);
private delegate int MultiplyDelegate(int value1, int value2);
// int str2int(const char *input);
private delegate int Str2IntDelegate([MarshalAs(UnmanagedType.LPStr)]string source);&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
Now we can create implement our class calling external DLL functionality with ```IDisposable``` interface so it will automatically release used DLL library when it will go out-of-scope or it will be finalized (in example project are two functions which we will publish as ```Multiply()``` and ```Str2Int()```).

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;csharp
public class ExternalHelpers: IDisposable
{
    #region Private members
    private IntPtr _libraryHandle;
    private MultiplyDelegate _multiply;
    private Str2IntDelegate _str2Int;
    #endregion&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#region External functions delegates
// int multiply(int value1, int value2);
private delegate int MultiplyDelegate(int value1, int value2);
// int str2int(const char *input);
private delegate int Str2IntDelegate([MarshalAs(UnmanagedType.LPStr)]string source);
#endregion

public ExternalHelpers()
{
    // dynamically load DLL using WinAPI
    _libraryHandle = UnsafeMethods.LoadLibrary(@&amp;quot;testing.dll&amp;quot;);

    if (_libraryHandle == IntPtr.Zero)
        Marshal.ThrowExceptionForHR(Marshal.GetHRForLastWin32Error());
    // import functions as delegates using GetProcAddress
    _multiply = LoadExternalFunction&amp;lt;MultiplyDelegate&amp;gt;(@&amp;quot;multiply&amp;quot;);
    _str2Int = LoadExternalFunction&amp;lt;Str2IntDelegate&amp;gt;(@&amp;quot;str2int&amp;quot;);
}

public int Multiply(int value1, int value2)
{
    // call method using delegate
    return _multiply(value1, value2);
}

public int Str2Int(string source)
{
    // call method using delegate
    return _str2Int(source);
}

public void Dispose()
{
    Dispose(true);

    GC.SuppressFinalize(this);
}

~ExternalHelpers()
{
    Dispose(false);
}

#region Private helper methods
private T LoadExternalFunction&amp;lt;T&amp;gt;(string functionName)
    where T: class
{
    Debug.Assert(!String.IsNullOrEmpty(functionName));
    // load function pointer
    IntPtr functionPointer = UnsafeMethods.GetProcAddress(_libraryHandle, functionName);

    if (functionPointer == IntPtr.Zero)
        Marshal.ThrowExceptionForHR(Marshal.GetHRForLastWin32Error());
    // Marshal to requested delegate
    return Marshal.GetDelegateForFunctionPointer(functionPointer, typeof(T)) as T;
}

private void Dispose(bool disposing)
{
    if (disposing)
    {
        _multiply = null;
        _str2Int = null;
    }

    if (_libraryHandle != IntPtr.Zero)
    {
        if (!UnsafeMethods.FreeLibrary(_libraryHandle))
            Marshal.ThrowExceptionForHR(Marshal.GetHRForLastWin32Error());

        _libraryHandle = IntPtr.Zero;
    }
}
#endregion
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;}&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
And finally - we can use it:

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;csharp
static void Main(string[] args)
{
    using(ExternalHelpers e = new ExternalHelpers())
    {
        const int value1 = 2;
        const int value2 = 3;
        const string strValue = &amp;ldquo;345&amp;rdquo;;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    Console.WriteLine(&amp;quot;{0} * {1} = {2}&amp;quot;, value1, value2, e.Multiply(value1, value2));
    Console.WriteLine(&amp;quot;{0} =&amp;gt; {1}&amp;quot;, strValue, e.Str2Int(strValue));
}

Console.ReadKey();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;}
```&lt;/p&gt;

&lt;p&gt;Looks easy? Yes it is :-)&lt;/p&gt;

&lt;h1 id=&#34;links&#34;&gt;Links&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://msdn.microsoft.com/&#34;&gt;MSDN&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Unity Registration Validator</title>
      <link>https://voloda.bazilisek.net/2014/11/unity-registration-validator/</link>
      <pubDate>Tue, 25 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>https://voloda.bazilisek.net/2014/11/unity-registration-validator/</guid>
      <description>

&lt;p&gt;Microsoft Unity Extension which verifies registrations between parent and child containers. This is mainly issue when you
accidently inject a dependency from a child container to the parent container while using ContainerControlledLifetimeManager (singleton).&lt;/p&gt;

&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;When using Microsoft Unity IoC container you may face some weird issues when dealing with &amp;lsquo;singletons&amp;rsquo; (ContainerControlledLifetimeManager) and child containers. It may or may not be what you expected.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s consider following classes:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#00f&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;interface&lt;/span&gt; IServiceDependency
{
}

&lt;span style=&#34;color:#00f&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;interface&lt;/span&gt; IService
{
}

&lt;span style=&#34;color:#00f&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#2b91af&#34;&gt;ServiceDependency&lt;/span&gt; : IServiceDependency
{
    &lt;span style=&#34;color:#00f&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;readonly&lt;/span&gt; &lt;span style=&#34;color:#2b91af&#34;&gt;string&lt;/span&gt; _dep1;

    &lt;span style=&#34;color:#00f&#34;&gt;public&lt;/span&gt; ServiceDependency(&lt;span style=&#34;color:#2b91af&#34;&gt;string&lt;/span&gt; dep1)
    {
        _dep1 = dep1;
    }
}

&lt;span style=&#34;color:#00f&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#2b91af&#34;&gt;Service&lt;/span&gt; : IService
{
    &lt;span style=&#34;color:#00f&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;readonly&lt;/span&gt; IServiceDependency _dependency;

    &lt;span style=&#34;color:#00f&#34;&gt;public&lt;/span&gt; Service(IServiceDependency dependency)
    {
        _dependency = dependency;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now let&amp;rsquo;s setup some test case:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;[Test]
&lt;span style=&#34;color:#00f&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;void&lt;/span&gt; ServiceResolutionViaTwoDifferentChildContainersShouldFail()
{
    &lt;span style=&#34;color:#2b91af&#34;&gt;var&lt;/span&gt; rootContainer = &lt;span style=&#34;color:#00f&#34;&gt;new&lt;/span&gt; UnityContainer();

    rootContainer.RegisterType&amp;lt;IService, Service&amp;gt;(&lt;span style=&#34;color:#00f&#34;&gt;new&lt;/span&gt; ContainerControlledLifetimeManager());
    &lt;span style=&#34;color:#2b91af&#34;&gt;var&lt;/span&gt; childContainer = rootContainer.CreateChildContainer();
    &lt;span style=&#34;color:#2b91af&#34;&gt;var&lt;/span&gt; childContainer2 = rootContainer.CreateChildContainer();

    childContainer.RegisterInstance&amp;lt;IServiceDependency&amp;gt;(&lt;span style=&#34;color:#00f&#34;&gt;new&lt;/span&gt; ServiceDependency(&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;Dep1&amp;#34;&lt;/span&gt;));
    childContainer2.RegisterInstance&amp;lt;IServiceDependency&amp;gt;(&lt;span style=&#34;color:#00f&#34;&gt;new&lt;/span&gt; ServiceDependency(&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;Dep2&amp;#34;&lt;/span&gt;));

    &lt;span style=&#34;color:#2b91af&#34;&gt;var&lt;/span&gt; childContainerResult1 = childContainer.Resolve&amp;lt;IService&amp;gt;();
    &lt;span style=&#34;color:#2b91af&#34;&gt;var&lt;/span&gt; childContainerResult2 = childContainer.Resolve&amp;lt;IService&amp;gt;();

    &lt;span style=&#34;color:#2b91af&#34;&gt;var&lt;/span&gt; childContainer2Result1 = childContainer.Resolve&amp;lt;IService&amp;gt;();
    &lt;span style=&#34;color:#2b91af&#34;&gt;var&lt;/span&gt; childContainer2Result2 = childContainer.Resolve&amp;lt;IService&amp;gt;();

    Assert.AreEqual(childContainerResult1, childContainerResult2);
    Assert.AreEqual(childContainer2Result1, childContainer2Result2);

    Assert.AreEqual(childContainer2Result1, childContainerResult1);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;This actually will pass all the assertions.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#34;let-s-analyze-it-a-bit&#34;&gt;Let&amp;rsquo;s analyze it a bit:&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Let&amp;rsquo;s step thru the test case in debugger.&lt;/li&gt;
&lt;li&gt;Setup some watches:

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;((ServiceDependency)((Service)childContainerResult1)._dependency)._dep1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;((ServiceDependency)((Service)childContainer2Result1)._dependency)._dep1&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;You can see that both of them point to &lt;code&gt;Dep1&lt;/code&gt;.

&lt;ul&gt;
&lt;li&gt;Is that what you really wanted?&lt;/li&gt;
&lt;li&gt;Consider the following case:&lt;/li&gt;
&lt;li&gt;You disposed &lt;code&gt;childContainer&lt;/code&gt; and your &lt;code&gt;ServiceDependency&lt;/code&gt; is disposable registered as &lt;code&gt;ContainerControlledLifetimeManager&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;At this point you have invalid instance of &lt;code&gt;IService&lt;/code&gt;&lt;/strong&gt; (it has injected disposed ServiceDependency).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;This is most likely a side effect of unwanted changes and you want to avoid it&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;And this is exactly what is this extension trying to solve&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;By enabling this extension the build operation will fail&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;how-to-enable-extension&#34;&gt;How to enable extension&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Reference the &lt;code&gt;UnityRegistrationValidator.dll&lt;/code&gt; in your project.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Call the registration below.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The extension is available as a &lt;a href=&#34;https://www.nuget.org/packages/UnityRegistrationValidator&#34;&gt;&lt;strong&gt;Nuget package&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#2b91af&#34;&gt;var&lt;/span&gt; rootContainer = &lt;span style=&#34;color:#00f&#34;&gt;new&lt;/span&gt; UnityContainer();
rootContainer.AddNewExtension&amp;lt;EnsureRegistrationDepthOrderExtension&amp;gt;();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;following-rules-are-enforced-after-registering-extension&#34;&gt;Following rules are enforced after registering extension&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;For each registration is tracked depth in containers (starting the container in which resolve starts).&lt;/li&gt;
&lt;li&gt;If you register an object which

&lt;ul&gt;
&lt;li&gt;has dependency resolvable only inside the child container&lt;/li&gt;
&lt;li&gt;and has ContainerControlledLifetimeManager()&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;the resolve will fail.&lt;/li&gt;
&lt;li&gt;If you do this without the extension the resolve will succeed but the dependencies were most likely resolved in unexpected way (unless you really know what are you doing).&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;This extension allows you to validate the expected behavior.&lt;/li&gt;
&lt;li&gt;Since it may have performance impact (it needs to track all the registrations as well as build operations) it may have negative performance impact.&lt;/li&gt;
&lt;li&gt;This extension is intended to help you ensure expected behavior - but you have to always consider your circumstanes.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;You are using this extension on your own risk :-).&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;references&#34;&gt;References&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.nuget.org/packages/UnityRegistrationValidator&#34;&gt;https://www.nuget.org/packages/UnityRegistrationValidator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/voloda/UnityRegistrationValidator&#34;&gt;https://github.com/voloda/UnityRegistrationValidator&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>DbKeeperNet - How to seed ASP.NET users and roles</title>
      <link>https://voloda.bazilisek.net/2014/11/dbkeepernet-how-to-seed-aspdotnet-users-and-roles/</link>
      <pubDate>Mon, 24 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>https://voloda.bazilisek.net/2014/11/dbkeepernet-how-to-seed-aspdotnet-users-and-roles/</guid>
      <description>

&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;It is a common task that as a part of database setup you need to seed some default user accounts and roles into the database as a part of setup.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.codeproject.com/Articles/42091/DBKeeperNet-Keeps-Your-DB-Schema-Up-to-date&#34;&gt;DbKeeperNet&lt;/a&gt; is an opensource .NET/C# framework which helps you manage database schema for your database performing various types of upgrade steps. DbKeeperNet is designed with support for various database types in mind. Currently it supports most common databases: &lt;em&gt;&lt;strong&gt;MSSQL, SQLite, Firebird, MySQL&lt;/strong&gt;&lt;/em&gt;, Oracle. Since the whole framework is extensible adding support of a new database type is just a simple task.&lt;/p&gt;

&lt;p&gt;It is just matter of few minutes to get it set up in your project and have in-place infrastructure which will ensure proper upgrade path for your database schema on all installations for your application.&lt;/p&gt;

&lt;p&gt;In its recent version &lt;a href=&#34;http://www.codeproject.com/Articles/42091/DBKeeperNet-Keeps-Your-DB-Schema-Up-to-date&#34;&gt;DbKeeperNet&lt;/a&gt;&amp;nbsp;also support seeding of the ASP.NET membership and roles. With respect to overall design - this is supported on any database which implemented its membership providers and makes them available to the .NET infrastructure.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Please keep in mind that any seeded account with pre-seeded password should change the seeded password ASAP.&lt;/strong&gt;&lt;/p&gt;

&lt;h1 id=&#34;sample-task&#34;&gt;Sample task&lt;/h1&gt;

&lt;p&gt;Let&amp;rsquo;s consider the following set of operations you would perform in your database during the time as your application evolves (of course this can be mixed with any other database schema change like adding a table):&lt;/p&gt;

&lt;h2 id=&#34;upgrade-to-version-1-00&#34;&gt;Upgrade to version 1.00&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;If running on MSSQL setup the membership schema&lt;/li&gt;
&lt;li&gt;Create role TestRole1&lt;/li&gt;
&lt;li&gt;Create role TestRole2&lt;/li&gt;
&lt;li&gt;Create user TestUser1 assigned to TestRole1 and TestRole2&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;upgrade-to-version-1-01&#34;&gt;Upgrade to version 1.01&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Create user TestUser2 assigned to TestRole1&lt;/li&gt;
&lt;li&gt;Delete user TestUser1&lt;/li&gt;
&lt;li&gt;Delete TestRole2&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;upgrade-script&#34;&gt;Upgrade script&lt;/h1&gt;

&lt;p&gt;Part of this article is a console application demo project using the script below and referencing DbKeeperNet as a &lt;a href=&#34;https://www.nuget.org/packages/DbKeeperNet/&#34;&gt;Nuget package&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The demo project is created for the MSSQL but it can be easily adopted for any other database just by changing setup in App.Config
    *   The MSSQL specific step here is necessary since the DB schema creation script requires to be executed within a separated transaction and each of the steps needs to be commited

&lt;ul&gt;
&lt;li&gt;For example MySQL providers seed the required schema on its own upon the first usage of membership providers.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;It can be easily adopted and used in a web application - you simply have to plan for its initial execution.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://www.codeproject.com/Articles/42091/DBKeeperNet-Keeps-Your-DB-Schema-Up-to-date&#34;&gt;DbKeeperNet&lt;/a&gt; is using an XML validated against the XSD schema to define a database upgrade. Below you can find an example database upgrade script to achieve above steps (this is comming directly from the example):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#00f&#34;&gt;&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;utf-8&amp;#34;?&amp;gt;&lt;/span&gt;
&amp;lt;upd:Updates xmlns:upd=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;http://code.google.com/p/dbkeepernet/Updates-1.0.xsd&amp;#34;&lt;/span&gt; xmlns:xsi=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34;&lt;/span&gt; AssemblyName=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;DbKeeperNet.SimpleDemo&amp;#34;&lt;/span&gt; xsi:schemaLocation=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;http://code.google.com/p/dbkeepernet/Updates-1.0.xsd ../../DbKeeperNet.Engine/Resources/Updates-1.0.xsd&amp;#34;&lt;/span&gt;&amp;gt;
  &lt;span style=&#34;color:#008000&#34;&gt;&amp;lt;!-- Default way how to check whether to execute update step or not --&amp;gt;&lt;/span&gt;
  &amp;lt;DefaultPreconditions&amp;gt;
    &lt;span style=&#34;color:#008000&#34;&gt;&amp;lt;!-- We will use step information saving strategy --&amp;gt;&lt;/span&gt;
    &amp;lt;Precondition FriendlyName=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;Update step executed&amp;#34;&lt;/span&gt; Precondition=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;StepNotExecuted&amp;#34;&lt;/span&gt;/&amp;gt;
  &amp;lt;/DefaultPreconditions&amp;gt;
  &amp;lt;Update Version=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;1.00&amp;#34;&lt;/span&gt;&amp;gt;
    &lt;span style=&#34;color:#008000&#34;&gt;&amp;lt;!--
&lt;/span&gt;&lt;span style=&#34;color:#008000&#34;&gt;    This update step is needed to properly inject MSSQL membership schema into the database.
&lt;/span&gt;&lt;span style=&#34;color:#008000&#34;&gt;    The challenge here is that the schema setup must be executed in separated transaction.
&lt;/span&gt;&lt;span style=&#34;color:#008000&#34;&gt;    
&lt;/span&gt;&lt;span style=&#34;color:#008000&#34;&gt;    For other membership providers this is usually handled automatically upon the first usage
&lt;/span&gt;&lt;span style=&#34;color:#008000&#34;&gt;    (like for MySql)
&lt;/span&gt;&lt;span style=&#34;color:#008000&#34;&gt;    --&amp;gt;&lt;/span&gt;
    &amp;lt;UpdateStep xsi:type=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;upd:CustomUpdateStepType&amp;#34;&lt;/span&gt; Id=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt; Type=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;DbKeeperNet.Engine.CustomUpdateSteps.MsSqlStepWithoutExplicitTransaction, DbKeeperNet.Engine&amp;#34;&lt;/span&gt;  FriendlyName=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;Setting up database schema for membership and roles&amp;#34;&lt;/span&gt;&amp;gt;
      &amp;lt;Preconditions&amp;gt;
        &amp;lt;Precondition FriendlyName=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;Update step executed&amp;#34;&lt;/span&gt; Precondition=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;StepNotExecuted&amp;#34;&lt;/span&gt;/&amp;gt;
        &amp;lt;Precondition FriendlyName=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;Database is MSSQL&amp;#34;&lt;/span&gt; Precondition=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;DbType&amp;#34;&lt;/span&gt;&amp;gt;
          &amp;lt;Param&amp;gt;MSSQL&amp;lt;/Param&amp;gt;
        &amp;lt;/Precondition&amp;gt;
      &amp;lt;/Preconditions&amp;gt;
      &amp;lt;Param&amp;gt;DbKeeperNet.Extensions.MsSqlMembershipAndRolesSetup&amp;lt;/Param&amp;gt;
      &amp;lt;Param&amp;gt;DbKeeperNet.Extensions.MsSqlMembershipAndRolesSetup.MsSqlMembershipAndRolesSetup.sql&amp;lt;/Param&amp;gt;
    &amp;lt;/UpdateStep&amp;gt;
    &lt;span style=&#34;color:#008000&#34;&gt;&amp;lt;!-- Create some seeded roles --&amp;gt;&lt;/span&gt;
    &amp;lt;UpdateStep xsi:type=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;upd:AspNetRoleCreateUpdateStepType&amp;#34;&lt;/span&gt; FriendlyName=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;Create role TestRole1&amp;#34;&lt;/span&gt; Id=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;2&amp;#34;&lt;/span&gt; RoleName=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;TestRole1&amp;#34;&lt;/span&gt;/&amp;gt;
    &amp;lt;UpdateStep xsi:type=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;upd:AspNetRoleCreateUpdateStepType&amp;#34;&lt;/span&gt; Id=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;3&amp;#34;&lt;/span&gt; RoleName=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;TestRole2&amp;#34;&lt;/span&gt;/&amp;gt;
    &lt;span style=&#34;color:#008000&#34;&gt;&amp;lt;!-- Seed an account and associate it with roles --&amp;gt;&lt;/span&gt;
    &amp;lt;UpdateStep xsi:type=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;upd:AspNetAccountCreateUpdateStepType&amp;#34;&lt;/span&gt; Id=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;4&amp;#34;&lt;/span&gt; UserName=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;TestUser1&amp;#34;&lt;/span&gt; Mail=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;testuser1@domain.com&amp;#34;&lt;/span&gt; Password=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;SeededPassword&amp;#34;&lt;/span&gt;&amp;gt;
      &amp;lt;Role&amp;gt;TestRole1&amp;lt;/Role&amp;gt;
      &amp;lt;Role&amp;gt;TestRole2&amp;lt;/Role&amp;gt;
    &amp;lt;/UpdateStep&amp;gt;
  &amp;lt;/Update&amp;gt;
  &amp;lt;Update Version=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;1.01&amp;#34;&lt;/span&gt;&amp;gt;
    &amp;lt;UpdateStep xsi:type=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;upd:AspNetAccountCreateUpdateStepType&amp;#34;&lt;/span&gt; Id=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;1&amp;#34;&lt;/span&gt; UserName=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;TestUser2&amp;#34;&lt;/span&gt; Mail=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;testuser2@domain.com&amp;#34;&lt;/span&gt; Password=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;SeededPassword2&amp;#34;&lt;/span&gt;&amp;gt;
      &amp;lt;Role&amp;gt;TestRole1&amp;lt;/Role&amp;gt;
    &amp;lt;/UpdateStep&amp;gt;
    &lt;span style=&#34;color:#008000&#34;&gt;&amp;lt;!-- Delete the seeded role --&amp;gt;&lt;/span&gt;
    &amp;lt;UpdateStep xsi:type=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;upd:AspNetRoleDeleteUpdateStepType&amp;#34;&lt;/span&gt; Id=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;2&amp;#34;&lt;/span&gt; RoleName=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;TestRole2&amp;#34;&lt;/span&gt;/&amp;gt;
    &lt;span style=&#34;color:#008000&#34;&gt;&amp;lt;!-- Delete one of the seeded accounts --&amp;gt;&lt;/span&gt;
    &amp;lt;UpdateStep xsi:type=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;upd:AspNetAccountDeleteUpdateStepType&amp;#34;&lt;/span&gt; Id=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;3&amp;#34;&lt;/span&gt; UserName=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;TestUser1&amp;#34;&lt;/span&gt;/&amp;gt;
  &amp;lt;/Update&amp;gt;
&amp;lt;/upd:Updates&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now let&amp;rsquo;s setup the C# portion which executes the script:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#2b91af&#34;&gt;string&lt;/span&gt; connString = &lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt;; &lt;span style=&#34;color:#008000&#34;&gt;// MsSql connection   
&lt;/span&gt;&lt;span style=&#34;color:#008000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;using&lt;/span&gt; (UpdateContext context = &lt;span style=&#34;color:#00f&#34;&gt;new&lt;/span&gt; UpdateContext())
{
    context.LoadExtensions();
    context.InitializeDatabaseService(connString);

    Updater updater = &lt;span style=&#34;color:#00f&#34;&gt;new&lt;/span&gt; Updater(context);
    updater.ExecuteXmlFromConfig();
}
Console.WriteLine(&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;Can login as TestUser2: &amp;#34;&lt;/span&gt; + Membership.Provider.ValidateUser(&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;Testuser2&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;SeededPassword2&amp;#34;&lt;/span&gt;));
Console.WriteLine(&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;Can login as TestUser2: &amp;#34;&lt;/span&gt; + Membership.Provider.ValidateUser(&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;testuser2&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;InvalidPassword&amp;#34;&lt;/span&gt;));
Console.WriteLine(&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;Is user testuser2 in role testrole1: &amp;#34;&lt;/span&gt; + Roles.Provider.IsUserInRole(&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;testuser2&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;testrole1&amp;#34;&lt;/span&gt;));
Console.WriteLine(&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;Is user testuser2 in role testrole2: &amp;#34;&lt;/span&gt; + Roles.Provider.IsUserInRole(&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;testuser2&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;testrole2&amp;#34;&lt;/span&gt;));
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And appropriate App.Config portion:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#00f&#34;&gt;&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;utf-8&amp;#34;?&amp;gt;&lt;/span&gt;
&amp;lt;configuration&amp;gt;
  &amp;lt;configSections&amp;gt;
    &amp;lt;section name=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;dbkeeper.net&amp;#34;&lt;/span&gt; type=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;DbKeeperNet.Engine.DbKeeperNetConfigurationSection,DbKeeperNet.Engine&amp;#34;&lt;/span&gt;/&amp;gt;
  &amp;lt;/configSections&amp;gt;
  &amp;lt;dbkeeper.net loggingService=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;fx&amp;#34;&lt;/span&gt;&amp;gt;
    &amp;lt;updateScripts&amp;gt;
&lt;span style=&#34;color:#008000&#34;&gt;&amp;lt;!-- This is the location of the DB Upgrade script - we use an embedded resource --&amp;gt;&lt;/span&gt;
      &amp;lt;add provider=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;asm&amp;#34;&lt;/span&gt; location=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;DbKeeperNet.AspNetMembershipDemo.DatabaseSetup.xml,DbKeeperNet.AspNetMembershipDemo&amp;#34;&lt;/span&gt; /&amp;gt;
    &amp;lt;/updateScripts&amp;gt;
    &amp;lt;databaseServiceMappings&amp;gt;
      &amp;lt;add connectString=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt; databaseService=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;MsSql&amp;#34;&lt;/span&gt; /&amp;gt;
    &amp;lt;/databaseServiceMappings&amp;gt;
  &amp;lt;/dbkeeper.net&amp;gt;
  &amp;lt;connectionStrings&amp;gt;
    &lt;span style=&#34;color:#008000&#34;&gt;&amp;lt;!-- Change this to correct absolute path for the demo or to an actual database --&amp;gt;&lt;/span&gt;
    &amp;lt;add name=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt; connectionString=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;Data Source=.\SQLEXPRESS;AttachDbFilename=&amp;#39;C:\Users\voloda\MyRoot\Development\GIT\DbKeeperNet\DbKeeperNet\Demos\DbKeeperNet.AspNetMembershipDemo\bin\Debug\DbKeeperNetAspNetMembershipDemo.mdf&amp;#39;;Integrated Security=True;Connect Timeout=30;User Instance=True;Initial catalog=DbKeeperNetAspNetMembershipDemo&amp;#34;&lt;/span&gt; providerName=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;System.Data.SqlClient&amp;#34;&lt;/span&gt;/&amp;gt;
  &amp;lt;/connectionStrings&amp;gt;
&lt;span style=&#34;color:#008000&#34;&gt;&amp;lt;!-- Let&amp;#39;s enable MSSQL membership providers --&amp;gt;&lt;/span&gt;
  &amp;lt;system.web&amp;gt;
    &amp;lt;membership defaultProvider=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;AspNetSqlMembershipProvider&amp;#34;&lt;/span&gt;&amp;gt;
      &amp;lt;providers&amp;gt;
        &amp;lt;clear/&amp;gt;
        &amp;lt;add name=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;AspNetSqlMembershipProvider&amp;#34;&lt;/span&gt; type=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;System.Web.Security.SqlMembershipProvider, System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a&amp;#34;&lt;/span&gt; connectionStringName=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt; enablePasswordRetrieval=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;false&amp;#34;&lt;/span&gt; enablePasswordReset=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt; requiresQuestionAndAnswer=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;false&amp;#34;&lt;/span&gt; requiresUniqueEmail=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;false&amp;#34;&lt;/span&gt; passwordFormat=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;Hashed&amp;#34;&lt;/span&gt; maxInvalidPasswordAttempts=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;5&amp;#34;&lt;/span&gt; minRequiredPasswordLength=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;6&amp;#34;&lt;/span&gt; minRequiredNonalphanumericCharacters=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;0&amp;#34;&lt;/span&gt; passwordAttemptWindow=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;10&amp;#34;&lt;/span&gt; passwordStrengthRegularExpression=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt; applicationName=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt;/&amp;gt;
      &amp;lt;/providers&amp;gt;
    &amp;lt;/membership&amp;gt;
    &amp;lt;roleManager enabled=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt; defaultProvider=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;AspNetSqlRoleProvider&amp;#34;&lt;/span&gt;&amp;gt;
      &amp;lt;providers&amp;gt;
        &amp;lt;clear/&amp;gt;
        &amp;lt;add connectionStringName=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt; applicationName=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;/&amp;#34;&lt;/span&gt; name=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;AspNetSqlRoleProvider&amp;#34;&lt;/span&gt; type=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;System.Web.Security.SqlRoleProvider, System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a&amp;#34;&lt;/span&gt;/&amp;gt;
      &amp;lt;/providers&amp;gt;
    &amp;lt;/roleManager&amp;gt;
    &amp;lt;profile enabled=&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;false&amp;#34;&lt;/span&gt;&amp;gt;
      &amp;lt;providers&amp;gt;
        &amp;lt;clear/&amp;gt;
      &amp;lt;/providers&amp;gt;
    &amp;lt;/profile&amp;gt;
  &amp;lt;/system.web&amp;gt;
&amp;lt;/configuration&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&#34;references&#34;&gt;References&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://drive.google.com/file/d/0B27zqy23aL3BblVFNGJPdF9XVXM/view?usp=sharing&#34;&gt;Demo project download&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://github.com/DbKeeperNet/DbKeeperNet&#34;&gt;DbKeeperNet&lt;/a&gt; project (contains also some demo projects)&lt;/li&gt;
&lt;li&gt;DbKeeperNet &lt;a href=&#34;http://www.codeproject.com/Articles/42091/DBKeeperNet-Keeps-Your-DB-Schema-Up-to-date&#34;&gt;article&lt;/a&gt; on Codeproject&lt;/li&gt;
&lt;li&gt;Nuget packages

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.nuget.org/packages/DbKeeperNet/&#34;&gt;https://www.nuget.org/packages/DbKeeperNet/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.nuget.org/packages/DbKeeperNet.Extensions.MsSqlMembershipAndRolesSetup/&#34;&gt;https://www.nuget.org/packages/DbKeeperNet.Extensions.MsSqlMembershipAndRolesSetup/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;history&#34;&gt;History&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Initial version&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
