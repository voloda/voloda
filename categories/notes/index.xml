<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Notes on My personal notes on various topics</title>
    <link>http://voloda.bazilisek.net/categories/notes/</link>
    <description>Recent content in Notes on My personal notes on various topics</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 23 Nov 2017 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="http://voloda.bazilisek.net/categories/notes/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Handling detailed code reviews in GIT</title>
      <link>http://voloda.bazilisek.net/2017/11/handling-detailed-code-reviews-in-git/</link>
      <pubDate>Thu, 23 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>http://voloda.bazilisek.net/2017/11/handling-detailed-code-reviews-in-git/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;Pull Requests are sometimes not sufficient - they allow to see changes,
perhaps you can even see that a test build passed but these do not allow
for actual functional testing or even navigating thru the code.&lt;/li&gt;
&lt;li&gt;Some times it is convenient to see all the changes in staging area
(similar to TFS unshelve functionality) so functional test can be done
and code can be reviewed more deeply.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Below steps allow to achieve the same state as for TFS unshelve - you end-up
with code checked out and staged in GIT:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Fetch remote changes

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git fetch origin&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Checkout target branch

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git checkout TargetBranchName&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Do dry merge (without commit)

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git merge --no-commit --no-ff origin/ReviewedBranchName&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now you can do the detailed code review, put comments into PR, do testing,
navigate thru references usign Resharper in Visual Studio etc.&lt;/p&gt;

&lt;p&gt;Once done just abort the merge:
  * &lt;code&gt;git merge --abort&lt;/code&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Jenkins Docker Slave Windows Build Agent</title>
      <link>http://voloda.bazilisek.net/2017/11/jenkins-docker-slave-windows-build-agent/</link>
      <pubDate>Sun, 19 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>http://voloda.bazilisek.net/2017/11/jenkins-docker-slave-windows-build-agent/</guid>
      <description>

&lt;p&gt;I spent quite some time on getting this working on Windows with Windows Docker
slaves.&lt;/p&gt;

&lt;p&gt;In the end it turned out to be mostly matter of using correct Jenkins docker
plugin.&lt;/p&gt;

&lt;h1 id=&#34;jenkins-docker-slave&#34;&gt;Jenkins docker slave&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Use &lt;code&gt;Yet Another Docker Plugin&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;With this plugin it just works (Docker Plugin doesn&amp;rsquo;t work)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Install JAVA into docker image and make it available on PATH&lt;/li&gt;
&lt;li&gt;In Configuration add &lt;code&gt;Yet Another Docker Plugin&lt;/code&gt; as a &lt;code&gt;Cloud&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;Point it to &lt;code&gt;Docker server&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Test that it is available&lt;/li&gt;
&lt;li&gt;Add the docker image&lt;/li&gt;
&lt;li&gt;Add label which can be references from builds&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Jenkins now automatically creates a docker container as a build is executed

&lt;ul&gt;
&lt;li&gt;It does not require any additional changes&lt;/li&gt;
&lt;li&gt;It properly handles the operating system (Windows)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;For local only images make sure that the &lt;code&gt;Pull&lt;/code&gt; option is set to &lt;code&gt;Never&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;base-dockerfile&#34;&gt;Base Dockerfile&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;This &lt;code&gt;Dockerfile&lt;/code&gt; creates the base image for Windows build agent&lt;/li&gt;
&lt;li&gt;The only requirements is that &lt;code&gt;java.exe&lt;/code&gt; must be accessible in path.

&lt;ul&gt;
&lt;li&gt;It could be perhaps even installed using &lt;code&gt;Chocolatey&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;FROM microsoft/windowsservercore

SHELL [&amp;quot;powershell.exe&amp;quot;, &amp;quot;-ExecutionPolicy&amp;quot;, &amp;quot;Bypass&amp;quot;, &amp;quot;-Command&amp;quot;]

RUN iex ((New-Object System.Net.WebClient).DownloadString(&#39;https://chocolatey.org/install.ps1&#39;))
RUN choco install -y git --params=&#39;/NoShellIntegration&#39;
RUN choco install -y nuget.commandline

ENV JAVA_HOME c:\\jre1.8.0_91
ENV JENKINS_HOME c:\\jenkins

RUN (new-object System.Net.WebClient).Downloadfile(&#39;http://javadl.oracle.com/webapps/download/AutoDL?BundleId=210185&#39;, &#39;C:\jre-8u91-windows-x64.exe&#39;)
RUN start-process -filepath C:\\jre-8u91-windows-x64.exe -passthru -wait -argumentlist &amp;quot;/s,INSTALLDIR=$env:JAVA_HOME,/L,install64.log&amp;quot;
RUN del C:\jre-8u91-windows-x64.exe

RUN $env:PATH = $env:JAVA_HOME + &#39;\\bin;&#39; + $env:PATH; \
    [Environment]::SetEnvironmentVariable(&#39;PATH&#39;, $env:PATH, [EnvironmentVariableTarget]::Machine);

RUN mkdir $env:JENKINS_HOME
WORKDIR $JENKINS_HOME

ENTRYPOINT [&amp;quot;cmd.exe&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;visual-studio-2017-dockerfile&#34;&gt;Visual Studio 2017 Dockerfile&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;This &lt;code&gt;Dockerfile&lt;/code&gt; uses the above as the base image and installs VS 2017

&lt;ul&gt;
&lt;li&gt;It add SDK for .NET 4.5.2 and 4.6.1&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;FROM vkloz/winjava

SHELL [&amp;quot;powershell.exe&amp;quot;, &amp;quot;-ExecutionPolicy&amp;quot;, &amp;quot;Bypass&amp;quot;, &amp;quot;-Command&amp;quot;]

ENV TEST_CONTAINER=1 \
    VS_CHANNEL_URI=https://aka.ms/vs/15/release/799c44140/channel \
    VS_BUILDTOOLS_URI=https://aka.ms/vs/15/release/799c44140/vs_buildtools.exe \
    VS_BUILDTOOLS_SHA256=FA29EB83297AECADB0C4CD41E54512C953164E64EEDD9FB9D3BF9BD70C9A2D29

# Download log collection utility
RUN $ErrorActionPreference = &#39;Stop&#39;; \
    $ProgressPreference = &#39;SilentlyContinue&#39;; \
    $VerbosePreference = &#39;Continue&#39;; \
    Invoke-WebRequest -Uri https://aka.ms/vscollect.exe -OutFile C:\collect.exe

# Download vs_buildtools.exe
RUN $ErrorActionPreference = &#39;Stop&#39;; \
    $ProgressPreference = &#39;SilentlyContinue&#39;; \
    $VerbosePreference = &#39;Continue&#39;; \
    Invoke-WebRequest -Uri $env:VS_BUILDTOOLS_URI -OutFile C:\vs_buildtools.exe; \
    if ((Get-FileHash -Path C:\vs_buildtools.exe -Algorithm SHA256).Hash -ne $env:VS_BUILDTOOLS_SHA256) { throw &#39;Download hash does not match&#39; }

# https://docs.microsoft.com/en-us/visualstudio/install/workload-component-id-vs-build-tools
# Install Visual Studio Build Tools
RUN $ErrorActionPreference = &#39;Stop&#39;; \
    $VerbosePreference = &#39;Continue&#39;; \
    $p = Start-Process -Wait -PassThru -FilePath C:\vs_buildtools.exe -ArgumentList &#39;--quiet --nocache --wait --installPath C:\BuildTools&#39;; \
    if ($ret = $p.ExitCode) { c:\collect.exe; throw (&#39;Install failed with exit code 0x{0:x}&#39; -f $ret) }

RUN $ErrorActionPreference = &#39;Stop&#39;; \
    $VerbosePreference = &#39;Continue&#39;; \
    $p = Start-Process -Wait -PassThru -FilePath C:\vs_buildtools.exe -ArgumentList &#39;modify --quiet --nocache --wait --installPath C:\BuildTools --add Microsoft.VisualStudio.Workload.MSBuildTools&#39;; \
    if ($ret = $p.ExitCode) { c:\collect.exe; throw (&#39;Install failed with exit code 0x{0:x}&#39; -f $ret) }

RUN $ErrorActionPreference = &#39;Stop&#39;; \
    $VerbosePreference = &#39;Continue&#39;; \
    $p = Start-Process -Wait -PassThru -FilePath C:\vs_buildtools.exe -ArgumentList &#39;modify --quiet --nocache --wait --installPath C:\BuildTools --add Microsoft.VisualStudio.Component.Static.Analysis.Tools&#39;; \
    if ($ret = $p.ExitCode) { c:\collect.exe; throw (&#39;Install failed with exit code 0x{0:x}&#39; -f $ret) }

RUN choco install -y netfx-4.5.2-devpack
RUN choco install -y netfx-4.6.1-devpack


# Use shell form to start developer command prompt and any other commands specified
SHELL [&amp;quot;cmd.exe&amp;quot;, &amp;quot;/s&amp;quot;, &amp;quot;/c&amp;quot;]
ENTRYPOINT C:\BuildTools\Common7\Tools\VsDevCmd.bat &amp;amp;&amp;amp;

# Default to PowerShell console running within developer command prompt environment
CMD [&amp;quot;powershell.exe&amp;quot;, &amp;quot;-nologo&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Jenkins Server Setup On Windows</title>
      <link>http://voloda.bazilisek.net/2017/10/jenkins-server-setup-on-windows/</link>
      <pubDate>Tue, 17 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>http://voloda.bazilisek.net/2017/10/jenkins-server-setup-on-windows/</guid>
      <description>

&lt;h1 id=&#34;operating-system-preparation&#34;&gt;Operating system preparation&lt;/h1&gt;

&lt;p&gt;These notes assume since beginning separation of the &lt;strong&gt;Jenkins server&lt;/strong&gt; and
individual build agents so on the server will not be any build utilities
except &lt;strong&gt;git&lt;/strong&gt; which is necessary for repository polling.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Install &lt;strong&gt;Chocolatey&lt;/strong&gt; (see instructions on web).&lt;/li&gt;
&lt;li&gt;Install &lt;strong&gt;Google Chrome&lt;/strong&gt; (using Chocolatey is actually much easier than trying
to download it from web).

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;choco install -y googlechrome&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Install &lt;strong&gt;git&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;choco install -y git /NoShellIntegration&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;jenkins-server-setup&#34;&gt;Jenkins Server Setup&lt;/h1&gt;

&lt;p&gt;This is fairly simple:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;See &lt;a href=&#34;http://jenkinks.io/download&#34;&gt;http://jenkinks.io/download&lt;/a&gt; to get installation package.&lt;/li&gt;
&lt;li&gt;Open &lt;a href=&#34;http://localhost:8080/&#34;&gt;http://localhost:8080/&lt;/a&gt; in Chrome and follow instructions.&lt;/li&gt;
&lt;li&gt;Setup firewall rules to make the server accessible as needed.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;useful-plugins&#34;&gt;Useful plugins&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Yet Another Docker plugins

&lt;ul&gt;
&lt;li&gt;Automatic spawning of docker build agents based on label&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;NUnit plugin

&lt;ul&gt;
&lt;li&gt;Parsing of NUnit results&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Blue Ocean plugin

&lt;ul&gt;
&lt;li&gt;Newer Jenkins UI for build pipelines&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;MSBuild Plugin

&lt;ul&gt;
&lt;li&gt;Allows to configure MSBuild as a tool and reference it from scripts&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Role-based authorization strategy

&lt;ul&gt;
&lt;li&gt;Allows role based access Configuration&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;windows-slave-setup&#34;&gt;Windows Slave Setup&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Install Chocolatey (see instructions on web)&lt;/li&gt;
&lt;li&gt;Install Google Chrome

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;choco install -y googlechrome&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Install Java

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;choco install -y javaruntime&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Install git

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;choco install -y git /NoShellIntegration&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;VS2017 build Tools

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;choco install -y visualstudio2017buildtools&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Install Nuget

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;choco install -y nuget.commandline&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Installing packages after the service start may require service restart&lt;/li&gt;
&lt;li&gt;Login to &lt;strong&gt;Jenkins master&lt;/strong&gt; via Chrome&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Configure Global Security&lt;/code&gt; and setup &lt;code&gt;TCP port for JNLP agents&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Add new Node&lt;/li&gt;
&lt;li&gt;Download the java file and run it

&lt;ul&gt;
&lt;li&gt;In menu it allows to &lt;code&gt;Install Windows Service&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;This may need to change the Jenkins server URL in settings&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Setup labels to distribute load across nodes conditionally&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;links&#34;&gt;Links&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://chocolatey.org&#34;&gt;Chocolatey&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Chocolatey setup on DEV machine &#43; useful packages</title>
      <link>http://voloda.bazilisek.net/setup-on-dev-machine-and-useful-packages/</link>
      <pubDate>Wed, 04 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>http://voloda.bazilisek.net/setup-on-dev-machine-and-useful-packages/</guid>
      <description>

&lt;h2 id=&#34;upgrade-all-packages&#34;&gt;Upgrade all packages&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;choco outdated&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;List available upgrades&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cup all -y&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;list-local-packages&#34;&gt;List local Packages&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;chocolatey list -localonly&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;packages&#34;&gt;Packages&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;choco install -y git --params=&#39;/NoShellIntegration&#39;
choco install -y poshgit
choco install -y gittfs
choco install -y far
choco install -y atom
choco install -y chefdk
choco install -y winmerge
choco install -y googlechrome
choco install -y postman
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>
