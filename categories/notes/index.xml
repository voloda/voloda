<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Notes on My personal notes on various topics</title>
    <link>http://voloda.bazilisek.net/categories/notes/</link>
    <description>Recent content in Notes on My personal notes on various topics</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 30 Apr 2018 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="http://voloda.bazilisek.net/categories/notes/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Angular5 Materialized Design And Karma Unit Tests Cheat Sheet</title>
      <link>http://voloda.bazilisek.net/2018/04/angular5-materialized-design-and-karma-unit-tests-cheat-sheet/</link>
      <pubDate>Mon, 30 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>http://voloda.bazilisek.net/2018/04/angular5-materialized-design-and-karma-unit-tests-cheat-sheet/</guid>
      <description>

&lt;h1 id=&#34;running-tests&#34;&gt;Running tests&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Run command from Angular5 project folder: &lt;code&gt;ng test&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;create-an-injectable-service-with-an-interface&#34;&gt;Create an injectable service with an interface&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;This allows to define a typescript interface implemented by a class&lt;/li&gt;
&lt;li&gt;For injection is actually used the &lt;code&gt;AUTHENTICATION_SERVICE&lt;/code&gt; token&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-typescript&#34; data-lang=&#34;typescript&#34;&gt;&lt;span style=&#34;color:#00f&#34;&gt;import&lt;/span&gt; { Injectable, InjectionToken } from &lt;span style=&#34;color:#a31515&#34;&gt;&amp;#39;@angular/core&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#00f&#34;&gt;import&lt;/span&gt; { HttpClient, HttpHeaders } from &lt;span style=&#34;color:#a31515&#34;&gt;&amp;#39;@angular/common/http&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#00f&#34;&gt;import&lt;/span&gt; { Observable } from &lt;span style=&#34;color:#a31515&#34;&gt;&amp;#39;rxjs/Observable&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#00f&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#a31515&#34;&gt;&amp;#39;rxjs/add/operator/map&amp;#39;&lt;/span&gt;;

&lt;span style=&#34;color:#00f&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;interface&lt;/span&gt; IAuthenticationService {
    login(username: &lt;span style=&#34;color:#2b91af&#34;&gt;string&lt;/span&gt;, password: &lt;span style=&#34;color:#2b91af&#34;&gt;string&lt;/span&gt;): Observable&amp;lt;any&amp;gt;;
    extendToken(): Observable&amp;lt;any&amp;gt;;
    logout();
    isLoggedIn(): &lt;span style=&#34;color:#00f&#34;&gt;boolean&lt;/span&gt;;
    hasRole(role: &lt;span style=&#34;color:#2b91af&#34;&gt;string&lt;/span&gt;): &lt;span style=&#34;color:#00f&#34;&gt;boolean&lt;/span&gt;;
}

&lt;span style=&#34;color:#00f&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;const&lt;/span&gt; AUTHENTICATION_SERVICE = &lt;span style=&#34;color:#00f&#34;&gt;new&lt;/span&gt; InjectionToken&amp;lt;IAuthenticationService&amp;gt;(&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#39;AUTHENTICATION_SERVICE&amp;#39;&lt;/span&gt;);

&lt;span style=&#34;color:#00f&#34;&gt;@Injectable&lt;/span&gt;()
&lt;span style=&#34;color:#00f&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;class&lt;/span&gt; AuthenticationService &lt;span style=&#34;color:#00f&#34;&gt;implements&lt;/span&gt; IAuthenticationService {
    &lt;span style=&#34;color:#00f&#34;&gt;constructor&lt;/span&gt;(&lt;span style=&#34;color:#00f&#34;&gt;private&lt;/span&gt; http: &lt;span style=&#34;color:#2b91af&#34;&gt;HttpClient&lt;/span&gt;) { }

    &lt;span style=&#34;color:#008000&#34;&gt;// returns actually the token
&lt;/span&gt;&lt;span style=&#34;color:#008000&#34;&gt;&lt;/span&gt;    login(username: &lt;span style=&#34;color:#2b91af&#34;&gt;string&lt;/span&gt;, password: &lt;span style=&#34;color:#2b91af&#34;&gt;string&lt;/span&gt;): Observable&amp;lt;any&amp;gt; {
        &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;this&lt;/span&gt;.http.post&amp;lt;any&amp;gt;(&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#39;api/sign-in&amp;#39;&lt;/span&gt;, { username: &lt;span style=&#34;color:#2b91af&#34;&gt;username&lt;/span&gt;, password: &lt;span style=&#34;color:#2b91af&#34;&gt;password&lt;/span&gt; })
            .map(token =&amp;gt; {
                &lt;span style=&#34;color:#00f&#34;&gt;this&lt;/span&gt;.updateToken(token);
                &lt;span style=&#34;color:#00f&#34;&gt;return&lt;/span&gt; token;
            });
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Injecting the dependency utilizing interface &lt;code&gt;IAuthenticationService&lt;/code&gt; and injection token &lt;code&gt;AUTHENTICATION_SERVICE&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-typescript&#34; data-lang=&#34;typescript&#34;&gt;&lt;span style=&#34;color:#00f&#34;&gt;constructor&lt;/span&gt;(
    &lt;span style=&#34;color:#00f&#34;&gt;@Inject&lt;/span&gt;(AUTHENTICATION_SERVICE) &lt;span style=&#34;color:#00f&#34;&gt;private&lt;/span&gt; authenticationService: &lt;span style=&#34;color:#2b91af&#34;&gt;IAuthenticationService&lt;/span&gt;) { }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&#34;creating-a-spy-object-mock&#34;&gt;Creating a spy object/mock&lt;/h1&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-typescript&#34; data-lang=&#34;typescript&#34;&gt;...

describe(&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#39;AppComponent&amp;#39;&lt;/span&gt;, () =&amp;gt; {
  &lt;span style=&#34;color:#00f&#34;&gt;let&lt;/span&gt; serviceSpy: &lt;span style=&#34;color:#2b91af&#34;&gt;jasmine.SpyObj&lt;/span&gt;&amp;lt;IMyService&amp;gt;;

  beforeEach(async(() =&amp;gt; {
    TestBed.configureTestingModule({
      declarations: [
        AppComponent
      ],
      providers: [
        {
          provide: &lt;span style=&#34;color:#2b91af&#34;&gt;MY_SERVICE&lt;/span&gt;,
          useValue: &lt;span style=&#34;color:#2b91af&#34;&gt;jasmine.createSpyObj&lt;/span&gt;(&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#39;IMyService&amp;#39;&lt;/span&gt;, [&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#39;isLoggedIn&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#a31515&#34;&gt;&amp;#39;hasRole&amp;#39;&lt;/span&gt;])
        }
      ],
      imports: [HttpClientTestingModule]
    }).compileComponents();
  }));

  beforeEach(() =&amp;gt; {
    serviceSpy = TestBed.get(MY_SERVICE);
    &lt;span style=&#34;color:#008000&#34;&gt;// preconfigure expected return value
&lt;/span&gt;&lt;span style=&#34;color:#008000&#34;&gt;&lt;/span&gt;    serviceSpy.hasRole = jasmine.createSpy().and.returnValue(&lt;span style=&#34;color:#00f&#34;&gt;false&lt;/span&gt;);
  });

...&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&#34;validating-passed-parameters-on-spy-mock&#34;&gt;Validating passed parameters on spy/mock&lt;/h1&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-typescript&#34; data-lang=&#34;typescript&#34;&gt;expect(serviceSpy.hasRole).toHaveBeenCalledWith(&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#39;admin&amp;#39;&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&#34;setting-returned-value-from-a-spy-mock-method&#34;&gt;Setting returned value from a spy/mock method&lt;/h1&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-typescript&#34; data-lang=&#34;typescript&#34;&gt;serviceSpy.hasRole = jasmine.createSpy().and.returnValue(&lt;span style=&#34;color:#00f&#34;&gt;false&lt;/span&gt;);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&#34;mocking-router-related-stuff&#34;&gt;Mocking router related stuff&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Needs to include module &lt;code&gt;RouterTestingModule&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;mocking-activatedroute-and-router&#34;&gt;Mocking ActivatedRoute and Router&lt;/h1&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-typescript&#34; data-lang=&#34;typescript&#34;&gt;&lt;span style=&#34;color:#00f&#34;&gt;import&lt;/span&gt; { ActivatedRoute, Router, convertToParamMap } from &lt;span style=&#34;color:#a31515&#34;&gt;&amp;#39;@angular/router&amp;#39;&lt;/span&gt;;
&lt;span style=&#34;color:#00f&#34;&gt;import&lt;/span&gt; { RouterTestingModule } from &lt;span style=&#34;color:#a31515&#34;&gt;&amp;#39;@angular/router/testing&amp;#39;&lt;/span&gt;;

...

  beforeEach(async(() =&amp;gt; {
    TestBed.configureTestingModule({
      declarations: [ LicenseEventLogComponent ],
      providers: [
        {
          provide: &lt;span style=&#34;color:#2b91af&#34;&gt;ActivatedRoute&lt;/span&gt;,
          useValue: {
            snapshot: {
              paramMap: &lt;span style=&#34;color:#2b91af&#34;&gt;convertToParamMap&lt;/span&gt;({ id: &lt;span style=&#34;color:#a31515&#34;&gt;&amp;#39;123&amp;#39;&lt;/span&gt; })
            }
          }
        },
        {
          provide: &lt;span style=&#34;color:#2b91af&#34;&gt;Router&lt;/span&gt;,
          useValue: &lt;span style=&#34;color:#2b91af&#34;&gt;jasmine.createSpyObj&lt;/span&gt;(&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#39;Router&amp;#39;&lt;/span&gt;, [&lt;span style=&#34;color:#a31515&#34;&gt;&amp;#39;navigate&amp;#39;&lt;/span&gt;])
        },

...&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Angular5 and ASP.NET Core 2.0 cheat sheet</title>
      <link>http://voloda.bazilisek.net/2018/03/angular5-and-aspnet-core-20-cheat-sheet/</link>
      <pubDate>Mon, 26 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>http://voloda.bazilisek.net/2018/03/angular5-and-aspnet-core-20-cheat-sheet/</guid>
      <description>

&lt;p&gt;Couple of notes on setting up a project on Angular5 utilizing .NET Core 2.0
WebAPI.&lt;/p&gt;

&lt;h1 id=&#34;code-organization&#34;&gt;Code organization&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;ProjectRootFolder
|
+.git
|
+-AngularProjectFolder
|
+-dotNetCoreProjectFolder
  |
  +-wwwroot
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;project-setup&#34;&gt;Project setup&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Create project root folder with git repository:

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;mkdir ProjectRootFolder&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cd ProjectRootFolder&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git init&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Create dotNet Core API application

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dotnet new webapi -n ProjectWebApi&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Create Angular 5 application

&lt;ul&gt;
&lt;li&gt;Assumes Angular5 CLI is available already (see &lt;a href=&#34;https://angular.io/guide/quickstart&#34;&gt;https://angular.io/guide/quickstart&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ng new project-web-ui&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Customize build output path in &lt;code&gt;.angular-cli.json&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Set &lt;code&gt;outDir&lt;/code&gt; to &lt;code&gt;../ProjectWebApi/WWWRoot/&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;angular-5-cli-commands&#34;&gt;Angular 5 CLI commands&lt;/h1&gt;

&lt;h2 id=&#34;running-angular5-and-net-core-2-0-backend-service-localy-during-development&#34;&gt;Running Angular5 and .NET Core 2.0 backend service localy during development&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;First create &lt;code&gt;proxy.config.json&lt;/code&gt; file in the root of web site source code.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;{
  &lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;/api&amp;#34;&lt;/span&gt;: {
      &lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;target&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;http://localhost:56785&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;secure&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#00f&#34;&gt;false&lt;/span&gt;
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Update &lt;code&gt;/api&lt;/code&gt; to a virtual folder which should be proxified&lt;/li&gt;
&lt;li&gt;Update &lt;code&gt;target&lt;/code&gt; to point to API&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Run &lt;code&gt;ng serve --proxy-config proxy.config.json&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;running-karma-tests&#34;&gt;Running KARMA tests&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ng test&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;When testing components it may require &lt;code&gt;ng test --sourcemaps=false&lt;/code&gt; to avoid issues&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;building-angular5-website-which-will-be-deployed-to-a-virtual-folder&#34;&gt;Building Angular5 website which will be deployed to a virtual folder&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ng build --base-href &amp;quot;/alx/&amp;quot;&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;alx&lt;/code&gt; is the virtual folder on the server (updates &lt;code&gt;&amp;lt;base href/&amp;gt;&lt;/code&gt; tag
inside the &lt;code&gt;index.html&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;deployment&#34;&gt;Deployment&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;IIS requires dotNet core support installed

&lt;ul&gt;
&lt;li&gt;See &lt;a href=&#34;https://docs.microsoft.com/en-us/aspnet/core/host-and-deploy/iis/?tabs=aspnetcore2x&#34;&gt;https://docs.microsoft.com/en-us/aspnet/core/host-and-deploy/iis/?tabs=aspnetcore2x&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Pay special attention to &lt;strong&gt;.NET Core Windows Server Hosting bundle&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Other than that create appropriate Application Pool as described and deploy
the application.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Biggest challenge so far is that the WebAPI process is running all the time
and cannot be easily upgraded.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>How to create Docker build agent image with SDK installed from MSI</title>
      <link>http://voloda.bazilisek.net/2017/12/how-to-create-docker-build-agent-image-with-sdk-installed-from-msi/</link>
      <pubDate>Wed, 20 Dec 2017 00:00:00 +0000</pubDate>
      
      <guid>http://voloda.bazilisek.net/2017/12/how-to-create-docker-build-agent-image-with-sdk-installed-from-msi/</guid>
      <description>

&lt;p&gt;When creating build agent docker image usually you need to install SDKs
from MSI (like Infragistic, DevExpress, Active Reports etc.).&lt;/p&gt;

&lt;p&gt;There are couple of challenges here:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Windows Docker doesn&amp;rsquo;t support UI.&lt;/li&gt;
&lt;li&gt;Also very often you have to populate UI with values.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For this purpose MSI supports so called unattended installs.&lt;/p&gt;

&lt;p&gt;For input values you can pass those as parameters to MSI on command line.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s assume that we want to install SDK like Infragistic.&lt;/p&gt;

&lt;h1 id=&#34;how-to-find-out-msi-command-line&#34;&gt;How to find out MSI command line&lt;/h1&gt;

&lt;h2 id=&#34;use-msi-logging&#34;&gt;Use MSI logging&lt;/h2&gt;

&lt;p&gt;First run the SDK MSI from command line on a sandbox PC so it produced
installation log:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;msiexec /i NetAdvantage_WinForms_20112.msi /L*V infragistic.log
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now follow the installation&lt;/p&gt;

&lt;p&gt;Now looks into generated &lt;code&gt;infragistic.log&lt;/code&gt; file and look for values you entered.&lt;/p&gt;

&lt;p&gt;Piece of log file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;...
Action 20:16:29: ExecuteAction.
Action start 20:16:29: ExecuteAction.
MSI (c) (A4:F0) [20:16:29:526]: PROPERTY CHANGE: Adding SECONDSEQUENCE property. Its value is &#39;1&#39;.
MSI (c) (A4:F0) [20:16:29:535]: Grabbed execution mutex.
MSI (c) (A4:F0) [20:16:29:535]: Incrementing counter to disable shutdown. Counter after increment: 0
MSI (c) (A4:F0) [20:16:29:535]: Switching to server: COMMON_DOCUMENTS_LOC=&amp;quot;C:\Users\Public\Documents&amp;quot; USER_DOCUMENTS_LOC=&amp;quot;C:\Users\voloda\Documents&amp;quot; INSTALLDIR=&amp;quot;C:\Program Files (x86)\Infragistics\&amp;quot; AGREE_AND_INSTALL_OFFICE_2007_UI=&amp;quot;No&amp;quot; INSTALL_SERIALNUM=&amp;quot;1234&amp;quot; COMMONDOCUMENTS=&amp;quot;C:\CommonDocuments\&amp;quot; TARGETDIR=&amp;quot;C:\Program Files (x86)\Infragistics\&amp;quot; ALLUSERS=&amp;quot;1&amp;quot; DOTNETV4=&amp;quot;1&amp;quot; IGSHORTCUTDIR=&amp;quot;C:\Users\voloda\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Infragistics\&amp;quot; INSTALLDIR.B2768727_084D_4283_A045_7A86BAF639DC=&amp;quot;C:\Windows\SysWOW64\GAC\&amp;quot; INSTALLDIR.4ED14E0A_AECA_4FCD_BEF6_35F299C4270E=&amp;quot;C:\Windows\SysWOW64\UltimateKeys\&amp;quot; _INSTALL_PROD_CODE=&amp;quot;48&amp;quot; INSTALLDIR.D348289C_580E_44C6_A617_A90FC315DB7D=&amp;quot;C:\Windows\SysWOW64\UltimateKeys\&amp;quot; INSTALLDIR.52DB8F59_5C03_491A_99D2_1A0565A67FD2=&amp;quot;C:\Windows\SysWOW64\UltimateKeys\&amp;quot; INSTALLDIR.96F9412E_4A28_4BF2_B6B7_66F921C4BE3C=&amp;quot;C:\Windows\SysWOW64\UltimateKeys\&amp;quot; INSTALLDIR.7295D7F7_BBA6_41D4_8E45_780AD1F07B46=&amp;quot;C:\Windows\SysWOW64\UltimateKeys\&amp;quot; CURRENTDIRECTORY=&amp;quot;C:\Users\voloda\docker-tests\windows-nbo&amp;quot; CLIENTUILEVEL=&amp;quot;0&amp;quot; CLIENTPROCESS
MSI (s) (F0:94) [20:16:29:547]: Running installation inside multi-package transaction C:\Users\voloda\docker-tests\windows-nbo\NetAdvantage_WinForms_20112.msi
MSI (s) (F0:94) [20:16:29:547]: Grabbed execution mutex.
MSI (s) (F0:C8) [20:16:29:579]: Resetting cached policy values
MSI (s) (F0:C8) [20:16:29:579]: Machine policy value &#39;Debug&#39; is 0
MSI (s) (F0:C8) [20:16:29:579]: ******* RunEngine:
           ******* Product: C:\Users\voloda\docker-tests\windows-nbo\NetAdvantage_WinForms_20112.msi
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Keep in mind that for example passwords, serial numbers etc. might be in the log
masked so you need to be a bit inventive to find all important values.&lt;/p&gt;

&lt;p&gt;General suggestion for MSI is that any properties which have upper-case names
should be available on command line.&lt;/p&gt;

&lt;p&gt;MSI properties seems to be specified here:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;MSI (c) (A4:F0) [20:16:29:535]: Switching to server: COMMON_DOCUMENTS_LOC=&amp;quot;C:\Users\Public\Documents&amp;quot; USER_DOCUMENTS_LOC=&amp;quot;C:\Users\voloda\Documents&amp;quot; INSTALLDIR=&amp;quot;C:\Program Files (x86)\Infragistics\&amp;quot; AGREE_AND_INSTALL_OFFICE_2007_UI=&amp;quot;No&amp;quot; INSTALL_SERIALNUM=&amp;quot;1234&amp;quot; COMMONDOCUMENTS=&amp;quot;C:\CommonDocuments\&amp;quot; TARGETDIR=&amp;quot;C:\Program Files (x86)\Infragistics\&amp;quot; ALLUSERS=&amp;quot;1&amp;quot; DOTNETV4=&amp;quot;1&amp;quot; IGSHORTCUTDIR=&amp;quot;C:\Users\voloda\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\Infragistics\&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For Infragistic and my build agent I am interested in following entries:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;INSTALL_SERIALNUM&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;AGREE_AND_INSTALL_OFFICE_2007_UI&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;use-orca-editor&#34;&gt;Use Orca editor&lt;/h2&gt;

&lt;p&gt;Microsoft provides as a part of MSI SDK &lt;code&gt;Orca.exe&lt;/code&gt; which allows to edit MSI database.&lt;/p&gt;

&lt;p&gt;Following the above rule about upper-case names you can find properties which
can be specified on command line.&lt;/p&gt;

&lt;p&gt;This can be actually easier but requires MSI SDK with &lt;code&gt;Orca.exe&lt;/code&gt; installed.&lt;/p&gt;

&lt;h1 id=&#34;dockerfile&#34;&gt;Dockerfile&lt;/h1&gt;

&lt;p&gt;Once we know parameters we can just update the &lt;code&gt;Dockerfile&lt;/code&gt; so it copies SDK
to the image and then executes unattended installation the SDK including the
license (or whatever details you need).&lt;/p&gt;

&lt;p&gt;In this case we specify the license number (&lt;code&gt;INSTALL_SERIALNUM=1234&lt;/code&gt;) and
bunch of other properties.&lt;/p&gt;

&lt;p&gt;The example below ensures that during building the image we wait until the
installation process finishes.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-dockerfile&#34; data-lang=&#34;dockerfile&#34;&gt;COPY NetAdvantage_WinForms_20112.msi &lt;span style=&#34;color:#a31515&#34;&gt;&amp;#34;C:\\&amp;#34;&lt;/span&gt;&lt;span style=&#34;&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00f&#34;&gt;RUN&lt;/span&gt; $ErrorActionPreference = &lt;span style=&#34;color:#a31515&#34;&gt;&amp;#39;Stop&amp;#39;&lt;/span&gt;; &lt;span style=&#34;color:#a31515&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#a31515&#34;&gt;&lt;/span&gt;    $VerbosePreference = &lt;span style=&#34;color:#a31515&#34;&gt;&amp;#39;Continue&amp;#39;&lt;/span&gt;; &lt;span style=&#34;color:#a31515&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#a31515&#34;&gt;&lt;/span&gt;    Start-Process -Wait -PassThru -FilePath c:&lt;span style=&#34;color:#a31515&#34;&gt;\w&lt;/span&gt;indows&lt;span style=&#34;color:#a31515&#34;&gt;\s&lt;/span&gt;ystem32&lt;span style=&#34;color:#a31515&#34;&gt;\m&lt;/span&gt;siexec.exe -ArgumentList &lt;span style=&#34;color:#a31515&#34;&gt;&amp;#39;/i c:\\NetAdvantage_WinForms_20112.msi  /q /l* c:\\infragistic.log INSTALL_SERIALNUM=1234 ALLUSERS=1 AGREE_AND_INSTALL_OFFICE_2007_UI=No&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Handling detailed code reviews in GIT</title>
      <link>http://voloda.bazilisek.net/2017/11/handling-detailed-code-reviews-in-git/</link>
      <pubDate>Thu, 23 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>http://voloda.bazilisek.net/2017/11/handling-detailed-code-reviews-in-git/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;Pull Requests are sometimes not sufficient - they allow to see changes,
perhaps you can even see that a test build passed but these do not allow
for actual functional testing or even navigating thru the code.&lt;/li&gt;
&lt;li&gt;Some times it is convenient to see all the changes in staging area
(similar to TFS unshelve functionality) so functional test can be done
and code can be reviewed more deeply.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Below steps allow to achieve the same state as for TFS unshelve - you end-up
with code checked out and staged in GIT:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Fetch remote changes

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git fetch origin&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Checkout target branch

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git checkout TargetBranchName&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Do dry merge (without commit)

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git merge --no-commit --no-ff origin/ReviewedBranchName&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now you can do the detailed code review, put comments into PR, do testing,
navigate thru references usign Resharper in Visual Studio etc.&lt;/p&gt;

&lt;p&gt;Once done just abort the merge:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git merge --abort&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Jenkins Docker Slave Windows Build Agent</title>
      <link>http://voloda.bazilisek.net/2017/11/jenkins-docker-slave-windows-build-agent/</link>
      <pubDate>Sun, 19 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>http://voloda.bazilisek.net/2017/11/jenkins-docker-slave-windows-build-agent/</guid>
      <description>

&lt;p&gt;I spent quite some time on getting this working on Windows with Windows Docker
slaves.&lt;/p&gt;

&lt;p&gt;In the end it turned out to be mostly matter of using correct Jenkins docker
plugin.&lt;/p&gt;

&lt;h1 id=&#34;jenkins-docker-slave&#34;&gt;Jenkins docker slave&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Use &lt;code&gt;Yet Another Docker Plugin&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;With this plugin it just works (Docker Plugin doesn&amp;rsquo;t work)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Install JAVA into docker image and make it available on PATH&lt;/li&gt;
&lt;li&gt;In Configuration add &lt;code&gt;Yet Another Docker Plugin&lt;/code&gt; as a &lt;code&gt;Cloud&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;Point it to &lt;code&gt;Docker server&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Test that it is available&lt;/li&gt;
&lt;li&gt;Add the docker image&lt;/li&gt;
&lt;li&gt;Add label which can be references from builds&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Jenkins now automatically creates a docker container as a build is executed

&lt;ul&gt;
&lt;li&gt;It does not require any additional changes&lt;/li&gt;
&lt;li&gt;It properly handles the operating system (Windows)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;For local only images make sure that the &lt;code&gt;Pull&lt;/code&gt; option is set to &lt;code&gt;Never&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;base-dockerfile&#34;&gt;Base Dockerfile&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;This &lt;code&gt;Dockerfile&lt;/code&gt; creates the base image for Windows build agent&lt;/li&gt;
&lt;li&gt;The only requirements is that &lt;code&gt;java.exe&lt;/code&gt; must be accessible in path.

&lt;ul&gt;
&lt;li&gt;It could be perhaps even installed using &lt;code&gt;Chocolatey&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;FROM microsoft/windowsservercore

SHELL [&amp;quot;powershell.exe&amp;quot;, &amp;quot;-ExecutionPolicy&amp;quot;, &amp;quot;Bypass&amp;quot;, &amp;quot;-Command&amp;quot;]

RUN iex ((New-Object System.Net.WebClient).DownloadString(&#39;https://chocolatey.org/install.ps1&#39;))
RUN choco install -y git --params=&#39;/NoShellIntegration&#39;
RUN choco install -y nuget.commandline

ENV JAVA_HOME c:\\jre1.8.0_91
ENV JENKINS_HOME c:\\jenkins

RUN (new-object System.Net.WebClient).Downloadfile(&#39;http://javadl.oracle.com/webapps/download/AutoDL?BundleId=210185&#39;, &#39;C:\jre-8u91-windows-x64.exe&#39;)
RUN start-process -filepath C:\\jre-8u91-windows-x64.exe -passthru -wait -argumentlist &amp;quot;/s,INSTALLDIR=$env:JAVA_HOME,/L,install64.log&amp;quot;
RUN del C:\jre-8u91-windows-x64.exe

RUN $env:PATH = $env:JAVA_HOME + &#39;\\bin;&#39; + $env:PATH; \
    [Environment]::SetEnvironmentVariable(&#39;PATH&#39;, $env:PATH, [EnvironmentVariableTarget]::Machine);

RUN mkdir $env:JENKINS_HOME
WORKDIR $JENKINS_HOME

ENTRYPOINT [&amp;quot;cmd.exe&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;visual-studio-2017-dockerfile&#34;&gt;Visual Studio 2017 Dockerfile&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;This &lt;code&gt;Dockerfile&lt;/code&gt; uses the above as the base image and installs VS 2017

&lt;ul&gt;
&lt;li&gt;It add SDK for .NET 4.5.2 and 4.6.1&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;FROM vkloz/winjava

SHELL [&amp;quot;powershell.exe&amp;quot;, &amp;quot;-ExecutionPolicy&amp;quot;, &amp;quot;Bypass&amp;quot;, &amp;quot;-Command&amp;quot;]

ENV TEST_CONTAINER=1 \
    VS_CHANNEL_URI=https://aka.ms/vs/15/release/799c44140/channel \
    VS_BUILDTOOLS_URI=https://aka.ms/vs/15/release/799c44140/vs_buildtools.exe \
    VS_BUILDTOOLS_SHA256=FA29EB83297AECADB0C4CD41E54512C953164E64EEDD9FB9D3BF9BD70C9A2D29

# Download log collection utility
RUN $ErrorActionPreference = &#39;Stop&#39;; \
    $ProgressPreference = &#39;SilentlyContinue&#39;; \
    $VerbosePreference = &#39;Continue&#39;; \
    Invoke-WebRequest -Uri https://aka.ms/vscollect.exe -OutFile C:\collect.exe

# Download vs_buildtools.exe
RUN $ErrorActionPreference = &#39;Stop&#39;; \
    $ProgressPreference = &#39;SilentlyContinue&#39;; \
    $VerbosePreference = &#39;Continue&#39;; \
    Invoke-WebRequest -Uri $env:VS_BUILDTOOLS_URI -OutFile C:\vs_buildtools.exe; \
    if ((Get-FileHash -Path C:\vs_buildtools.exe -Algorithm SHA256).Hash -ne $env:VS_BUILDTOOLS_SHA256) { throw &#39;Download hash does not match&#39; }

# https://docs.microsoft.com/en-us/visualstudio/install/workload-component-id-vs-build-tools
# Install Visual Studio Build Tools
RUN $ErrorActionPreference = &#39;Stop&#39;; \
    $VerbosePreference = &#39;Continue&#39;; \
    $p = Start-Process -Wait -PassThru -FilePath C:\vs_buildtools.exe -ArgumentList &#39;--quiet --nocache --wait --installPath C:\BuildTools&#39;; \
    if ($ret = $p.ExitCode) { c:\collect.exe; throw (&#39;Install failed with exit code 0x{0:x}&#39; -f $ret) }

RUN $ErrorActionPreference = &#39;Stop&#39;; \
    $VerbosePreference = &#39;Continue&#39;; \
    $p = Start-Process -Wait -PassThru -FilePath C:\vs_buildtools.exe -ArgumentList &#39;modify --quiet --nocache --wait --installPath C:\BuildTools --add Microsoft.VisualStudio.Workload.MSBuildTools&#39;; \
    if ($ret = $p.ExitCode) { c:\collect.exe; throw (&#39;Install failed with exit code 0x{0:x}&#39; -f $ret) }

RUN $ErrorActionPreference = &#39;Stop&#39;; \
    $VerbosePreference = &#39;Continue&#39;; \
    $p = Start-Process -Wait -PassThru -FilePath C:\vs_buildtools.exe -ArgumentList &#39;modify --quiet --nocache --wait --installPath C:\BuildTools --add Microsoft.VisualStudio.Component.Static.Analysis.Tools&#39;; \
    if ($ret = $p.ExitCode) { c:\collect.exe; throw (&#39;Install failed with exit code 0x{0:x}&#39; -f $ret) }

RUN choco install -y netfx-4.5.2-devpack
RUN choco install -y netfx-4.6.1-devpack


# Use shell form to start developer command prompt and any other commands specified
SHELL [&amp;quot;cmd.exe&amp;quot;, &amp;quot;/s&amp;quot;, &amp;quot;/c&amp;quot;]
ENTRYPOINT C:\BuildTools\Common7\Tools\VsDevCmd.bat &amp;amp;&amp;amp;

# Default to PowerShell console running within developer command prompt environment
CMD [&amp;quot;powershell.exe&amp;quot;, &amp;quot;-nologo&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Jenkins Server Setup On Windows</title>
      <link>http://voloda.bazilisek.net/2017/10/jenkins-server-setup-on-windows/</link>
      <pubDate>Tue, 17 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>http://voloda.bazilisek.net/2017/10/jenkins-server-setup-on-windows/</guid>
      <description>

&lt;h1 id=&#34;operating-system-preparation&#34;&gt;Operating system preparation&lt;/h1&gt;

&lt;p&gt;These notes assume since beginning separation of the &lt;strong&gt;Jenkins server&lt;/strong&gt; and
individual build agents so on the server will not be any build utilities
except &lt;strong&gt;git&lt;/strong&gt; which is necessary for repository polling.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Install &lt;strong&gt;Chocolatey&lt;/strong&gt; (see instructions on web).&lt;/li&gt;
&lt;li&gt;Install &lt;strong&gt;Google Chrome&lt;/strong&gt; (using Chocolatey is actually much easier than trying
to download it from web).

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;choco install -y googlechrome&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Install &lt;strong&gt;git&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;choco install -y git /NoShellIntegration&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;jenkins-server-setup&#34;&gt;Jenkins Server Setup&lt;/h1&gt;

&lt;p&gt;This is fairly simple:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;See &lt;a href=&#34;http://jenkinks.io/download&#34;&gt;http://jenkinks.io/download&lt;/a&gt; to get installation package.&lt;/li&gt;
&lt;li&gt;Open &lt;a href=&#34;http://localhost:8080/&#34;&gt;http://localhost:8080/&lt;/a&gt; in Chrome and follow instructions.&lt;/li&gt;
&lt;li&gt;Setup firewall rules to make the server accessible as needed.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;useful-plugins&#34;&gt;Useful plugins&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Yet Another Docker plugins

&lt;ul&gt;
&lt;li&gt;Automatic spawning of docker build agents based on label&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;NUnit plugin

&lt;ul&gt;
&lt;li&gt;Parsing of NUnit results&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Blue Ocean plugin

&lt;ul&gt;
&lt;li&gt;Newer Jenkins UI for build pipelines&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;MSBuild Plugin

&lt;ul&gt;
&lt;li&gt;Allows to configure MSBuild as a tool and reference it from scripts&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Role-based authorization strategy

&lt;ul&gt;
&lt;li&gt;Allows role based access Configuration&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;windows-slave-setup&#34;&gt;Windows Slave Setup&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Install Chocolatey (see instructions on web)&lt;/li&gt;
&lt;li&gt;Install Google Chrome

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;choco install -y googlechrome&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Install Java

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;choco install -y javaruntime&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Install git

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;choco install -y git /NoShellIntegration&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;VS2017 build Tools

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;choco install -y visualstudio2017buildtools&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Install Nuget

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;choco install -y nuget.commandline&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Installing packages after the service start may require service restart&lt;/li&gt;
&lt;li&gt;Login to &lt;strong&gt;Jenkins master&lt;/strong&gt; via Chrome&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Configure Global Security&lt;/code&gt; and setup &lt;code&gt;TCP port for JNLP agents&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Add new Node&lt;/li&gt;
&lt;li&gt;Download the java file and run it

&lt;ul&gt;
&lt;li&gt;In menu it allows to &lt;code&gt;Install Windows Service&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;This may need to change the Jenkins server URL in settings&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Setup labels to distribute load across nodes conditionally&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;links&#34;&gt;Links&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://chocolatey.org&#34;&gt;Chocolatey&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Chocolatey setup on DEV machine &#43; useful packages</title>
      <link>http://voloda.bazilisek.net/setup-on-dev-machine-and-useful-packages/</link>
      <pubDate>Wed, 04 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>http://voloda.bazilisek.net/setup-on-dev-machine-and-useful-packages/</guid>
      <description>

&lt;h2 id=&#34;upgrade-all-packages&#34;&gt;Upgrade all packages&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;choco outdated&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;List available upgrades&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cup all -y&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;list-local-packages&#34;&gt;List local Packages&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;chocolatey list -localonly&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;packages&#34;&gt;Packages&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;choco install -y git --params=&#39;/NoShellIntegration&#39;
choco install -y poshgit
choco install -y gittfs
choco install -y far
choco install -y atom
choco install -y chefdk
choco install -y winmerge
choco install -y googlechrome
choco install -y postman
choco install -y 7zip
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>
